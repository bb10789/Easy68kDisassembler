00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/12/2020 2:01:45 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00005000                            12      ORG     $5000
00005000                            13  SPECIALTEST:
00005000  D401                      14          ADD.B     D1,D2
00005002  D311                      15      ADD.B     D1,(A1)
00005004                            16  
00006000                            17      ORG    $6000
00006000                            18  ROLTEST:
00006000                            19  
00006000                            20  
00006000                            21  
00006000                            22  
00006000                            23  
00009000                            24      ORG    $9000
00009000                            25  TESTER:
00009000  4611                      26          NOT.B       (A1)
00009002  4659                      27          NOT.W       (A1)+
00009004  4693                      28          NOT.L       (A3)
00009006  1200                      29          MOVE.B    D0,D1
00009008  1200                      30          MOVE.B    D0,D1
0000900A                            31  
0000900A                            32    
0000900A                            33  
00001000                            34      ORG    $1000
00001000                            35  *=================================================================
00001000                            36  *                     THIS IS OUR MAIN METHOD
00001000                            37  *               Don't throw random stuff in it, keep it to a minimum
00001000                            38  
00001000                            39  START:                  ; first instruction of program
00001000  4EB9 00001006             40          JSR     GETINPUT
00001006                            41  *=================================================================
00001006                            42  *---------------Get starting and ending addresss------- Kelvin
00001006                            43  *--------------- PRE: will be using D0, D5, A1
00001006                            44  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            45  GETINPUT:
00001006  4EB9 00001FBC             46          JSR     CLRREG    *clean registers to restart program
0000100C  4EB9 00001FCE             47          JSR     CLRAREG
00001012  23FC 00000000 000021AE    48          MOVE.L  #0, ScreenCounter * initalize screenCounter
0000101C  43F9 00001FF8             49          LEA     WELCOME, A1
00001022  103C 000E                 50          MOVE.B  #14,    D0
00001026  4E4F                      51          TRAP    #15
00001028  327C 0000                 52          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000102C  103C 0002                 53          MOVE.B  #2,D0
00001030  4E4F                      54          TRAP    #15
00001032  2801                      55          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001034  7000                      56          MOVE.L  #$0, d0  // intitiate counter
00001036  4EB9 00001188             57          JSR     LOOP    // Convert starting address into hex
0000103C  23C5 000021A2             58          MOVE.L  D5, addrStart
00001042  43F9 00002018             59          LEA     WELCOME2, A1
00001048  103C 000E                 60          MOVE.B  #14,    D0
0000104C  4E4F                      61          TRAP    #15
0000104E  327C 0000                 62          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001052  103C 0002                 63          MOVE.B  #2,D0
00001056  4E4F                      64          TRAP    #15
00001058  4245                      65          CLR     D5       // Clear D5 for exit address
0000105A  1801                      66          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000105C  103C 0000                 67          MOVE.B  #$0, d0  // intitiate counter
00001060  4EB9 00001188             68          JSR     LOOP    // Convert Ending address int Hex
00001066  23C5 000021A6             69          MOVE.L  D5, addrEnd
0000106C  4EB9 00001086             70          JSR     CheckRange
00001072  2039 000021A2             71          MOVE.L  addrStart, D0
00001078  2C40                      72          MOVEA.L D0, A6
0000107A  4EB9 00001206             73          JSR     OPCODE
00001080  4EF9 000010E0             74          JMP     END
00001086                            75  
00001086                            76  *==================================================================
00001086                            77  *-----------------Check if the range is above or under the limit
00001086                            78  *------------------Pre: addrStart and addrEnd has begin and end values
00001086                            79          
00001086                            80  CheckRange:
00001086  2C79 000021A2             81          MOVE.L  AddrStart, A6
0000108C  203C 00003000             82          MOVE.L  #LowerLimit, D0
00001092  B08E                      83          CMP.L   A6, D0
00001094  6E00 0EFA                 84          BGT     PRINTINVALIDADDRESS
00001098  203C 00FFFFFE             85          MOVE.L  #UpperLimit, D0
0000109E  B08E                      86          CMP.L   A6, D0
000010A0  6D00 0EEE                 87          BLT     PRINTINVALIDADDRESS
000010A4  2039 000021A2             88          MOVE.L  AddrStart, D0
000010AA  0800 0000                 89          BTST    #0, D0
000010AE  6600 0EE0                 90          BNE     PRINTInvalidAddress
000010B2  2C79 000021A6             91          MOVE.L  AddrEnd, A6
000010B8  203C 00003000             92          MOVE.L  #LowerLimit, D0
000010BE  B08E                      93          CMP.L   A6, D0
000010C0  6E00 0ECE                 94          BGT     PRINTINVALIDADDRESS
000010C4  203C 00FFFFFE             95          MOVE.L  #UpperLimit, D0
000010CA  B08E                      96          CMP.L   A6, D0
000010CC  6D00 0EC2                 97          BLT     PRINTINVALIDADDRESS
000010D0  2039 000021A6             98          MOVE.L  AddrEnd, D0
000010D6  0800 0000                 99          BTST    #0, D0
000010DA  6600 0EB4                100          BNE     PrintInvalidAddress
000010DE  4E75                     101          RTS
000010E0                           102  
000010E0                           103  END:
000010E0  43F9 000020B7            104          LEA     TY_Message, A1
000010E6  103C 000E                105          MOVE.B  #14, D0
000010EA  4E4F                     106          TRAP    #15
000010EC  103C 0009                107          MOVE.B  #9, D0
000010F0  4E4F                     108          TRAP    #15
000010F2                           109          
000010F2                           110  *Please start from here Annabelle
000010F2                           111  AddrLoop:
000010F2  4EB9 00001FBC            112          JSR     CLRREG    *clean registers to restart program
000010F8  4EB9 00001FCE            113          JSR     CLRAREG
000010FE  43F9 000020B4            114          LEA     PRINT_NEXTLINE, A1
00001104  103C 000E                115          MOVE.B  #14, D0
00001108  4E4F                     116          TRAP    #15
0000110A  2879 000021A6            117          MOVE.L  addrEnd, A4
00001110  B9CE                     118          CMP.L   A6, A4
00001112  6F00 0018                119          BLE     CHECK_CONT
00001116  5239 000021AE            120          ADD.B   #1, ScreenCounter
0000111C  0C39 001E 000021AE       121          CMP.B   #30, ScreenCounter
00001124  6700 0030                122          BEQ     Next_Screen
00001128  6000 00DC                123          BRA     OPCODE
0000112C                           124          
0000112C                           125  *===========Check if user wants to continue
0000112C                           126  CHECK_CONT:
0000112C  43F9 00002085            127          LEA     Continue_Program, A1
00001132  103C 000E                128          MOVE.B  #14, D0
00001136  4E4F                     129          TRAP    #15
00001138  43F8 0050                130          LEA     YesNoStorage, A1
0000113C  103C 0002                131          MOVE.B  #2, D0
00001140  4E4F                     132          TRAP    #15
00001142  0C11 0059                133          CMP.B   #$59, (A1) * Yes
00001146  6700 FEBE                134          BEQ     GETINPUT
0000114A  0C11 0079                135          CMP.B   #$79, (A1)
0000114E  6700 FEB6                136          BEQ     GETINPUT
00001152  4EF8 10E0                137          JMP     END
00001156                           138          
00001156                           139  NEXT_SCREEN:
00001156  13FC 0000 000021AE       140          MOVE.B  #0, ScreenCounter
0000115E  43F9 0000209D            141          LEA     Continue_Screen, A1
00001164  103C 000E                142          MOVE.B  #14, D0
00001168  4E4F                     143          TRAP    #15
0000116A  43F8 0050                144          LEA     YesNoStorage, A1
0000116E  103C 0002                145          MOVE.B  #2, D0
00001172  4E4F                     146          TRAP    #15
00001174  0C11 0059                147          CMP.B   #$59, (A1) * Yes
00001178  6700 FF78                148          BEQ     AddrLoop
0000117C  0C11 0079                149          CMP.B   #$79, (A1)
00001180  6700 FF70                150          BEQ     AddrLoop
00001184  4EF8 10E0                151          JMP     END
00001188                           152          
00001188                           153  LOOP
00001188                           154  
00001188  B880                     155          CMP.L   D0, D4  // Loop until length of word reached
0000118A  6E00 0006                156          BGT     CONVERT
0000118E  5480                     157          ADD.L   #$2, D0 
00001190  4E75                     158          RTS 
00001192                           159  
00001192                           160  *=================================================================
00001192                           161  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
00001192                           162  *PRE      D4 must contain input length, d0 must be 0
00001192                           163  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
00001192                           164  CONVERT:
00001192  5280                     165          ADDQ.L  #$1, D0 // increment counter
00001194  1211                     166          move.b  (A1),D1    // Get next bit from Input
00001196  5289                     167          adda.L  #1, A1      // Increment Input
00001198  0401 0030                168          sub.b   #$30,D1     //
0000119C  B23C 0010                169          cmp.b   #$10,D1   // Check if value is larger than 10
000011A0  6E00 000A                170          bgt     CHAR      // Find Hex
000011A4  1401                     171          move.b  D1, D2    // IF it is less than 10
000011A6  4EF9 000011DC            172          JMP     ADDVAL        
000011AC                           173  CHAR:
000011AC  B23C 0011                174          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
000011B0  6700 0030                175          BEQ     A
000011B4  B23C 0012                176          CMP.B   #$12, D1
000011B8  6700 002E                177          BEQ     B
000011BC  B23C 0013                178          CMP.B   #$13, D1
000011C0  6700 002C                179          BEQ     C
000011C4  B23C 0014                180          CMP.B   #$14, D1
000011C8  6700 002A                181          BEQ     D
000011CC  B23C 0015                182          CMP.B   #$15, D1
000011D0  6700 0028                183          BEQ     E
000011D4  B23C 0016                184          CMP.B   #$16, D1
000011D8  6700 0026                185          BEQ     F
000011DC                           186  
000011DC                           187  ADDVAL:
000011DC  E98D                     188          lsl.l    #$4, D5 // Shift based on position
000011DE  DA82                     189          add.l    D2, D5 //Add value into Input
000011E0  60A6                     190          BRA      LOOP
000011E2                           191      
000011E2                           192  A:
000011E2  740A                     193          MOVE.L  #$A, D2 
000011E4  4EF8 11DC                194          jmp ADDVAL
000011E8                           195  B:
000011E8  740B                     196          MOVE.L  #$B, D2
000011EA  4EF8 11DC                197          jmp ADDVAL
000011EE                           198  C:
000011EE  740C                     199          MOVE.L  #$C, D2
000011F0  4EF8 11DC                200          jmp ADDVAL
000011F4                           201  D:
000011F4  740D                     202          MOVE.L  #$D, D2
000011F6  4EF8 11DC                203          jmp ADDVAL
000011FA                           204  E:
000011FA  740E                     205          MOVE.L  #$E, D2
000011FC  4EF8 11DC                206          jmp ADDVAL
00001200                           207  F:
00001200  740F                     208          MOVE.L  #$F, D2
00001202  4EF8 11DC                209          jmp ADDVAL
00001206                           210          
00001206                           211  *=======================================================================
00001206                           212  *---------Find the first 4 of instruction and determines the instruction
00001206                           213  OPCODE:
00001206  4280                     214          CLR.L   D0
00001208  4281                     215          CLR.L   D1
0000120A  4282                     216          CLR.L   D2
0000120C  220E                     217          MOVE.L  A6, D1  * PRINT ADDRESS PER LINE
0000120E  143C 0010                218          MOVE.B  #16, D2
00001212  103C 000F                219          MOVE.B  #15, D0
00001216  4E4F                     220          TRAP    #15
00001218  227C 00000000            221          MOVE.L  #$00000000, A1
0000121E  43F9 000020DC            222          LEA     SPACER, A1
00001224  103C 000E                223          MOVE.B  #14, D0
00001228  4E4F                     224          TRAP    #15
0000122A  4280                     225          CLR.L     D0
0000122C  4281                     226          CLR.L     D1
0000122E  4282                     227          CLR.L     D2
00001230  321E                     228          MOVE.W  (A6)+,D1
00001232  2401                     229          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
00001234  E849                     230          LSR.W   #4, D1
00001236  E849                     231          LSR.W   #4, D1
00001238  E849                     232          LSR.W   #4, D1  //Right Shift 3 times
0000123A  1001                     233          MOVE.B  D1, D0  // OPCODE FOUND
0000123C  B03C 000E                234          CMP.B   #%1110, D0
00001240  6E00 0D5E                235          BGT     PRINTDATA
00001244  C0FC 0006                236          MULU    #6, D0
00001248                           237          *MOVE.B  D0, OpCodeSize
00001248  45F9 00001252            238          LEA     JMPTABLE, A2
0000124E  4EF2 0000                239          JMP     (A2, D0)
00001252                           240          
00001252                           241  *========================================================================
00001252                           242  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001252                           243  *------- Add your instructions here
00001252                           244  JMPTABLE
00001252  4EF9 000012AC            245          JMP     OP0000
00001258  4EF9 000012AC            246          JMP     OP0001 *MOVEB
0000125E  4EF9 000012CA            247          JMP     OP0010 *MOVEL
00001264  4EF9 000012FA            248          JMP     OP0011 *MOVEW
0000126A  4EF9 00001322            249          JMP     OP0100 *NOT NOP JSR LEA MOVEM RTS
00001270  4EF9 000014CC            250          JMP     OP0101 *ADDQ
00001276  4EF9 000014CC            251          JMP     OP0110 *BRA BGT BLE BEQ
0000127C  4EF9 0000168A            252          JMP     OP0111 *MOVEQ
00001282  4EF9 0000175A            253          JMP     OP1000 *OR
00001288  4EF9 0000171E            254          JMP     OP1001 *SUB
0000128E  4EF9 0000179E            255          JMP     OP1010
00001294  4EF9 0000179E            256          JMP     OP1011
0000129A  4EF9 0000179E            257          JMP     OP1100 *AND
000012A0  4EF9 000017DA            258          JMP     OP1101 *ADD ADDA
000012A6  4EF9 00001816            259          JMP     OP1110 *ROR ROL ASL ASR LSL LSR
000012AC                           260  
000012AC                           261  *=====================================================================    
000012AC                           262  *--------------D2 must contain Entire opcode for everything below
000012AC                           263  OP0000:
000012AC                           264  *-> MOVE.B
000012AC                           265  OP0001:
000012AC  13FC 0000 000021B2       266          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012B4  43F9 000020F1            267          LEA     MOVEB, A1
000012BA  103C 000E                268          MOVE.B  #14, D0
000012BE  4E4F                     269          TRAP    #15
000012C0  4EB9 00001B52            270          JSR     EA * Find SRC EA
000012C6  6000 090C                271          BRA     DESTEAFINDER * FIND DEST EA
000012CA                           272  * -> MOVE.L
000012CA                           273  * Printed using MOVEL String as a variable on the very bottom
000012CA                           274  OP0010:
000012CA  13FC 0002 000021B2       275          MOVE.B  #%10, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012D2  43F9 000020EC            276          LEA     MOVE_PRINT, A1
000012D8  103C 000E                277          MOVE.B  #14, D0
000012DC  4E4F                     278          TRAP    #15
000012DE  4EB9 00001B20            279          JSR     CHECK_MOVEA
000012E4  43F9 00002101            280          LEA     MOVEL, A1
000012EA  103C 000E                281          MOVE.B  #14, D0
000012EE  4E4F                     282          TRAP    #15
000012F0  4EB9 00001B52            283          JSR     EA *Find SRC EA
000012F6  6000 08DC                284          BRA     DESTEAFINDER *FIND DEST EA
000012FA                           285  * -> MOVE.W
000012FA                           286  OP0011:
000012FA  43F9 000020EC            287          LEA     MOVE_PRINT, A1
00001300  103C 000E                288          MOVE.B  #14, D0
00001304  4E4F                     289          TRAP    #15
00001306  4EB9 00001B20            290          JSR     CHECK_MOVEA
0000130C  43F9 000020FD            291          LEA     MOVEW, A1
00001312  103C 000E                292          MOVE.B  #14, D0
00001316  4E4F                     293          TRAP    #15
00001318  4EB9 00001B52            294          JSR     EA * FIND SRC EA
0000131E  6000 08B4                295          BRA     DESTEAFINDER *FIND DEST EA
00001322                           296          
00001322                           297  *-> NOT, MOVEM, JSR, RTS, LEA, NOP
00001322                           298  OP0100:
00001322  3602                     299          MOVE.W  D2, D3
00001324  0803 000B                300          BTST.L  #11, D3
00001328  6600 0022                301          BNE     MOVEM_JSR
0000132C  E04B                     302          LSR.W   #8, D3
0000132E  B63C 0046                303          CMP.B   #$46, D3
00001332  6700 002C                304          BEQ     OP_NOT
00001336                           305          
00001336  3602                     306          MOVE.W  D2, D3
00001338  E04B                     307          LSR.W   #8, D3
0000133A  B63C 004E                308          CMP.B   #$4E, D3
0000133E  6700 00C4                309          BEQ     OP_JSR
00001342                           310          
00001342  2602                     311          MOVE.L  D2, D3
00001344  0803 0008                312          BTST.L  #8, D3
00001348  6600 00FA                313          BNE     OP_LEA
0000134C                           314          
0000134C                           315  MOVEM_JSR:
0000134C  0803 0008                316          BTST.L  #8, D3
00001350  6600 00F2                317          BNE     OP_LEA
00001354  0803 0009                318          BTST.L  #9, D3
00001358  6700 0138                319          BEQ     OP_MOVEM
0000135C  6600 00A6                320          BNE     OP_JSR
00001360                           321  
00001360                           322  OP_NOT:
00001360  43F9 00002166            323          LEA     NOT_OP, A1
00001366  103C 000E                324          MOVE.B  #14, D0
0000136A  4E4F                     325          TRAP    #15
0000136C  E14A                     326          LSL.W   #8, D2
0000136E  3602                     327          MOVE.W  D2, D3 * D3 = SIZE OF INSTRUCTION
00001370  E04B                     328          LSR.W   #8, D3
00001372  EC4B                     329          LSR.W   #6, D3
00001374  3202                     330          MOVE.W  D2, D1 * D1 = EA OPMODE
00001376  E549                     331          LSL.W   #2, D1
00001378  E049                     332          LSR.W   #8, D1
0000137A  EA49                     333          LSR.W   #5, D1
0000137C  3002                     334          MOVE.W  D2, D0 * D0 = EA REGISTER
0000137E  EB48                     335          LSL.W   #5, D0
00001380  E048                     336          LSR.W   #8, D0
00001382  EA48                     337          LSR.W   #5, D0
00001384  C6FC 0006                338          MULU    #6, D3 * Multiply for JMPTABLE
00001388  45F9 00001392            339          LEA     NOT_JMPTable, A2
0000138E  4EB2 3000                340          JSR     (A2, D3)
00001392                           341          
00001392                           342  NOT_JMPTable
00001392  4EF9 000013AA            343          JMP     NOT_SIZE00
00001398  4EF9 000013CC            344          JMP     NOT_SIZE01
0000139E  4EF9 000013E6            345          JMP     NOT_SIZE10
000013A4  4EF9 00001400            346          JMP     NOT_SIZE11
000013AA                           347  *NOT.B
000013AA                           348  NOT_SIZE00:
000013AA  13FC 0000 000021B2       349          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000013B2  1A00                     350          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
000013B4  43F9 000020F9            351          LEA     SIZE_B, A1
000013BA  103C 000E                352          MOVE.B  #14, D0
000013BE  4E4F                     353          TRAP    #15
000013C0  1005                     354          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013C2  4EB9 00001B70            355          JSR     EACHECKER
000013C8  6000 FD28                356          BRA     AddrLoop
000013CC                           357  * NOT.W
000013CC                           358  NOT_SIZE01: 
000013CC  1A00                     359          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
000013CE  43F9 000020E4            360          LEA     SIZE_WORD, A1
000013D4  103C 000E                361          MOVE.B  #14, D0
000013D8  4E4F                     362          TRAP    #15
000013DA  1005                     363          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013DC  4EB9 00001B70            364          JSR     EACHECKER
000013E2  6000 FD0E                365          BRA     AddrLoop
000013E6                           366  * NOT.L
000013E6                           367  NOT_SIZE10:
000013E6  1A00                     368          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
000013E8  43F9 000020E8            369          LEA     SIZE_LONG, A1
000013EE  103C 000E                370          MOVE.B  #14, D0
000013F2  4E4F                     371          TRAP    #15
000013F4  1005                     372          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013F6  4EB9 00001B70            373          JSR     EACHECKER
000013FC  6000 FCF4                374          BRA     AddrLoop
00001400                           375  NOT_SIZE11:
00001400  6000 0B6E                376          BRA     PRINTINVALIDEA
00001404                           377  
00001404                           378  OP_JSR:
00001404  4EB9 00001430            379          JSR     JSR_DATA
0000140A  BC3C 0002                380          CMP.B   #$2, D6
0000140E  6700 0796                381          BEQ     DESTEACHECKER
00001412  BC3C 0007                382          CMP.B   #$7, D6
00001416  6700 0858                383          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000141A  4EB9 00001F70            384          JSR     PrintInvalidEA
00001420  43F9 00002186            385          LEA     JSR, A1
00001426  103C 000E                386          MOVE.B  #14, D0
0000142A  4E4F                     387          TRAP    #15
0000142C  4EB2 4000                388          JSR     (A2, D4)
00001430                           389          
00001430                           390  JSR_DATA:
00001430  2602                     391          MOVE.L  D2, D3
00001432  0203 0007                392          ANDI.B  #$7, D3
00001436  1E03                     393          MOVE.B  D3, D7
00001438  2602                     394          MOVE.L  D2, D3
0000143A  E64B                     395          LSR.W   #3, D3
0000143C  0203 0007                396          ANDI.B  #$7, D3
00001440  1C03                     397          MOVE.B  D3, D6
00001442  4E75                     398          RTS
00001444                           399  
00001444                           400  OP_LEA:
00001444  4EB9 00001470            401          JSR     LEA_DATA
0000144A  BC3C 0002                402          CMP.B   #$2, D6
0000144E  6700 0756                403          BEQ     DESTEACHECKER
00001452  BC3C 0007                404          CMP.B   #$7, D6
00001456  6700 0818                405          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000145A  4EB9 00001F70            406          JSR     PrintInvalidEA
00001460  43F9 0000218E            407          LEA     LEA, A1
00001466  103C 000E                408          MOVE.B  #14, D0
0000146A  4E4F                     409          TRAP    #15
0000146C  4EB2 4000                410          JSR     (A2, D4)
00001470                           411  
00001470                           412  LEA_DATA:
00001470  2602                     413          MOVE.L  D2, D3
00001472  0203 0007                414          ANDI.B  #$7, D3
00001476  1E03                     415          MOVE.B  D3, D7
00001478  2602                     416          MOVE.L  D2, D3
0000147A  E64B                     417          LSR.W   #3, D3
0000147C  0203 0007                418          ANDI.B  #$7, D3
00001480  1C03                     419          MOVE.B  D3, D6
00001482  2602                     420          MOVE.L  D2, D3
00001484  EA4B                     421          LSR.W   #5, D3
00001486  E84B                     422          LSR.W   #4, D3
00001488  0203 0007                423          ANDI.B  #$7, D3
0000148C  1A03                     424          MOVE.B  D3, D5
0000148E  2602                     425          MOVE.L  D2, D3
00001490  4E75                     426          RTS
00001492                           427  
00001492                           428  OP_MOVEM:
00001492  3602                     429          MOVE.W  D2, D3
00001494  EE4B                     430          LSR.W   #7, D3
00001496  0243 0007                431          ANDI.W  #%111, D3
0000149A  0C43 0001                432          CMPI.W  #%001, D3
0000149E  6600 0AE0                433          BNE     PrintInvalidSUB
000014A2  3602                     434          MOVE.W  D2, D3
000014A4  4EB9 000014CC            435          JSR     MOVEM_SRC
000014AA  4EB9 000014CC            436          JSR     MOVEM_SIZE
000014B0  4EB9 000014CC            437          JSR     MOVEM_DATAREGISTER
000014B6  4EB9 000014CC            438          JSR     MOVEM_REG_LIST
000014BC  0C39 0000 0000211A       439          CMPI.B  #%0, MOVEM_DR
000014C4  6700 0006                440          BEQ     MOVEM_REG_MEM
000014C8  6000 0002                441          BRA     MOVEM_MEM_REG
000014CC                           442          
000014CC                           443  
000014CC                           444  MOVEM_SRC:
000014CC                           445  
000014CC                           446  
000014CC                           447  MOVEM_SIZE:
000014CC                           448  
000014CC                           449  
000014CC                           450  MOVEM_DATAREGISTER:
000014CC                           451  
000014CC                           452  MOVEM_REG_LIST:
000014CC                           453  
000014CC                           454  MOVEM_REG_MEM:
000014CC                           455  
000014CC                           456  MOVEM_MEM_REG:
000014CC                           457  
000014CC                           458  
000014CC                           459  * ------------- MOVEM PRINT --------------
000014CC                           460  
000014CC                           461              
000014CC                           462  OP0101:
000014CC                           463  
000014CC                           464  * BRA, Bcc(BGT, BLE, BEQ)        
000014CC                           465  OP0110:
000014CC  3602                     466          MOVE.W      D2, D3
000014CE  EE4B                     467          LSR.W       #7, D3
000014D0  E24B                     468          LSR.W       #1, D3
000014D2  0243 000F                469          ANDI.W      #$0F, D3
000014D6  0C43 0000                470          CMPI.W      #0, D3
000014DA  6700 001A                471          BEQ         OP_BRA
000014DE  0C43 000E                472          CMPI.W      #%1110, D3
000014E2  6700 005E                473          BEQ         OP_BGT
000014E6  0C43 000F                474          CMPI.W      #%1111, D3
000014EA  6700 00A2                475          BEQ         OP_BLE
000014EE  0C43 0007                476          CMPI.W      #%0111, D3
000014F2  6700 00E6                477          BEQ         OP_BEQ
000014F6                           478      
000014F6                           479  OP_BRA:
000014F6  2602                     480          MOVE.L  D2, D3
000014F8  0243 00FF                481          ANDI.W  #$FF, D3
000014FC  3A03                     482          MOVE.W  D3, D5
000014FE  43F9 0000219E            483          LEA     BRA, A1
00001504  103C 000E                484          MOVE.B  #14, D0
00001508  4E4F                     485          TRAP    #15
0000150A  B67C 0000                486          CMP.W   #$00, D3
0000150E  6700 0116                487          BEQ     BRA_WORD
00001512  B67C 00FF                488          CMP.W   #$FF, D3
00001516  6700 0140                489          BEQ     BRA_LONG
0000151A  43F9 00002153            490          LEA     DOLLAR_SIGN, A1
00001520  D605                     491          ADD.B   D5, D3
00001522  5403                     492          ADD.B   #2, D3
00001524  2203                     493          MOVE.L  D3, D1
00001526  143C 0010                494          MOVE.B  #16, D2
0000152A  103C 000F                495          MOVE.B  #15, D0
0000152E  4E4F                     496          TRAP    #15
00001530  43F9 000020B4            497          LEA     Print_NextLine, A1
00001536  341A                     498          MOVE.W  (A2)+,D2
00001538  B5F9 000021A6            499          CMP.L   addrEnd, A2
0000153E  6D00 FC48                500          BLT     Loop
00001542                           501          
00001542                           502  
00001542                           503  OP_BGT:
00001542  2602                     504          MOVE.L  D2, D3
00001544  0243 00FF                505          ANDI.W  #$FF, D3
00001548  3A03                     506          MOVE.W  D3, D5
0000154A  43F9 00002192            507          LEA     BGT, A1
00001550  103C 000E                508          MOVE.B  #14, D0
00001554  4E4F                     509          TRAP    #15
00001556  B67C 0000                510          CMP.W   #$00, D3
0000155A  6700 00CA                511          BEQ     BRA_WORD
0000155E  B67C 00FF                512          CMP.W   #$FF, D3
00001562  6700 00F4                513          BEQ     BRA_LONG
00001566  43F9 00002153            514          LEA     DOLLAR_SIGN, A1
0000156C  D605                     515          ADD.B   D5, D3
0000156E  5403                     516          ADD.B   #2, D3
00001570  2203                     517          MOVE.L  D3, D1
00001572  143C 0010                518          MOVE.B  #16, D2
00001576  103C 000F                519          MOVE.B  #15, D0
0000157A  4E4F                     520          TRAP    #15
0000157C  43F9 000020B4            521          LEA     Print_NextLine, A1
00001582  341A                     522          MOVE.W  (A2)+,D2
00001584  B5F9 000021A6            523          CMP.L   addrEnd, A2
0000158A  6D00 FBFC                524          BLT     Loop
0000158E                           525  
0000158E                           526  OP_BLE:
0000158E  2602                     527          MOVE.L  D2, D3
00001590  0243 00FF                528          ANDI.W  #$FF, D3
00001594  3A03                     529          MOVE.W  D3, D5
00001596  43F9 00002196            530          LEA     BLE, A1
0000159C  103C 000E                531          MOVE.B  #14, D0
000015A0  4E4F                     532          TRAP    #15
000015A2  B67C 0000                533          CMP.W   #$00, D3
000015A6  6700 007E                534          BEQ     BRA_WORD
000015AA  B67C 00FF                535          CMP.W   #$FF, D3
000015AE  6700 00A8                536          BEQ     BRA_LONG
000015B2  43F9 00002153            537          LEA     DOLLAR_SIGN, A1
000015B8  D605                     538          ADD.B   D5, D3
000015BA  5403                     539          ADD.B   #2, D3
000015BC  2203                     540          MOVE.L  D3, D1
000015BE  143C 0010                541          MOVE.B  #16, D2
000015C2  103C 000F                542          MOVE.B  #15, D0
000015C6  4E4F                     543          TRAP    #15
000015C8  43F9 000020B4            544          LEA     Print_NextLine, A1
000015CE  341A                     545          MOVE.W  (A2)+,D2
000015D0  B5F9 000021A6            546          CMP.L   addrEnd, A2
000015D6  6D00 FBB0                547          BLT     Loop
000015DA                           548  
000015DA                           549  OP_BEQ:
000015DA  2602                     550          MOVE.L  D2, D3
000015DC  0243 00FF                551          ANDI.W  #$FF, D3
000015E0  3A03                     552          MOVE.W  D3, D5
000015E2  43F9 0000219A            553          LEA     BEQ, A1
000015E8  103C 000E                554          MOVE.B  #14, D0
000015EC  4E4F                     555          TRAP    #15
000015EE  B67C 0000                556          CMP.W   #$00, D3
000015F2  6700 0032                557          BEQ     BRA_WORD
000015F6  B67C 00FF                558          CMP.W   #$FF, D3
000015FA  6700 005C                559          BEQ     BRA_LONG
000015FE  43F9 00002153            560          LEA     DOLLAR_SIGN, A1
00001604  D605                     561          ADD.B   D5, D3
00001606  5403                     562          ADD.B   #2, D3
00001608  2203                     563          MOVE.L  D3, D1
0000160A  143C 0010                564          MOVE.B  #16, D2
0000160E  103C 000F                565          MOVE.B  #15, D0
00001612  4E4F                     566          TRAP    #15
00001614  43F9 000020B4            567          LEA     Print_NextLine, A1
0000161A  341A                     568          MOVE.W  (A2)+,D2
0000161C  B5F9 000021A6            569          CMP.L   addrEnd, A2
00001622  6D00 FB64                570          BLT     Loop
00001626                           571  
00001626                           572  BRA_WORD:
00001626  1E3C 0000                573          MOVE.B  #0, D7
0000162A  4EB9 00001C24            574          JSR     JMPTo_Dest_ADDR_Reg
00001630  43F9 00002153            575          LEA     DOLLAR_SIGN, A1
00001636  D646                     576          ADD.W   D6, D3
00001638  5443                     577          ADD.W   #2, D3
0000163A  2203                     578          MOVE.L  D3, D1
0000163C  143C 0010                579          MOVE.B  #16, D2
00001640  103C 000F                580          MOVE.B  #15, D0
00001644  4E4F                     581          TRAP    #15
00001646  43F9 000020B4            582          LEA     Print_NextLine, A1
0000164C  B5F9 000021A6            583          CMP.L   addrEnd, A2
00001652  6D00 FB34                584          BLT     Loop
00001656  4E75                     585          RTS
00001658                           586  
00001658                           587  BRA_LONG:
00001658  1E3C 0001                588          MOVE.B  #1, D7
0000165C  4EB9 00001C24            589          JSR     JMPTo_Dest_ADDR_Reg
00001662  43F9 00002153            590          LEA     DOLLAR_SIGN, A1
00001668  D646                     591          ADD.W   D6, D3
0000166A  5443                     592          ADD.W   #2, D3
0000166C  2203                     593          MOVE.L  D3, D1
0000166E  143C 0010                594          MOVE.B  #16, D2
00001672  103C 000F                595          MOVE.B  #15, D0
00001676  4E4F                     596          TRAP    #15
00001678  43F9 000020B4            597          LEA     Print_NextLine, A1
0000167E  B5F9 000021A6            598          CMP.L   addrEnd, A2
00001684  6D00 FB02                599          BLT     Loop
00001688  4E75                     600          RTS
0000168A                           601  * --------------------------------
0000168A                           602          
0000168A                           603  
0000168A                           604  * MOVEQ
0000168A                           605  * -> Splitting MOVEQ into Data and Register
0000168A                           606  OP0111:
0000168A  3602                     607          MOVE.W  D2, D3
0000168C  EE4B                     608          LSR.W   #7, D3
0000168E  E24B                     609          LSR.W   #1, D3
00001690  0243 0001                610          ANDI.W  #$1, D3
00001694  0C03 0000                611          CMPI.B  #%0, D3
00001698  6600 09B2                612          BNE     INVALID_EA_SUB
0000169C  3602                     613          MOVE.W  D2, D3
0000169E  4EB9 000016B6            614          JSR     MOVEQ_DATA
000016A4  4EB9 000016C0            615          JSR     MOVEQ_REG
000016AA  43F9 0000210E            616          LEA     MOVEQ, A1
000016B0  103C 000E                617          MOVE.B  #14, D0
000016B4  4E4F                     618          TRAP    #15
000016B6                           619          
000016B6                           620  MOVEQ_DATA:
000016B6  3602                     621          MOVE.W  D2, D3
000016B8  0243 00FF                622          ANDI.W  #$FF, D3
000016BC  3E03                     623          MOVE.W  D3, D7
000016BE  4E75                     624          RTS
000016C0                           625          
000016C0                           626  MOVEQ_REG:
000016C0  3602                     627          MOVE.W  D2, D3
000016C2  EE4B                     628          LSR.W   #7, D3
000016C4  E44B                     629          LSR.W   #2, D3
000016C6  0243 0007                630          ANDI.W  #$7, D3
000016CA  3803                     631          MOVE.W  D3, D4
000016CC  4E75                     632          RTS
000016CE                           633          
000016CE                           634  OP_NOP:
000016CE  3602                     635          MOVE.W  D2, D3
000016D0  0A43 4E71                636          EORI.W  #$4E71, D3
000016D4  B67C 0000                637          CMP.W   #0, D3
000016D8  43F9 00002182            638          LEA     NOP, A1
000016DE  103C 000E                639          MOVE.B  #14, D0
000016E2  4E4F                     640          TRAP    #15
000016E4  4EB9 000020B4            641          JSR     Print_NextLine
000016EA  341A                     642          MOVE.W  (A2)+, D2
000016EC  B5F9 000021A6            643          CMP.L   addrEnd,A2
000016F2  6D00 F9FE                644          BLT     AddrLoop
000016F6                           645          
000016F6                           646  OP_RTS:
000016F6  3602                     647          MOVE.W  D2, D3
000016F8  0A43 4E75                648          EORI.W  #$4E75, D3
000016FC  B67C 0000                649          CMP.W   #0, D3
00001700  43F9 0000218A            650          LEA     RTS, A1
00001706  103C 000E                651          MOVE.B  #14, D0
0000170A  4E4F                     652          TRAP    #15
0000170C  4EB9 000020B4            653          JSR     Print_NextLine
00001712  341A                     654          MOVE.W  (A2)+,D2
00001714  B5F9 000021A6            655          CMP.L   addrEnd,A2
0000171A  6D00 F9D6                656          BLT     AddrLoop
0000171E                           657          
0000171E                           658          
0000171E                           659          
0000171E                           660          
0000171E                           661               
0000171E                           662  
0000171E                           663  * -> SUB
0000171E                           664  * Splitting Sub into OPMODE and Register value
0000171E                           665  OP1001:
0000171E  43F9 00002157            666          LEA     SUBTRACT, A1
00001724  103C 000E                667          MOVE.B  #14, D0
00001728  4E4F                     668          TRAP    #15
0000172A  E94A                     669          LSL.W   #4, D2
0000172C  3602                     670          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000172E  E04B                     671          LSR.W   #8, D3 * D3 = D register
00001730  EA4B                     672          LSR.W   #5, D3
00001732  3802                     673          MOVE.W  D2, D4 *D4 = SubOPMODE
00001734  E74C                     674          LSL.W   #3, D4
00001736  E04C                     675          LSR.W   #8, D4
00001738  EA4C                     676          LSR.W   #5, D4
0000173A  3202                     677          MOVE.W  D2, D1 * D1 = EA Mode
0000173C  ED49                     678          LSL.W   #6, D1
0000173E  E049                     679          LSR.W   #8, D1
00001740  EA49                     680          LSR.W   #5, D1
00001742  3002                     681          MOVE.W  D2, D0 * D0 = EA register
00001744  E148                     682          LSL.W   #8, D0
00001746  E348                     683          LSL.W   #1, D0
00001748  E048                     684          LSR.W   #8, D0
0000174A  EA48                     685          LSR.W   #5, D0
0000174C  45F9 00001996            686          LEA     SubTable, A2
00001752  C8FC 0006                687          MULU    #6, D4
00001756  4EB2 4000                688          JSR     (A2, D4)
0000175A                           689  * -> OR
0000175A                           690  * Splitting AND into OPMODE and Register value       
0000175A                           691  OP1000:
0000175A  43F9 00002163            692          LEA     OR, A1
00001760  103C 000E                693          MOVE.B  #14, D0
00001764  4E4F                     694          TRAP    #15
00001766  E94A                     695          LSL.W   #4, D2
00001768  3602                     696          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000176A  E04B                     697          LSR.W   #8, D3 * D3 = D register
0000176C  EA4B                     698          LSR.W   #5, D3
0000176E  3802                     699          MOVE.W  D2, D4 *D4 = SubOPMODE
00001770  E74C                     700          LSL.W   #3, D4
00001772  E04C                     701          LSR.W   #8, D4
00001774  EA4C                     702          LSR.W   #5, D4
00001776  3202                     703          MOVE.W  D2, D1 * D1 = EA Mode
00001778  ED49                     704          LSL.W   #6, D1
0000177A  E049                     705          LSR.W   #8, D1
0000177C  EA49                     706          LSR.W   #5, D1
0000177E  B23C 0001                707          CMP.B   #%0001, D1
00001782  6700 07EC                708          BEQ     PRINTINVALIDEA
00001786  3002                     709          MOVE.W  D2, D0 * D0 = EA register
00001788  E148                     710          LSL.W   #8, D0
0000178A  E348                     711          LSL.W   #1, D0
0000178C  E048                     712          LSR.W   #8, D0
0000178E  EA48                     713          LSR.W   #5, D0
00001790  45F9 00001996            714          LEA     SubTable, A2
00001796  C8FC 0006                715          MULU    #6, D4
0000179A  4EB2 4000                716          JSR     (A2, D4)
0000179E                           717  OP1010
0000179E                           718  OP1011
0000179E                           719  * -> AND
0000179E                           720  * Splitting AND into OPMODE and Register value
0000179E                           721  OP1100
0000179E  43F9 0000215F            722          LEA     AND, A1
000017A4  103C 000E                723          MOVE.B  #14, D0
000017A8  4E4F                     724          TRAP    #15
000017AA  E94A                     725          LSL.W   #4, D2
000017AC  3602                     726          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000017AE  E04B                     727          LSR.W   #8, D3 * D3 = D register
000017B0  EA4B                     728          LSR.W   #5, D3
000017B2  3802                     729          MOVE.W  D2, D4 *D4 = SubOPMODE
000017B4  E74C                     730          LSL.W   #3, D4
000017B6  E04C                     731          LSR.W   #8, D4
000017B8  EA4C                     732          LSR.W   #5, D4
000017BA  3202                     733          MOVE.W  D2, D1 * D1 = EA Mode
000017BC  ED49                     734          LSL.W   #6, D1
000017BE  E049                     735          LSR.W   #8, D1
000017C0  EA49                     736          LSR.W   #5, D1
000017C2  3002                     737          MOVE.W  D2, D0 * D0 = EA register
000017C4  E148                     738          LSL.W   #8, D0
000017C6  E348                     739          LSL.W   #1, D0
000017C8  E048                     740          LSR.W   #8, D0
000017CA  EA48                     741          LSR.W   #5, D0
000017CC  45F9 00001996            742          LEA     SubTable, A2
000017D2  C8FC 0006                743          MULU    #6, D4
000017D6  4EB2 4000                744          JSR     (A2, D4)
000017DA                           745          
000017DA                           746  * -> ADD
000017DA                           747  * Spltting Add into OPMODE and Register Value
000017DA                           748  OP1101:
000017DA  43F9 0000215B            749          LEA     ADDITION, A1
000017E0  103C 000E                750          MOVE.B  #14, D0
000017E4  4E4F                     751          TRAP    #15
000017E6  E94A                     752          LSL.W   #4, D2
000017E8  3602                     753          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000017EA  E04B                     754          LSR.W   #8, D3 * D3 = D register
000017EC  EA4B                     755          LSR.W   #5, D3
000017EE  3802                     756          MOVE.W  D2, D4 *D4 = SubOPMODE
000017F0  E74C                     757          LSL.W   #3, D4
000017F2  E04C                     758          LSR.W   #8, D4
000017F4  EA4C                     759          LSR.W   #5, D4
000017F6  3202                     760          MOVE.W  D2, D1 * D1 = EA Mode
000017F8  ED49                     761          LSL.W   #6, D1
000017FA  E049                     762          LSR.W   #8, D1
000017FC  EA49                     763          LSR.W   #5, D1
000017FE  3002                     764          MOVE.W  D2, D0 * D0 = EA register
00001800  E148                     765          LSL.W   #8, D0
00001802  E348                     766          LSL.W   #1, D0
00001804  E048                     767          LSR.W   #8, D0
00001806  EA48                     768          LSR.W   #5, D0
00001808  45F9 00001996            769          LEA     SubTable, A2
0000180E  C8FC 0006                770          MULU    #6, D4
00001812  4EB2 4000                771          JSR     (A2, D4)
00001816                           772  
00001816                           773  *-> ROL, ROR        
00001816                           774  OP1110:
00001816  E94A                     775          LSL.W   #4, D2
00001818  3C02                     776          MOVE.W  D2, D6 * Shift size
0000181A  E04E                     777          LSR.W   #8, D6
0000181C  EA4E                     778          LSR.W   #5, D6
0000181E  3602                     779          MOVE.W  D2, D3 * L/R
00001820  E74B                     780          LSL.W   #3, D3
00001822  E04B                     781          LSR.W   #8, D3
00001824  EE4B                     782          LSR.W   #7, D3
00001826  3802                     783          MOVE.W  D2, D4 * Size field
00001828  E94C                     784          LSL.W   #4, D4
0000182A  E04C                     785          LSR.W   #8, D4
0000182C  EC4C                     786          LSR.W   #6, D4
0000182E  3202                     787          MOVE.W  D2, D1 *immediate/register
00001830  ED49                     788          LSL.W   #6, D1
00001832  E049                     789          LSR.W   #8, D1
00001834  EE49                     790          LSR.W   #7, D1
00001836  3A02                     791          MOVE.W  D2, D5 * Shift Register
00001838  E14D                     792          LSL.W   #8, D5
0000183A  E34D                     793          LSL.W   #1, D5
0000183C  E04D                     794          LSR.W   #8, D5
0000183E  EA4D                     795          LSR.W   #5, D5
00001840  C6FC 0006                796          MULU    #6, D3
00001844  43F9 0000184E            797          LEA     RotateTable, A1
0000184A  4EB1 3000                798          JSR     (A1, D3)
0000184E                           799          
0000184E                           800  RotateTable:
0000184E  4EF9 0000185A            801          JMP     Rotate_RIGHT
00001854  4EF9 0000186C            802          JMP     Rotate_LEFT
0000185A                           803          
0000185A                           804  Rotate_Right
0000185A  43F9 0000216E            805          LEA     ROR, A1
00001860  103C 000E                806          MOVE.B  #14, D0
00001864  4E4F                     807          TRAP    #15
00001866  4EF9 0000187E            808          JMP     Rotate_Size_Table
0000186C                           809          
0000186C                           810  Rotate_Left
0000186C  43F9 0000216A            811          LEA     ROL, A1
00001872  103C 000E                812          MOVE.B  #14, D0
00001876  4E4F                     813          TRAP    #15
00001878  4EF9 0000187E            814          JMP     Rotate_Size_Table
0000187E                           815          
0000187E                           816  Rotate_Size_TABLE:
0000187E  B83C 0000                817          CMP.B   #%000, D4
00001882  6700 001A                818          BEQ     Rotate_B
00001886  B83C 0001                819          CMP.B   #%001, D4
0000188A  6700 002E                820          BEQ     Rotate_W
0000188E  B83C 0002                821          CMP.B   #%010, D4
00001892  6700 0042                822          BEQ     Rotate_L
00001896  B83C 0003                823          CMP.B   #%11, D4
0000189A  6700 0056                824          BEQ     Rotate_EA
0000189E                           825          
0000189E                           826  Rotate_B
0000189E  43F9 000020E0            827          LEA     SIZE_BYTE,A1
000018A4  103C 000E                828          MOVE.B  #14, D0
000018A8  4E4F                     829          TRAP    #15
000018AA  B23C 0000                830          CMP.B   #%0, D1
000018AE  6700 00A0                831          BEQ     Rotate_Print_immediate
000018B2  B23C 0001                832          CMP.B   #%1, D1
000018B6  6700 007E                833          BEQ     Rotate_Print_Register
000018BA                           834          
000018BA                           835  Rotate_W
000018BA  43F9 000020E4            836          LEA     SIZE_WORD,A1
000018C0  103C 000E                837          MOVE.B  #14, D0
000018C4  4E4F                     838          TRAP    #15
000018C6  B23C 0000                839          CMP.B   #%0, D1
000018CA  6700 0084                840          BEQ     Rotate_Print_immediate
000018CE  B23C 0001                841          CMP.B   #%1, D1
000018D2  6700 0062                842          BEQ     Rotate_Print_Register
000018D6                           843  
000018D6                           844  Rotate_L
000018D6  43F9 000020E8            845          LEA     SIZE_LONG,A1
000018DC  103C 000E                846          MOVE.B  #14, D0
000018E0  4E4F                     847          TRAP    #15
000018E2  B23C 0000                848          CMP.B   #%0, D1
000018E6  6700 0068                849          BEQ     Rotate_Print_immediate
000018EA  B23C 0001                850          CMP.B   #%1, D1
000018EE  6700 0046                851          BEQ     Rotate_Print_Register
000018F2                           852          
000018F2                           853  Rotate_EA
000018F2  13FC 0001 000021B2       854          MOVE.B  #%01, OpCodeSize
000018FA  43F9 000020DC            855          LEA     SPACER, A1
00001900  103C 000E                856          MOVE.B  #14, D0
00001904  4E4F                     857          TRAP    #15
00001906  1005                     858          MOVE.B  D5, D0
00001908  1202                     859          MOVE.B  D2, D1
0000190A  ED49                     860          LSL.W   #6, D1
0000190C  E049                     861          LSR.W   #8, D1
0000190E  EA49                     862          LSR.W   #5, D1
00001910                           863          
00001910                           864  ROTATE_EACHECKER:
00001910  B23C 0002                865          CMP.B   #%0010, D1
00001914  6700 035A                866          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001918  B23C 0003                867          CMP.B   #%0011, D1
0000191C  6700 0352                868          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001920  B23C 0004                869          CMP.B   #%0100, D1
00001924  6700 034A                870          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001928  4EF9 00001F70            871          JMP     PRINTINVALIDEA
0000192E  B23C 0007                872          CMP.B   #%0111, D1
00001932  6700 0400                873          BEQ     JMPTO_SRC_IMMEDIATE
00001936                           874          
00001936                           875  Rotate_Print_REGISTER
00001936  1006                     876          MOVE.B  D6, D0
00001938  123C 0000                877          MOVE.B  #%000, D1
0000193C  4EB9 00001B70            878          JSR     EACHECKER
00001942  1005                     879          MOVE.B  D5, D0
00001944  4241                     880          CLR     D1
00001946  4EB9 00001BA6            881          JSR     DESTEACHECKER
0000194C  4EF8 10F2                882          JMP     AddrLoop
00001950                           883          
00001950                           884  Rotate_Print_immediate
00001950  43F9 00002155            885          LEA     POUND_SIGN, A1
00001956  103C 000E                886          MOVE.B  #14, D0
0000195A  4E4F                     887          TRAP    #15
0000195C  BC3C 0000                888          CMP.B   #%0000, D6
00001960  6700 0024                889          BEQ     PRINT8
00001964  1206                     890          MOVE.B  D6, D1
00001966  143C 000A                891          MOVE.B  #10, D2
0000196A  103C 000F                892          MOVE.B  #15, D0
0000196E  4E4F                     893          TRAP    #15
00001970                           894          
00001970                           895  Rotate_Print_ImmediateCONT:
00001970  4EB9 00001F62            896          JSR     PRINTCOMMA
00001976  1005                     897          MOVE.B  D5, D0
00001978  123C 0000                898          MOVE.B  #%000, D1
0000197C  4EB9 00001BA6            899          JSR     DESTEACHECKER
00001982  4EF8 10F2                900          JMP     AddrLoop
00001986                           901  
00001986                           902  PRINT8:
00001986  1204                     903          MOVE.B  D4, D1
00001988  143C 000A                904          MOVE.B  #10, D2
0000198C  103C 000F                905          MOVE.B  #15, D0
00001990  4E4F                     906          TRAP    #15
00001992  4EF8 1970                907          JMP     Rotate_Print_ImmediateCONT
00001996                           908          
00001996                           909  * End of ROR, ROL, (Kelvin)                
00001996                           910          
00001996                           911  * =============================================
00001996                           912  * JMP Table for SUB OPMODES
00001996                           913  SubTable:
00001996  4EF9 000019C6            914          JMP     OPMODE000 * BYTE  EA->DN
0000199C  4EF9 000019E0            915          JMP     OPMODE001 * WORD  RA->DN  
000019A2  4EF9 000019F2            916          JMP     OPMODE010 * LONG  EA->DN 
000019A8  4EF9 00001A04            917          JMP     OPMODE011 * ADDA  WORD
000019AE  4EF9 00001A32            918          JMP     OPMODE100 * BYTE  DN->EA
000019B4  4EF9 00001A4A            919          JMP     OPMODE101 * BYTE  DN->EA
000019BA  4EF9 00001A62            920          JMP     OPMODE110 * BYTE  DN->EA
000019C0  4EF9 00001A7A            921          JMP     OPMODE111 * ADDA  LONG
000019C6                           922          
000019C6                           923  OPMODE000:
000019C6  13FC 0000 000021B2       924          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000019CE  1A00                     925          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000019D0  43F9 000020E0            926          LEA     SIZE_BYTE, A1
000019D6  103C 000E                927          MOVE.B  #14, D0
000019DA  4E4F                     928          TRAP    #15
000019DC  6000 00DC                929          BRA     Sub_OPMODE_FIRST
000019E0                           930  OPMODE001
000019E0  1A00                     931          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000019E2  43F9 000020E4            932          LEA     SIZE_Word, A1
000019E8  103C 000E                933          MOVE.B  #14, D0
000019EC  4E4F                     934          TRAP    #15
000019EE  6000 00CA                935          BRA     Sub_OPMODE_FIRST
000019F2                           936  OPMODE010
000019F2  1A00                     937          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000019F4  43F9 000020E8            938          LEA     SIZE_Long, A1
000019FA  103C 000E                939          MOVE.B  #14, D0
000019FE  4E4F                     940          TRAP    #15
00001A00  6000 00B8                941          BRA     Sub_OPMODE_FIRST
00001A04                           942  *===============================================
00001A04                           943  *Special OPMODE can only be used by ADD
00001A04                           944  OPMODE011
00001A04  0C38 000D 1206           945          CMP.B   #%1101, OpCode
00001A0A  6700 0008                946          BEQ     Special_OPMODE_USED
00001A0E  4EF9 00001F70            947          JMP     PRINTINVALIDEA
00001A14                           948  Special_OPMODE_USED:
00001A14  1A00                     949          MOVE.B  D0, D5
00001A16  43F9 00002105            950          LEA     MOVEA, A1
00001A1C  103C 000E                951          MOVE.B  #14, D0
00001A20  4E4F                     952          TRAP    #15
00001A22  43F9 000020E4            953          LEA     SIZE_WORD, A1
00001A28  103C 000E                954          MOVE.B  #14, D0
00001A2C  4E4F                     955          TRAP    #15
00001A2E  6000 00CE                956          BRA     Sub_OPMODE_ADDA
00001A32                           957  OPMODE100
00001A32  1A00                     958          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001A34  43F9 000020E0            959          LEA     SIZE_BYTE, A1
00001A3A  103C 000E                960          MOVE.B  #14, D0
00001A3E  4E4F                     961          TRAP    #15
00001A40  4EB9 00001AA8            962          JSR     Memory_Alterable_Check
00001A46  6000 0090                963          BRA     Sub_OPMODE_SECOND
00001A4A                           964  OPMODE101
00001A4A  1A00                     965          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001A4C  43F9 000020E4            966          LEA     SIZE_Word, A1
00001A52  103C 000E                967          MOVE.B  #14, D0
00001A56  4E4F                     968          TRAP    #15
00001A58  4EB9 00001AA8            969          JSR     Memory_Alterable_Check
00001A5E  6000 0078                970          BRA     Sub_OPMODE_SECOND
00001A62                           971  OPMODE110
00001A62  1A00                     972          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001A64  43F9 000020E8            973          LEA     SIZE_LONG, A1
00001A6A  103C 000E                974          MOVE.B  #14, D0
00001A6E  4E4F                     975          TRAP    #15
00001A70  4EB9 00001AA8            976          JSR     Memory_Alterable_Check
00001A76  6000 0060                977          BRA     Sub_OPMODE_SECOND
00001A7A                           978  OPMODE111:
00001A7A  0C38 000D 1206           979          CMP.B   #%1101, OpCode
00001A80  6700 0008                980          BEQ     Special_OPMODE_USED2
00001A84  4EF9 00001F70            981          JMP     PRINTINVALIDEA
00001A8A                           982  Special_OPMODE_USED2:
00001A8A  1A00                     983          MOVE.B  D0, D5
00001A8C  43F9 00002105            984          LEA     MOVEA, A1
00001A92  103C 000E                985          MOVE.B  #14, D0
00001A96  4E4F                     986          TRAP    #15
00001A98  43F9 000020E8            987          LEA     SIZE_LONG, A1
00001A9E  103C 000E                988          MOVE.B  #14, D0
00001AA2  4E4F                     989          TRAP    #15
00001AA4  6000 0058                990          BRA     Sub_OPMODE_ADDA
00001AA8                           991  *===================================================
00001AA8                           992  * USED FOR SUB AND OR, check if dest EA is memory Alterable
00001AA8                           993  
00001AA8                           994  Memory_Alterable_Check:
00001AA8  B23C 0000                995          CMP.B   #%000, D1
00001AAC  6700 04C2                996          BEQ     PRINTINVALIDEA
00001AB0  B23C 0001                997          CMP.B   #%001, D1
00001AB4  6700 04BA                998          BEQ     PRINTINVALIDEA
00001AB8  4E75                     999          RTS
00001ABA                          1000          
00001ABA                          1001  *===============================================
00001ABA                          1002  * Used for Dn->EA for SUB
00001ABA                          1003  * Called by 001, 010, 100, 
00001ABA                          1004  Sub_OPMODE_FIRST:
00001ABA  1005                    1005          MOVE.B  D5, D0   * TEMP RETURN D0
00001ABC  4EB9 00001B70           1006          JSR     EACHECKER 
00001AC2  4280                    1007          CLR.L     D0
00001AC4  4281                    1008          CLR.L     D1
00001AC6  4EB9 00001F62           1009          JSR     PRINTCOMMA
00001ACC  1003                    1010          MOVE.B  D3, D0
00001ACE  4EB9 00001BA6           1011          JSR     DestEAChecker 
00001AD4  6000 F61C               1012          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001AD8                          1013  *===============================================
00001AD8                          1014  * Used for Dn->EA for SUB
00001AD8                          1015  * Called by 100, 101, 110 
00001AD8                          1016  Sub_OPMODE_SECOND:
00001AD8  1801                    1017          MOVE.B  D1, D4   *TEMP STORE D1
00001ADA  4280                    1018          CLR.L     D0  *Clean D0
00001ADC  1003                    1019          MOVE.B  D3, D0
00001ADE  4281                    1020          CLR.L     D1
00001AE0  4EB9 00001B70           1021          JSR     EACHECKER yeah
00001AE6  4280                    1022          CLR.L     D0
00001AE8  4281                    1023          CLR.L     D1
00001AEA  4EB9 00001F62           1024          JSR     PRINTCOMMA
00001AF0  1005                    1025          MOVE.B  D5, D0   * TEMP RETURN D0
00001AF2  1204                    1026          MOVE.B  D4, D1   * TEMP RETURN D1
00001AF4  4EB9 00001BA6           1027          JSR     DestEAChecker 
00001AFA  6000 F5F6               1028          BRA     addrloop *EA FINISHED-----
00001AFE                          1029  *===============================================
00001AFE                          1030  * Used for Dn->EA for SUB
00001AFE                          1031  * Called by 011, 111
00001AFE                          1032  Sub_OPMODE_ADDA:
00001AFE  1005                    1033          MOVE.B  D5, D0   * TEMP RETURN D0
00001B00  4EB9 00001B70           1034          JSR     EACHECKER 
00001B06  4240                    1035          CLR     D0
00001B08  4241                    1036          CLR     D1
00001B0A  4EB9 00001F62           1037          JSR     PRINTCOMMA
00001B10  1003                    1038          MOVE.B  D3, D0
00001B12  123C 0001               1039          MOVE.B  #%001, D1
00001B16  4EB9 00001BA6           1040          JSR     DestEAChecker 
00001B1C  6000 F5D4               1041          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001B20                          1042          
00001B20                          1043  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
00001B20                          1044  CHECK_MOVEA
00001B20  2602                    1045          MOVE.L  D2, D3  * HOlding D2 in D3 temp
00001B22  E18A                    1046          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001B24  E18A                    1047          LSL.L   #8, D2
00001B26  E98A                    1048          LSL.L   #4, D2
00001B28  E08A                    1049          LSR.L   #8, D2
00001B2A  E08A                    1050          LSR.L   #8, D2
00001B2C  E88A                    1051          LSR.L   #4, D2 // 12 bits of opperand found
00001B2E  EC8A                    1052          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001B30  1202                    1053          MOVE.B  D2, D1 * Prepare D1 for Mode
00001B32  EB09                    1054          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001B34  EA09                    1055          LSR.B   #5, D1
00001B36  B23C 0001               1056          CMP.B   #%001, D1
00001B3A  6700 0006               1057          BEQ     PRINTA
00001B3E  2403                    1058          MOVE.L  D3, D2 
00001B40  4E75                    1059          RTS * Goes back to OP Value
00001B42                          1060          
00001B42                          1061  PRINTA
00001B42  43F9 00002105           1062          LEA     MOVEA, A1
00001B48  103C 000E               1063          MOVE.B  #14, D0
00001B4C  4E4F                    1064          TRAP    #15
00001B4E  2403                    1065          MOVE.L  D3, D2
00001B50  4E75                    1066          RTS * Goes back to CHECK_MOVEA
00001B52                          1067          
00001B52                          1068          
00001B52                          1069  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
00001B52                          1070  *=================================================================
00001B52                          1071  *-----------EA-- Calculate EA used for Data Registers
00001B52                          1072  *----------Pre: D2, D0, D1 must be clear
00001B52                          1073  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
00001B52                          1074  EA:
00001B52  4280                    1075          CLR.L     D0  * Clear D0 and D1 so they don't conflict
00001B54  4281                    1076          CLR.L     D1
00001B56  4283                    1077          CLR.L     D3
00001B58  E18A                    1078          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001B5A  E18A                    1079          LSL.L   #8, D2
00001B5C  E98A                    1080          LSL.L   #4, D2
00001B5E  E08A                    1081          LSR.L   #8, D2
00001B60  E08A                    1082          LSR.L   #8, D2
00001B62  E88A                    1083          LSR.L   #4, D2 // 12 bits of opperand found
00001B64  1002                    1084          MOVE.B  D2, D0 Source Data Register
00001B66  EB08                    1085          LSL.B   #5, D0
00001B68  EA08                    1086          LSR.B   #5, D0
00001B6A  1202                    1087          MOVE.B  D2, D1 *Source Data Mode
00001B6C  E509                    1088          LSL.B   #2, D1
00001B6E  EA09                    1089          LSR.B   #5, D1
00001B70                          1090          
00001B70                          1091  *=================================================
00001B70                          1092  *-----------EA CHECKER------Continues from EA
00001B70                          1093  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001B70                          1094  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
00001B70                          1095  EACHECKER: 
00001B70  B23C 0000               1096          CMP.B   #%0000, D1
00001B74  6700 007E               1097          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001B78  B23C 0001               1098          CMP.B   #%0001, D1
00001B7C  6700 0096               1099          BEQ     JMPTO_SRC_ADDR_REG
00001B80  B23C 0002               1100          CMP.B   #%0010, D1
00001B84  6700 00AE               1101          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001B88  B23C 0003               1102          CMP.B   #%0011, D1
00001B8C  6700 00A6               1103          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001B90  B23C 0004               1104          CMP.B   #%0100, D1
00001B94  6700 009E               1105          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001B98  B23C 0007               1106          CMP.B   #%0111, D1
00001B9C  6700 0196               1107          BEQ     JMPTO_SRC_IMMEDIATE
00001BA0  4EF9 00001F70           1108          JMP     PRINTINVALIDEA
00001BA6                          1109          
00001BA6                          1110  *=================================================
00001BA6                          1111  *-----------DEST EA CHECKER------Continues from EA
00001BA6                          1112  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001BA6                          1113  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
00001BA6                          1114  DESTEACHECKER:
00001BA6  B23C 0000               1115          CMP.B   #%0000, D1
00001BAA  6700 0058               1116          BEQ     JMPTODestREG *JUMPS TO Source D registers
00001BAE  B23C 0001               1117          CMP.B   #%0001, D1
00001BB2  6700 0070               1118          BEQ     JMPTO_DEST_ADDR_REG
00001BB6  B23C 0002               1119          CMP.B   #%0010, D1
00001BBA  6700 00B4               1120          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001BBE  B23C 0003               1121          CMP.B   #%0011, D1
00001BC2  6700 00AC               1122          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001BC6  B23C 0004               1123          CMP.B   #%0100, D1
00001BCA  6700 00A4               1124          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001BCE  4EF9 00001F70           1125          JMP     PRINTINVALIDEA
00001BD4                          1126          
00001BD4                          1127  *=================================================      
00001BD4                          1128  * Dest EA Finder
00001BD4                          1129  * PRE: ONLY USED FOR MOVE
00001BD4                          1130  * POST: PRINTS DEST EA  
00001BD4                          1131  DestEAFinder:
00001BD4  4EB9 00001F62           1132          JSR     PRINTCOMMA  * Prints comma between two operrands
00001BDA  EC8A                    1133          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001BDC  4241                    1134          CLR     D1     * Clear D1 and D0 for opperand mode and register
00001BDE  4240                    1135          CLR     D0
00001BE0  1202                    1136          MOVE.B  D2, D1 * Prepare D1 for Mode
00001BE2  EB09                    1137          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001BE4  EA09                    1138          LSR.B   #5, D1
00001BE6  1002                    1139          MOVE.B  D2, D0  *Prepare D0 for Register
00001BE8  E508                    1140          LSL.B   #2, D0
00001BEA  EA08                    1141          LSR.B   #5, D0
00001BEC  4EB8 1BA6               1142          JSR     DESTEACHECKER
00001BF0  4EF8 10F2               1143          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00001BF4                          1144  
00001BF4                          1145          
00001BF4                          1146  *===================================================
00001BF4                          1147  *-------------Data Register checker------------------        
00001BF4                          1148  JMPTOSRCREG:
00001BF4  43F9 00001E16           1149          LEA     DATAREGTABLE, A1
00001BFA  C0FC 0006               1150          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001BFE  4EB1 0000               1151          JSR     (A1, D0) *JMP To index A1 + D0
00001C02                          1152          * EA CONTINUES HERE
00001C02  4E75                    1153          RTS * BRA DESTEAFINDER DELETED
00001C04                          1154  JMPToDestReg: *PRINT OUT DEST Registers
00001C04  43F9 00001E16           1155          LEA     DATAREGTABLE, A1
00001C0A  C0FC 0006               1156          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001C0E  4EB1 0000               1157          JSR     (A1, D0) *JMP to A1 + D0
00001C12  4E75                    1158          RTS    * Goes Back to DestEAFinder
00001C14                          1159          
00001C14                          1160  
00001C14                          1161  *===================================================
00001C14                          1162  *-------------Address Register checker------------------             
00001C14                          1163  JMPTO_SRC_ADDR_REG:
00001C14  43F9 00001E46           1164          LEA     AddrREGTABLE, A1
00001C1A  C0FC 0006               1165          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001C1E  4EB1 0000               1166          JSR     (A1, D0) *JMP To index A1 + D0
00001C22                          1167          * EA CONTINUES HERE
00001C22  4E75                    1168          RTS * BRA DESTEAFINDER DELETED
00001C24                          1169  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
00001C24  43F9 00001E46           1170          LEA     AddrREGTABLE, A1
00001C2A  C0FC 0006               1171          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001C2E  4EB1 0000               1172          JSR     (A1, D0) *JMP to A1 + D0
00001C32  4E75                    1173          RTS     * Goes Back to DESTEAFinder
00001C34                          1174          
00001C34                          1175  *===================================================
00001C34                          1176  *-------------Indirect Address Register checker------------------
00001C34                          1177  *Copied from Address Register checker, basically adding parenthesis () around Address register
00001C34                          1178  * Also Detects ()+ and -()
00001C34                          1179  * PRE: D1 stores mode, D0 stores register #
00001C34                          1180  * D1 to D5 are off limits
00001C34                          1181  JMPTO_SRC_INDR_ADDR_REG:
00001C34  1A00                    1182         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
00001C36  B23C 0004               1183         CMP.B    #%100, D1       * IF IT IS -()
00001C3A  6700 007E               1184         BEQ      PRE_DECREMENT_SRC
00001C3E  43F9 0000214B           1185         LEA      INDR_LEFT, A1
00001C44  103C 000E               1186         MOVE.B   #14, D0
00001C48  4E4F                    1187         TRAP     #15
00001C4A  1005                    1188         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001C4C  43F9 00001E46           1189         LEA     AddrREGTABLE, A1
00001C52  C0FC 0006               1190         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001C56  4EB1 0000               1191         JSR     (A1, D0) *JMP To index A1 + D0
00001C5A  43F9 0000214D           1192         LEA      INDR_RIGHT, A1
00001C60  103C 000E               1193         MOVE.B   #14, D0
00001C64  4E4F                    1194         TRAP     #15
00001C66  B23C 0003               1195         CMP.B    #%0011, D1 * IF IT IS ()+
00001C6A  6700 0040               1196         BEQ      POST_INCREMENT_SRC
00001C6E  4E75                    1197         RTS * BRA DESTEAFINDER DELETED
00001C70                          1198         
00001C70                          1199  JMPTO_DEST_INDR_ADDR_REG:
00001C70  1A00                    1200         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
00001C72  B23C 0004               1201         CMP.B    #%100, D1
00001C76  6700 0086               1202         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00001C7A  43F9 0000214B           1203         LEA      INDR_LEFT, A1
00001C80  103C 000E               1204         MOVE.B   #14, D0
00001C84  4E4F                    1205         TRAP     #15
00001C86  1003                    1206         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001C88  43F9 00001E46           1207         LEA     AddrREGTABLE, A1
00001C8E  C0FC 0006               1208         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001C92  4EB1 0000               1209         JSR     (A1, D0) *JMP To index A1 + D0
00001C96  43F9 0000214D           1210         LEA      INDR_RIGHT, A1
00001C9C  103C 000E               1211         MOVE.B   #14, D0
00001CA0  4E4F                    1212         TRAP     #15
00001CA2  B23C 0003               1213         CMP.B    #%0011, D1  // IF IT IS ()+
00001CA6  6700 0048               1214         BEQ      POST_INCREMENT_DEST
00001CAA  4E75                    1215         RTS      * Goes Back to DestEAFinder
00001CAC                          1216         
00001CAC                          1217  POST_INCREMENT_SRC:
00001CAC  43F9 0000214F           1218         LEA      POST_INCRE, A1
00001CB2  103C 000E               1219         MOVE.B   #14, D0
00001CB6  4E4F                    1220         TRAP     #15
00001CB8  4E75                    1221         RTS * BRA DESTEAFINDER DELETED
00001CBA                          1222         
00001CBA                          1223  PRE_DECREMENT_SRC:
00001CBA  43F9 00002151           1224         LEA      PRE_DECRE, A1
00001CC0  103C 000E               1225         MOVE.B   #14, D0
00001CC4  4E4F                    1226         TRAP     #15
00001CC6  43F9 0000214B           1227         LEA      INDR_LEFT, A1
00001CCC  103C 000E               1228         MOVE.B   #14, D0
00001CD0  4E4F                    1229         TRAP     #15
00001CD2  1005                    1230         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001CD4  43F9 00001E46           1231         LEA     AddrREGTABLE, A1
00001CDA  C0FC 0006               1232         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001CDE  4EB1 0000               1233         JSR     (A1, D0) *JMP To index A1 + D0
00001CE2  43F9 0000214D           1234         LEA      INDR_RIGHT, A1
00001CE8  103C 000E               1235         MOVE.B   #14, D0
00001CEC  4E4F                    1236         TRAP     #15
00001CEE  4E75                    1237         RTS * BRA DESTEAFINDER DELETED
00001CF0                          1238  
00001CF0                          1239  POST_INCREMENT_DEST
00001CF0  43F9 0000214F           1240         LEA      POST_INCRE, A1
00001CF6  103C 000E               1241         MOVE.B   #14, D0
00001CFA  4E4F                    1242         TRAP     #15
00001CFC  4E75                    1243         RTS      * Goes Back to DestEAFinder
00001CFE                          1244         
00001CFE                          1245  PRE_DECREMENT_DEST:
00001CFE  43F9 00002151           1246         LEA      PRE_DECRE, A1
00001D04  103C 000E               1247         MOVE.B   #14, D0
00001D08  4E4F                    1248         TRAP     #15
00001D0A  43F9 0000214B           1249         LEA      INDR_LEFT, A1
00001D10  103C 000E               1250         MOVE.B   #14, D0
00001D14  4E4F                    1251         TRAP     #15
00001D16  1005                    1252         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001D18  43F9 00001E46           1253         LEA     AddrREGTABLE, A1
00001D1E  C0FC 0006               1254         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001D22  4EB1 0000               1255         JSR     (A1, D0) *JMP To index A1 + D0
00001D26  43F9 0000214D           1256         LEA      INDR_RIGHT, A1
00001D2C  103C 000E               1257         MOVE.B   #14, D0
00001D30  4E4F                    1258         TRAP     #15
00001D32  4E75                    1259         RTS      * Goes Back to DestEAFinder
00001D34                          1260         
00001D34                          1261  JMPTO_SRC_IMMEDIATE:
00001D34  B03C 0000               1262         CMP.B    #%000, D0
00001D38  6700 002E               1263         BEQ      Address_W
00001D3C  B03C 0001               1264         CMP.B    #%001, D0
00001D40  6700 0044               1265         BEQ      Address_L
00001D44  B03C 0004               1266         CMP.B    #%100, D0
00001D48  6700 005A               1267         BEQ      Address_Immediate
00001D4C  4EF9 00001F70           1268         JMP      PRINTINVALIDEA
00001D52                          1269  *===================================  
00001D52                          1270  * Same as SRC but without Immediate address     
00001D52                          1271  JMPTO_DEST_IMMEDIATE:
00001D52  B03C 0000               1272         CMP.B    #%000, D0
00001D56  6700 0010               1273         BEQ      Address_W
00001D5A  B03C 0001               1274         CMP.B    #%001, D0
00001D5E  6700 0026               1275         BEQ      Address_L
00001D62  4EF9 00001F70           1276         JMP      PRINTINVALIDEA
00001D68                          1277         
00001D68                          1278  Address_W:
00001D68  43F9 00002153           1279          LEA     DOLLAR_SIGN, A1
00001D6E  103C 000E               1280          MOVE.B  #14, D0
00001D72  4E4F                    1281          TRAP    #15
00001D74  4241                    1282          CLR     D1
00001D76  4240                    1283          CLR     D0
00001D78  321E                    1284          MOVE.W  (A6)+, D1
00001D7A  143C 0010               1285          MOVE.B  #16, D2
00001D7E  103C 000F               1286          MOVE.B  #15, D0
00001D82  4E4F                    1287          TRAP    #15 
00001D84  4E75                    1288          RTS 
00001D86                          1289  
00001D86                          1290  Address_L
00001D86  43F9 00002153           1291          LEA     DOLLAR_SIGN, A1
00001D8C  103C 000E               1292          MOVE.B  #14, D0
00001D90  4E4F                    1293          TRAP    #15
00001D92  4241                    1294          CLR     D1
00001D94  4240                    1295          CLR     D0
00001D96  221E                    1296          MOVE.L  (A6)+, D1
00001D98  143C 0010               1297          MOVE.B  #16, D2
00001D9C  103C 000F               1298          MOVE.B  #15, D0
00001DA0  4E4F                    1299          TRAP    #15
00001DA2  4E75                    1300          RTS  
00001DA4                          1301          
00001DA4                          1302  Address_Immediate:
00001DA4  43F9 00002155           1303          LEA     POUND_SIGN, A1
00001DAA  103C 000E               1304          MOVE.B  #14, D0
00001DAE  4E4F                    1305          TRAP    #15
00001DB0  43F9 00002153           1306          LEA     DOLLAR_SIGN, A1
00001DB6  103C 000E               1307          MOVE.B  #14, D0
00001DBA  4E4F                    1308          TRAP    #15
00001DBC  0C39 0001 000021B2      1309          CMP.B   #%01, OpCodeSize *01 is used to mark invalid immediate for example ROR, ROL
00001DC4  6700 01AA               1310          BEQ     PRINTINVALIDEA
00001DC8  0C39 0000 000021B2      1311          CMP.B   #%00, OpCodeSize
00001DD0  6700 001A               1312          BEQ     Immediate_B
00001DD4  0C39 0003 000021B2      1313          CMP.B   #%11, OpCodeSize
00001DDC  6700 001C               1314          BEQ     Immediate_W
00001DE0  0C39 0002 000021B2      1315          CMP.B   #%10, OpCOdeSize
00001DE8  6700 001E               1316          BEQ     Immediate_L
00001DEC                          1317          
00001DEC                          1318  Immediate_B:
00001DEC  121E                    1319          MOVE.B  (A6)+, D1
00001DEE  143C 0010               1320          MOVE.B  #16, D2
00001DF2  103C 000F               1321          MOVE.B  #15, D0
00001DF6  4E4F                    1322          TRAP    #15
00001DF8  4E75                    1323          RTS
00001DFA                          1324          
00001DFA                          1325  Immediate_W:
00001DFA  321E                    1326          MOVE.W  (A6)+, D1
00001DFC  143C 0010               1327          MOVE.B  #16, D2
00001E00  103C 000F               1328          MOVE.B  #15, D0
00001E04  4E4F                    1329          TRAP    #15
00001E06  4E75                    1330          RTS
00001E08                          1331          
00001E08                          1332  Immediate_L:
00001E08  221E                    1333          MOVE.L  (A6)+, D1
00001E0A  143C 0010               1334          MOVE.B  #16, D2
00001E0E  103C 000F               1335          MOVE.B  #15, D0
00001E12  4E4F                    1336          TRAP    #15
00001E14  4E75                    1337          RTS
00001E16                          1338  
00001E16                          1339          
00001E16                          1340  
00001E16                          1341  *=================================================================
00001E16                          1342  *---------Data Register Table used for printing out Registers----
00001E16                          1343  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
00001E16                          1344  DataRegTable
00001E16  4EF9 00001E76           1345          JMP REG_D0
00001E1C  4EF9 00001E8A           1346          JMP REG_D1
00001E22  4EF9 00001E98           1347          JMP REG_D2
00001E28  4EF9 00001EA6           1348          JMP REG_D3
00001E2E  4EF9 00001EB4           1349          JMP REG_D4
00001E34  4EF9 00001EC2           1350          JMP REG_D5
00001E3A  4EF9 00001ED0           1351          JMP REG_D6
00001E40  4EF9 00001EDE           1352          JMP REG_D7
00001E46                          1353  
00001E46                          1354  AddrRegTable:
00001E46                          1355          
00001E46  4EF9 00001EEC           1356          JMP REG_A0
00001E4C  4EF9 00001F00           1357          JMP REG_A1
00001E52  4EF9 00001F0E           1358          JMP REG_A2
00001E58  4EF9 00001F1C           1359          JMP REG_A3
00001E5E  4EF9 00001F2A           1360          JMP REG_A4
00001E64  4EF9 00001F38           1361          JMP REG_A5
00001E6A  4EF9 00001F46           1362          JMP REG_A6
00001E70  4EF9 00001F54           1363          JMP REG_A7
00001E76                          1364  
00001E76                          1365  * Data Registers Printing        
00001E76                          1366  REG_D0:
00001E76  227C 00000000           1367          MOVEA.L #$0, A1
00001E7C  43F9 0000211B           1368          LEA     DREG0, A1
00001E82  103C 000E               1369          MOVE.B  #14, D0
00001E86  4E4F                    1370          TRAP    #15
00001E88  4E75                    1371          RTS
00001E8A                          1372          
00001E8A                          1373  REG_D1:
00001E8A  43F9 0000211E           1374          LEA     DREG1, A1
00001E90  103C 000E               1375          MOVE.B  #14, D0
00001E94  4E4F                    1376          TRAP    #15
00001E96  4E75                    1377          RTS
00001E98                          1378  REG_D2:
00001E98  43F9 00002121           1379          LEA     DREG2, A1
00001E9E  103C 000E               1380          MOVE.B  #14, D0
00001EA2  4E4F                    1381          TRAP    #15
00001EA4  4E75                    1382          RTS
00001EA6                          1383  REG_D3:
00001EA6  43F9 00002124           1384          LEA     DREG3, A1
00001EAC  103C 000E               1385          MOVE.B  #14, D0
00001EB0  4E4F                    1386          TRAP    #15
00001EB2  4E75                    1387          RTS
00001EB4                          1388  REG_D4:
00001EB4  43F9 00002127           1389          LEA     DREG4, A1
00001EBA  103C 000E               1390          MOVE.B  #14, D0
00001EBE  4E4F                    1391          TRAP    #15
00001EC0  4E75                    1392          RTS
00001EC2                          1393  REG_D5:
00001EC2  43F9 0000212A           1394          LEA     DREG5, A1
00001EC8  103C 000E               1395          MOVE.B  #14, D0
00001ECC  4E4F                    1396          TRAP    #15
00001ECE  4E75                    1397          RTS
00001ED0                          1398  REG_D6:
00001ED0  43F9 0000212D           1399          LEA     DREG6, A1
00001ED6  103C 000E               1400          MOVE.B  #14, D0
00001EDA  4E4F                    1401          TRAP    #15
00001EDC  4E75                    1402          RTS
00001EDE                          1403  REG_D7:
00001EDE  43F9 00002130           1404          LEA     DREG7, A1
00001EE4  103C 000E               1405          MOVE.B  #14, D0
00001EE8  4E4F                    1406          TRAP    #15
00001EEA  4E75                    1407          RTS
00001EEC                          1408          
00001EEC                          1409  *--------------------Addr Reigster printing ------------------------*        
00001EEC                          1410  REG_A0:
00001EEC  227C 00000000           1411          MOVEA.L #$0, A1
00001EF2  43F9 00002133           1412          LEA     AREG0, A1
00001EF8  103C 000E               1413          MOVE.B  #14, D0
00001EFC  4E4F                    1414          TRAP    #15
00001EFE  4E75                    1415          RTS
00001F00                          1416          
00001F00                          1417  REG_A1:
00001F00  43F9 00002136           1418          LEA     AREG1, A1
00001F06  103C 000E               1419          MOVE.B  #14, D0
00001F0A  4E4F                    1420          TRAP    #15
00001F0C  4E75                    1421          RTS
00001F0E                          1422  REG_A2:
00001F0E  43F9 00002139           1423          LEA     AREG2, A1
00001F14  103C 000E               1424          MOVE.B  #14, D0
00001F18  4E4F                    1425          TRAP    #15
00001F1A  4E75                    1426          RTS
00001F1C                          1427  REG_A3:
00001F1C  43F9 0000213C           1428          LEA     AREG3, A1
00001F22  103C 000E               1429          MOVE.B  #14, D0
00001F26  4E4F                    1430          TRAP    #15
00001F28  4E75                    1431          RTS
00001F2A                          1432  REG_A4:
00001F2A  43F9 0000213F           1433          LEA     AREG4, A1
00001F30  103C 000E               1434          MOVE.B  #14, D0
00001F34  4E4F                    1435          TRAP    #15
00001F36  4E75                    1436          RTS
00001F38                          1437  REG_A5:
00001F38  43F9 00002142           1438          LEA     AREG5, A1
00001F3E  103C 000E               1439          MOVE.B  #14, D0
00001F42  4E4F                    1440          TRAP    #15
00001F44  4E75                    1441          RTS
00001F46                          1442  REG_A6:
00001F46  43F9 00002145           1443          LEA     AREG6, A1
00001F4C  103C 000E               1444          MOVE.B  #14, D0
00001F50  4E4F                    1445          TRAP    #15
00001F52  4E75                    1446          RTS
00001F54                          1447  REG_A7:
00001F54  43F9 00002148           1448          LEA     AREG7, A1
00001F5A  103C 000E               1449          MOVE.B  #14, D0
00001F5E  4E4F                    1450          TRAP    #15
00001F60  4E75                    1451          RTS
00001F62                          1452          
00001F62                          1453  *====================================================PRinting/ ERROR method comes down here=========================================
00001F62                          1454  PRINTCOMMA: * Prints comma between two operrands
00001F62  43F9 000020D9           1455          LEA     COMMA, A1
00001F68  103C 000E               1456          MOVE.B  #14, D0
00001F6C  4E4F                    1457          TRAP    #15
00001F6E  4E75                    1458          RTS
00001F70                          1459          
00001F70                          1460  PrintInvalidEA:
00001F70  43F9 00002036           1461          LEA     Invalid_EA_Addr, A1
00001F76  103C 000E               1462          MOVE.B  #14, D0
00001F7A  4E4F                    1463          TRAP    #15
00001F7C  4EF8 10F2               1464          JMP     AddrLoop
00001F80                          1465          
00001F80                          1466  PrintInvalidSUB:
00001F80  43F9 0000204C           1467          LEA     Invalid_EA_SUB, A1
00001F86  103C 000E               1468          MOVE.B  #14, D0
00001F8A  4E4F                    1469          TRAP    #15
00001F8C  4EF8 10F2               1470          JMP     AddrLoop
00001F90                          1471          
00001F90                          1472  PrintInvalidAddress:
00001F90  43F9 0000206A           1473          LEA     Invalid_Address, A1
00001F96  103C 000E               1474          MOVE.B  #14, D0
00001F9A  4E4F                    1475          TRAP    #15
00001F9C  4EF8 1006               1476          JMP     GETINPUT
00001FA0                          1477          
00001FA0                          1478  PrintDATA:
00001FA0  43F9 00002107           1479          LEA     DATA, A1
00001FA6  103C 000E               1480          MOVE.B  #14, D0
00001FAA  4E4F                    1481          TRAP    #15
00001FAC  3202                    1482          MOVE.W  D2, D1
00001FAE  143C 0010               1483          MOVE.B  #16, D2
00001FB2  103C 000F               1484          MOVE.B  #15, D0
00001FB6  4E4F                    1485          TRAP    #15
00001FB8  6000 F138               1486          BRA     AddrLoop
00001FBC                          1487           
00001FBC                          1488  * Clear all registers    
00001FBC                          1489  CLRREG:
00001FBC  7000                    1490      MOVE.L  #0, D0
00001FBE  7200                    1491      MOVE.L  #0, D1
00001FC0  7400                    1492      MOVE.L  #0, D2
00001FC2  7600                    1493      MOVE.L  #0, D3
00001FC4  7800                    1494      MOVE.L  #0, D4
00001FC6  7A00                    1495      MOVE.L  #0, D5
00001FC8  7C00                    1496      MOVE.L  #0, D6
00001FCA  7E00                    1497      MOVE.L  #0, D7
00001FCC  4E75                    1498      RTS
00001FCE                          1499      
00001FCE                          1500  CLRAREG:
00001FCE  207C 00000000           1501      MOVE.L  #0, A0
00001FD4  227C 00000000           1502      MOVE.L  #0, A1
00001FDA  247C 00000000           1503      MOVE.L  #0, A2
00001FE0  267C 00000000           1504      MOVE.L  #0, A3
00001FE6  287C 00000000           1505      MOVE.L  #0, A4
00001FEC  2A7C 00000000           1506      MOVE.L  #0, A5
00001FF2  4E75                    1507      RTS
00001FF4                          1508  
00001FF4                          1509      
00001FF4                          1510      
00001FF4                          1511          
00001FF4                          1512  * Put program code here
00001FF4                          1513  
00001FF4  FFFF FFFF               1514      SIMHALT             ; halt simulator
00001FF8                          1515  
00001FF8                          1516  * Put variables and constants here
00001FF8  =0000000D               1517  CR  EQU $0D
00001FF8  =0000000A               1518  LF  EQU $0A
00001FF8= 50 6C 65 61 73 65 ...   1519  WELCOME     DC.B    'Please enter starting address', CR, LF, 0
00002018= 50 6C 65 61 73 65 ...   1520  WELCOME2    DC.B    'Please enter ending address', CR, LF, 0
00002036= 49 6E 76 61 6C 69 ...   1521  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
0000204C= 49 6E 76 61 6C 69 ...   1522  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
0000206A= 47 69 76 65 6E 20 ...   1523  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00002085= 43 6F 6E 74 69 6E ...   1524  Continue_Program    DC.B    'Continue Program? Y/N', CR, LF, 0
0000209D= 43 6F 6E 74 69 6E ...   1525  Continue_Screen DC.B    'Continue Screen? Y/N', CR, LF, 0
000020B4= 0D 0A 00                1526  Print_NextLine  DC.B    '', CR, LF, 0
000020B7= 54 68 61 6E 6B 20 ...   1527  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
000020D9                          1528  
000020D9= 2C 20 00                1529  COMMA       DC.B    ', ', 0
000020DC= 20 20 20 00             1530  SPACER      DC.B    '   ', 0
000020E0                          1531  *DATASIZE
000020E0= 2E 42 20 00             1532  SIZE_BYTE       DC.B    '.B ', 0
000020E4= 2E 57 20 00             1533  SIZE_WORD       DC.B    '.W ', 0
000020E8= 2E 4C 20 00             1534  SIZE_LONG       DC.B    '.L ', 0
000020EC                          1535  
000020EC                          1536  *MOVE OPCODES
000020EC= 4D 4F 56 45 00          1537  MOVE_PRINT  DC.B    'MOVE', 0
000020F1= 4D 4F 56 45 2E 42 ...   1538  MOVEB       DC.B    'MOVE.B ', 0
000020F9= 2E 42 20 00             1539  SIZE_B       DC.B    '.B ', 0
000020FD= 2E 57 20 00             1540  MOVEW       DC.B    '.W ', 0
00002101= 2E 4C 20 00             1541  MOVEL       DC.B    '.L ', 0
00002105= 41 00                   1542  MOVEA       DC.B    'A', 0
00002107= 44 41 54 41 3A 20 00    1543  DATA        DC.B    'DATA: ', 0
0000210E= 4D 4F 56 45 51 00       1544  MOVEQ       DC.B    'MOVEQ', 0
00002114= 4D 4F 56 45 4D 00       1545  MOVEM       DC.B    'MOVEM', 0
0000211A= 01                      1546  MOVEM_DR    DC.B    1
0000211B                          1547  
0000211B                          1548  
0000211B                          1549  *DATA REGISTERS PRINTOUT
0000211B= 44 30 00                1550  DREG0       DC.B    'D0', 0
0000211E= 44 31 00                1551  DREG1       DC.B    'D1', 0
00002121= 44 32 00                1552  DREG2       DC.B    'D2', 0
00002124= 44 33 00                1553  DREG3       DC.B    'D3', 0
00002127= 44 34 00                1554  DREG4       DC.B    'D4', 0
0000212A= 44 35 00                1555  DREG5       DC.B    'D5', 0
0000212D= 44 36 00                1556  DREG6       DC.B    'D6', 0
00002130= 44 37 00                1557  DREG7       DC.B    'D7', 0 
00002133                          1558  
00002133                          1559  *ADDR REGISTERS PRINTOUT
00002133= 41 30 00                1560  AREG0       DC.B    'A0', 0
00002136= 41 31 00                1561  AREG1       DC.B    'A1', 0
00002139= 41 32 00                1562  AREG2       DC.B    'A2', 0
0000213C= 41 33 00                1563  AREG3       DC.B    'A3', 0
0000213F= 41 34 00                1564  AREG4       DC.B    'A4', 0
00002142= 41 35 00                1565  AREG5       DC.B    'A5', 0
00002145= 41 36 00                1566  AREG6       DC.B    'A6', 0
00002148= 41 37 00                1567  AREG7       DC.B    'A7', 0 
0000214B                          1568  
0000214B                          1569  *INDR_ADDR REGISTERS PRINTOUT
0000214B= 28 00                   1570  INDR_LEFT   DC.B    '(', 0
0000214D= 29 00                   1571  INDR_RIGHT  DC.B    ')', 0
0000214F= 2B 00                   1572  POST_INCRE   DC.B    '+', 0
00002151= 2D 00                   1573  PRE_DECRE   DC.B    '-', 0
00002153= 24 00                   1574  DOLLAR_SIGN DC.B    '$', 0
00002155= 23 00                   1575  POUND_SIGN  DC.B    '#', 0
00002157                          1576  
00002157                          1577  *SUB
00002157= 53 55 42 00             1578  SUBTRACT    DC.B    'SUB', 0
0000215B= 41 44 44 00             1579  ADDITION    DC.B    'ADD', 0
0000215F= 41 4E 44 00             1580  AND         DC.B    'AND', 0
00002163= 4F 52 00                1581  OR          DC.B    'OR', 0
00002166= 4E 4F 54 00             1582  NOT_OP      DC.B    'NOT', 0
0000216A= 52 4F 4C 00             1583  ROL         DC.B    'ROL', 0
0000216E= 52 4F 52 00             1584  ROR         DC.B    'ROR', 0
00002172= 4C 53 4C 00             1585  LSL         DC.B    'LSL', 0
00002176= 4C 53 52 00             1586  LSR         DC.B    'LSR', 0
0000217A= 41 53 4C 00             1587  ASL         DC.B    'ASL', 0
0000217E= 41 53 52 00             1588  ASR         DC.B    'ASR', 0
00002182= 4E 4F 50 00             1589  NOP         DC.B    'NOP', 0
00002186= 4A 53 52 00             1590  JSR         DC.B    'JSR', 0
0000218A= 52 54 53 00             1591  RTS         DC.B    'RTS', 0
0000218E= 4C 45 41 00             1592  LEA         DC.B    'LEA', 0
00002192= 42 47 54 00             1593  BGT         DC.B    'BGT', 0
00002196= 42 4C 45 00             1594  BLE         DC.B    'BLE', 0
0000219A= 42 45 51 00             1595  BEQ         DC.B    'BEQ', 0
0000219E= 42 52 41 00             1596  BRA         DC.B    'BRA', 0
000021A2                          1597  
000021A2                          1598  
000021A2= 00000001                1599  addrStart   DC.L    1   // Starting address
000021A6= 00000001                1600  addrEnd     DC.L    1   // ending address
000021AA= 00000001                1601  OpCodeStorage DC.L    1
000021AE= 00000001                1602  ScreenCounter   DC.L    1
000021B2= 00000001                1603  OpCodeSize  DC.L    1
000021B6                          1604      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   11E2
ADDITION            215B
ADDREND             21A6
ADDRESS_IMMEDIATE   1DA4
ADDRESS_L           1D86
ADDRESS_W           1D68
ADDRLOOP            10F2
ADDRREGTABLE        1E46
ADDRSTART           21A2
ADDVAL              11DC
AND                 215F
AREG0               2133
AREG1               2136
AREG2               2139
AREG3               213C
AREG4               213F
AREG5               2142
AREG6               2145
AREG7               2148
ASL                 217A
ASR                 217E
B                   11E8
BEQ                 219A
BGT                 2192
BLE                 2196
BRA                 219E
BRA_LONG            1658
BRA_WORD            1626
C                   11EE
CHAR                11AC
CHECKRANGE          1086
CHECK_CONT          112C
CHECK_MOVEA         1B20
CLRAREG             1FCE
CLRREG              1FBC
COMMA               20D9
CONTINUE_PROGRAM    2085
CONTINUE_SCREEN     209D
CONVERT             1192
CR                  D
D                   11F4
DATA                2107
DATAREGTABLE        1E16
DESTEACHECKER       1BA6
DESTEAFINDER        1BD4
DOLLAR_SIGN         2153
DREG0               211B
DREG1               211E
DREG2               2121
DREG3               2124
DREG4               2127
DREG5               212A
DREG6               212D
DREG7               2130
E                   11FA
EA                  1B52
EACHECKER           1B70
END                 10E0
F                   1200
GETINPUT            1006
IMMEDIATE_B         1DEC
IMMEDIATE_L         1E08
IMMEDIATE_W         1DFA
INDR_LEFT           214B
INDR_RIGHT          214D
INVALID_ADDRESS     206A
INVALID_EA_ADDR     2036
INVALID_EA_SUB      204C
JMPTABLE            1252
JMPTODESTREG        1C04
JMPTOSRCREG         1BF4
JMPTO_DEST_ADDR_REG  1C24
JMPTO_DEST_IMMEDIATE  1D52
JMPTO_DEST_INDR_ADDR_REG  1C70
JMPTO_SRC_ADDR_REG  1C14
JMPTO_SRC_IMMEDIATE  1D34
JMPTO_SRC_INDR_ADDR_REG  1C34
JSR                 2186
JSR_DATA            1430
LEA                 218E
LEA_DATA            1470
LF                  A
LOOP                1188
LOWERLIMIT          3000
LSL                 2172
LSR                 2176
MEMORY_ALTERABLE_CHECK  1AA8
MOVEA               2105
MOVEB               20F1
MOVEL               2101
MOVEM               2114
MOVEM_DATAREGISTER  14CC
MOVEM_DR            211A
MOVEM_JSR           134C
MOVEM_MEM_REG       14CC
MOVEM_REG_LIST      14CC
MOVEM_REG_MEM       14CC
MOVEM_SIZE          14CC
MOVEM_SRC           14CC
MOVEQ               210E
MOVEQ_DATA          16B6
MOVEQ_REG           16C0
MOVEW               20FD
MOVE_PRINT          20EC
NEXT_SCREEN         1156
NOP                 2182
NOT_JMPTABLE        1392
NOT_OP              2166
NOT_SIZE00          13AA
NOT_SIZE01          13CC
NOT_SIZE10          13E6
NOT_SIZE11          1400
OP0000              12AC
OP0001              12AC
OP0010              12CA
OP0011              12FA
OP0100              1322
OP0101              14CC
OP0110              14CC
OP0111              168A
OP1000              175A
OP1001              171E
OP1010              179E
OP1011              179E
OP1100              179E
OP1101              17DA
OP1110              1816
OPCODE              1206
OPCODESIZE          21B2
OPCODESTORAGE       21AA
OPMODE000           19C6
OPMODE001           19E0
OPMODE010           19F2
OPMODE011           1A04
OPMODE100           1A32
OPMODE101           1A4A
OPMODE110           1A62
OPMODE111           1A7A
OP_BEQ              15DA
OP_BGT              1542
OP_BLE              158E
OP_BRA              14F6
OP_JSR              1404
OP_LEA              1444
OP_MOVEM            1492
OP_NOP              16CE
OP_NOT              1360
OP_RTS              16F6
OR                  2163
POST_INCRE          214F
POST_INCREMENT_DEST  1CF0
POST_INCREMENT_SRC  1CAC
POUND_SIGN          2155
PRE_DECRE           2151
PRE_DECREMENT_DEST  1CFE
PRE_DECREMENT_SRC   1CBA
PRINT8              1986
PRINTA              1B42
PRINTCOMMA          1F62
PRINTDATA           1FA0
PRINTINVALIDADDRESS  1F90
PRINTINVALIDEA      1F70
PRINTINVALIDSUB     1F80
PRINT_NEXTLINE      20B4
REG_A0              1EEC
REG_A1              1F00
REG_A2              1F0E
REG_A3              1F1C
REG_A4              1F2A
REG_A5              1F38
REG_A6              1F46
REG_A7              1F54
REG_D0              1E76
REG_D1              1E8A
REG_D2              1E98
REG_D3              1EA6
REG_D4              1EB4
REG_D5              1EC2
REG_D6              1ED0
REG_D7              1EDE
ROL                 216A
ROLTEST             6000
ROR                 216E
ROTATETABLE         184E
ROTATE_B            189E
ROTATE_EA           18F2
ROTATE_EACHECKER    1910
ROTATE_L            18D6
ROTATE_LEFT         186C
ROTATE_PRINT_IMMEDIATE  1950
ROTATE_PRINT_IMMEDIATECONT  1970
ROTATE_PRINT_REGISTER  1936
ROTATE_RIGHT        185A
ROTATE_SIZE_TABLE   187E
ROTATE_W            18BA
RTS                 218A
SCREENCOUNTER       21AE
SIZE_B              20F9
SIZE_BYTE           20E0
SIZE_LONG           20E8
SIZE_WORD           20E4
SPACER              20DC
SPECIALTEST         5000
SPECIAL_OPMODE_USED  1A14
SPECIAL_OPMODE_USED2  1A8A
START               1000
SUBTABLE            1996
SUBTRACT            2157
SUB_OPMODE_ADDA     1AFE
SUB_OPMODE_FIRST    1ABA
SUB_OPMODE_SECOND   1AD8
TESTER              9000
TY_MESSAGE          20B7
UPPERLIMIT          FFFFFE
WELCOME             1FF8
WELCOME2            2018
YESNOSTORAGE        50
