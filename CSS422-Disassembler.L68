00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/9/2020 7:40:57 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00006000                            12      ORG    $6000
00006000                            13  TESTER:
00006000  223C 00001234             14          MOVE.L      #$1234, D1
00006006  1200                      15          MOVE.B      D0, D1
00006008                            16  
00001000                            17      ORG    $1000
00001000                            18  *=================================================================
00001000                            19  *                     THIS IS OUR MAIN METHOD
00001000                            20  *               Don't throw random stuff in it, keep it to a minimum
00001000                            21  
00001000                            22  START:                  ; first instruction of program
00001000  4EB9 00001006             23          JSR     GETINPUT
00001006                            24  *=================================================================
00001006                            25  *---------------Get starting and ending addresss------- Kelvin
00001006                            26  *--------------- PRE: will be using D0, D5, A1
00001006                            27  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            28  GETINPUT:
00001006  4EB9 00001A0A             29          JSR     CLRREG    *clean registers to restart program
0000100C  43F9 00001A1E             30          LEA     WELCOME, A1
00001012  103C 000E                 31          MOVE.B  #14,    D0
00001016  4E4F                      32          TRAP    #15
00001018  327C 0000                 33          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000101C  103C 0002                 34          MOVE.B  #2,D0
00001020  4E4F                      35          TRAP    #15
00001022  2801                      36          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001024  7000                      37          MOVE.L  #$0, d0  // intitiate counter
00001026  4EB9 00001102             38          JSR     LOOP    // Convert starting address into hex
0000102C  23C5 00001B66             39          MOVE.L  D5, addrStart
00001032  43F9 00001A3E             40          LEA     WELCOME2, A1
00001038  103C 000E                 41          MOVE.B  #14,    D0
0000103C  4E4F                      42          TRAP    #15
0000103E  327C 0000                 43          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001042  103C 0002                 44          MOVE.B  #2,D0
00001046  4E4F                      45          TRAP    #15
00001048  4245                      46          CLR     D5       // Clear D5 for exit address
0000104A  1801                      47          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 48          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001102             49          JSR     LOOP    // Convert Ending address int Hex
00001056  23C5 00001B6A             50          MOVE.L  D5, addrEnd
0000105C  4EB9 00001076             51          JSR     CheckRange
00001062                            52          *MOVE.W  #$4655, $6000 // MOVE.L D0, D1, used for testing only
00001062                            53          *LEA     $6000, A6 //testing
00001062  2039 00001B66             54          MOVE.L  addrStart, D0
00001068  2C40                      55          MOVEA.L D0, A6
0000106A  4EB9 00001180             56          JSR     OPCODE
00001070  4EF9 000010B4             57          JMP     END
00001076                            58  
00001076                            59  *==================================================================
00001076                            60  *-----------------Check if the range is above or under the limit
00001076                            61  *------------------Pre: addrStart and addrEnd has begin and end values
00001076                            62          
00001076                            63  CheckRange:
00001076  2C79 00001B66             64          MOVE.L  AddrStart, A6
0000107C  203C 00003000             65          MOVE.L  #LowerLimit, D0
00001082  B08E                      66          CMP.L   A6, D0
00001084  6E00 0974                 67          BGT     PRINTINVALIDADDRESS
00001088  203C 00FFFFFE             68          MOVE.L  #UpperLimit, D0
0000108E  B08E                      69          CMP.L   A6, D0
00001090  6D00 0968                 70          BLT     PRINTINVALIDADDRESS
00001094  2C79 00001B6A             71          MOVE.L  AddrEnd, A6
0000109A  203C 00003000             72          MOVE.L  #LowerLimit, D0
000010A0  B08E                      73          CMP.L   A6, D0
000010A2  6E00 0956                 74          BGT     PRINTINVALIDADDRESS
000010A6  203C 00FFFFFE             75          MOVE.L  #UpperLimit, D0
000010AC  B08E                      76          CMP.L   A6, D0
000010AE  6D00 094A                 77          BLT     PRINTINVALIDADDRESS
000010B2  4E75                      78          RTS
000010B4                            79  
000010B4                            80  END:
000010B4  43F9 00001AC6             81          LEA     TY_Message, A1
000010BA  103C 000E                 82          MOVE.B  #14, D0
000010BE  4E4F                      83          TRAP    #15
000010C0  103C 0009                 84          MOVE.B  #9, D0
000010C4  4E4F                      85          TRAP    #15
000010C6                            86          
000010C6                            87  *Please start from here Annabelle
000010C6                            88  AddrLoop:
000010C6  43F9 00001AC3             89          LEA     PRINT_NEXTLINE, A1
000010CC  103C 000E                 90          MOVE.B  #14, D0
000010D0  4E4F                      91          TRAP    #15
000010D2  2E79 00001B6A             92          MOVE.L  addrEnd, A7
000010D8  BECE                      93          CMP.W   A6, A7
000010DA  6FD8                      94          BLE     END
000010DC  6000 00A2                 95          BRA     OPCODE
000010E0                            96          
000010E0                            97  *===========Check if user wants to continue
000010E0                            98  CHECK_CONT:
000010E0  43F9 00001AAB             99          LEA     Continue_Program, A1
000010E6  103C 000E                100          MOVE.B  #14, D0
000010EA  4E4F                     101          TRAP    #15
000010EC  43F8 0050                102          LEA     YesNoStorage, A1
000010F0  103C 0002                103          MOVE.B  #2, D0
000010F4  4E4F                     104          TRAP    #15
000010F6  0C11 0059                105          CMP.B   #$59, (A1) * Yes
000010FA  6700 FF0A                106          BEQ     GETINPUT
000010FE  4EF8 10B4                107          JMP     END
00001102                           108  LOOP
00001102                           109  
00001102  B880                     110          CMP.L   D0, D4  // Loop until length of word reached
00001104  6E00 0006                111          BGT     CONVERT
00001108  5480                     112          ADD.L   #$2, D0 
0000110A  4E75                     113          RTS 
0000110C                           114  
0000110C                           115  *=================================================================
0000110C                           116  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000110C                           117  *PRE      D4 must contain input length, d0 must be 0
0000110C                           118  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000110C                           119  CONVERT:
0000110C  5280                     120          ADDQ.L  #$1, D0 // increment counter
0000110E  1211                     121          move.b  (A1),D1    // Get next bit from Input
00001110  5289                     122          adda.L  #1, A1      // Increment Input
00001112  0401 0030                123          sub.b   #$30,D1     //
00001116  B23C 0010                124          cmp.b   #$10,D1   // Check if value is larger than 10
0000111A  6E00 000A                125          bgt     CHAR      // Find Hex
0000111E  1401                     126          move.b  D1, D2    // IF it is less than 10
00001120  4EF9 00001156            127          JMP     ADDVAL        
00001126                           128  CHAR:
00001126  B23C 0011                129          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
0000112A  6700 0030                130          BEQ     A
0000112E  B23C 0012                131          CMP.B   #$12, D1
00001132  6700 002E                132          BEQ     B
00001136  B23C 0013                133          CMP.B   #$13, D1
0000113A  6700 002C                134          BEQ     C
0000113E  B23C 0014                135          CMP.B   #$14, D1
00001142  6700 002A                136          BEQ     D
00001146  B23C 0015                137          CMP.B   #$15, D1
0000114A  6700 0028                138          BEQ     E
0000114E  B23C 0016                139          CMP.B   #$16, D1
00001152  6700 0026                140          BEQ     F
00001156                           141  
00001156                           142  ADDVAL:
00001156  E98D                     143          lsl.l    #$4, D5 // Shift based on position
00001158  DA82                     144          add.l    D2, D5 //Add value into Input
0000115A  60A6                     145          BRA      LOOP
0000115C                           146      
0000115C                           147  A:
0000115C  740A                     148          MOVE.L  #$A, D2 
0000115E  4EF8 1156                149          jmp ADDVAL
00001162                           150  B:
00001162  740B                     151          MOVE.L  #$B, D2
00001164  4EF8 1156                152          jmp ADDVAL
00001168                           153  C:
00001168  740C                     154          MOVE.L  #$C, D2
0000116A  4EF8 1156                155          jmp ADDVAL
0000116E                           156  D:
0000116E  740D                     157          MOVE.L  #$D, D2
00001170  4EF8 1156                158          jmp ADDVAL
00001174                           159  E:
00001174  740E                     160          MOVE.L  #$E, D2
00001176  4EF8 1156                161          jmp ADDVAL
0000117A                           162  F:
0000117A  740F                     163          MOVE.L  #$F, D2
0000117C  4EF8 1156                164          jmp ADDVAL
00001180                           165          
00001180                           166  *=======================================================================
00001180                           167  *---------Find the first 4 of instruction and determines the instruction
00001180                           168  OPCODE:
00001180  4240                     169          CLR     D0
00001182  4241                     170          CLR     D1
00001184  4242                     171          CLR     D2
00001186  320E                     172          MOVE.W  A6, D1  * PRINT ADDRESS PER LINE
00001188  143C 0010                173          MOVE.B  #16, D2
0000118C  103C 000F                174          MOVE.B  #15, D0
00001190  4E4F                     175          TRAP    #15
00001192  227C 00000000            176          MOVE.L  #$00000000, A1
00001198  43F9 00001AEB            177          LEA     SPACER, A1
0000119E  103C 000E                178          MOVE.B  #14, D0
000011A2  4E4F                     179          TRAP    #15
000011A4  4240                     180          CLR     D0
000011A6  4241                     181          CLR     D1
000011A8  4242                     182          CLR     D2
000011AA  321E                     183          MOVE.W  (A6)+,D1
000011AC  2401                     184          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
000011AE  E849                     185          LSR.W   #4, D1
000011B0  E849                     186          LSR.W   #4, D1
000011B2  E849                     187          LSR.W   #4, D1  //Right Shift 3 times
000011B4  1001                     188          MOVE.B  D1, D0  // OPCODE FOUND
000011B6  C0FC 0006                189          MULU    #6, D0
000011BA  11C0 1180                190          MOVE.B  D0, OpCode
000011BE  45F9 000011C8            191          LEA     JMPTABLE, A2
000011C4  4EF2 0000                192          JMP     (A2, D0)
000011C8                           193          
000011C8                           194  *========================================================================
000011C8                           195  *--------Jump table used for different opcode!!! Please orgainze well using decimal
000011C8                           196  *------- Add your instructions here
000011C8                           197  JMPTABLE
000011C8  4EF9 0000121C            198          JMP     OP0000
000011CE  4EF9 0000121C            199          JMP     OP0001 *MOVEB
000011D4  4EF9 0000123A            200          JMP     OP0010 *MOVEL
000011DA  4EF9 00001262            201          JMP     OP0011 *MOVEW
000011E0  4EF9 0000128A            202          JMP     OP0100 *NOT
000011E6  4EF9 0000132E            203          JMP     OP0101
000011EC  4EF9 0000132E            204          JMP     OP0110
000011F2  4EF9 0000132E            205          JMP     OP0111
000011F8  4EF9 0000136A            206          JMP     OP1000 *OR
000011FE  4EF9 0000132E            207          JMP     OP1001 *SUB
00001204  4EF9 000013AE            208          JMP     OP1010
0000120A  4EF9 000013AE            209          JMP     OP1011
00001210  4EF9 000013AE            210          JMP     OP1100 *AND
00001216  4EF9 000013EA            211          JMP     OP1101 *ADD
0000121C                           212  
0000121C                           213  *=====================================================================    
0000121C                           214  *--------------D2 must contain Entire opcode for everything below
0000121C                           215  OP0000:
0000121C                           216  *-> MOVE.B
0000121C                           217  OP0001:
0000121C  13FC 0000 00001B72       218          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001224  43F9 00001B00            219          LEA     MOVEB, A1
0000122A  103C 000E                220          MOVE.B  #14, D0
0000122E  4E4F                     221          TRAP    #15
00001230  4EB9 000015E2            222          JSR     EA * Find SRC EA
00001236  6000 042C                223          BRA     DESTEAFINDER * FIND DEST EA
0000123A                           224  * -> MOVE.L
0000123A                           225  * Printed using MOVEL String as a variable on the very bottom
0000123A                           226  OP0010:
0000123A  43F9 00001AFB            227          LEA     MOVE_PRINT, A1
00001240  103C 000E                228          MOVE.B  #14, D0
00001244  4E4F                     229          TRAP    #15
00001246  4EB9 000015B0            230          JSR     CHECK_MOVEA
0000124C  43F9 00001B10            231          LEA     MOVEL, A1
00001252  103C 000E                232          MOVE.B  #14, D0
00001256  4E4F                     233          TRAP    #15
00001258  4EB9 000015E2            234          JSR     EA *Find SRC EA
0000125E  6000 0404                235          BRA     DESTEAFINDER *FIND DEST EA
00001262                           236  * -> MOVE.W
00001262                           237  OP0011:
00001262  43F9 00001AFB            238          LEA     MOVE_PRINT, A1
00001268  103C 000E                239          MOVE.B  #14, D0
0000126C  4E4F                     240          TRAP    #15
0000126E  4EB9 000015B0            241          JSR     CHECK_MOVEA
00001274  43F9 00001B0C            242          LEA     MOVEW, A1
0000127A  103C 000E                243          MOVE.B  #14, D0
0000127E  4E4F                     244          TRAP    #15
00001280  4EB9 000015E2            245          JSR     EA * FIND SRC EA
00001286  6000 03DC                246          BRA     DESTEAFINDER *FIND DEST EA
0000128A                           247          
0000128A                           248  *-> NOT
0000128A                           249  OP0100:
0000128A  43F9 00001B61            250          LEA     NOT_OP, A1
00001290  103C 000E                251          MOVE.B  #14, D0
00001294  4E4F                     252          TRAP    #15
00001296  E14A                     253          LSL.W   #8, D2
00001298  1602                     254          MOVE.B  D2, D3 * D3 = SIZE OF INSTRUCTION
0000129A  E04B                     255          LSR.W   #8, D3
0000129C  EC4B                     256          LSR.W   #6, D3
0000129E  3202                     257          MOVE.W  D2, D1 * D1 = EA OPMODE
000012A0  E549                     258          LSL.W   #2, D1
000012A2  E049                     259          LSR.W   #8, D1
000012A4  EA49                     260          LSR.W   #5, D1
000012A6  3002                     261          MOVE.W  D2, D0 * D0 = EA REGISTER
000012A8  EB48                     262          LSL.W   #5, D0
000012AA  E048                     263          LSR.W   #8, D0
000012AC  EA48                     264          LSR.W   #5, D0
000012AE  C6FC 0006                265          MULU    #6, D3 * Multiply for JMPTABLE
000012B2  45F9 000012BC            266          LEA     NOT_JMPTable, A2
000012B8  4EB2 3000                267          JSR     (A2, D3)
000012BC                           268          
000012BC                           269  NOT_JMPTable
000012BC  4EF9 000012D4            270          JMP     NOT_SIZE00
000012C2  4EF9 000012F6            271          JMP     NOT_SIZE01
000012C8  4EF9 00001310            272          JMP     NOT_SIZE10
000012CE  4EF9 0000132A            273          JMP     NOT_SIZE11
000012D4                           274  
000012D4                           275  NOT_SIZE00:
000012D4  13FC 0000 00001B72       276          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012DC  1A00                     277          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
000012DE  43F9 00001B08            278          LEA     SIZE_B, A1
000012E4  103C 000E                279          MOVE.B  #14, D0
000012E8  4E4F                     280          TRAP    #15
000012EA  1005                     281          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000012EC  4EB9 00001600            282          JSR     EACHECKER
000012F2  6000 FDD2                283          BRA     AddrLoop
000012F6                           284  NOT_SIZE01:
000012F6  1A00                     285          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
000012F8  43F9 00001B08            286          LEA     SIZE_B, A1
000012FE  103C 000E                287          MOVE.B  #14, D0
00001302  4E4F                     288          TRAP    #15
00001304  1005                     289          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001306  4EB9 00001600            290          JSR     EACHECKER
0000130C  6000 FDB8                291          BRA     AddrLoop
00001310                           292  NOT_SIZE10:
00001310  1A00                     293          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001312  43F9 00001B08            294          LEA     SIZE_B, A1
00001318  103C 000E                295          MOVE.B  #14, D0
0000131C  4E4F                     296          TRAP    #15
0000131E  1005                     297          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001320  4EB9 00001600            298          JSR     EACHECKER
00001326  6000 FD9E                299          BRA     AddrLoop
0000132A                           300  NOT_SIZE11:
0000132A  6000 06AE                301          BRA     PRINTINVALIDEA
0000132E                           302  
0000132E                           303              
0000132E                           304  OP0101:
0000132E                           305          
0000132E                           306  OP0110:
0000132E                           307  OP0111:
0000132E                           308          
0000132E                           309  
0000132E                           310  
0000132E                           311  
0000132E                           312  * -> SUB
0000132E                           313  * Splitting Sub into OPMODE and Register value
0000132E                           314  OP1001:
0000132E  43F9 00001B52            315          LEA     SUBTRACT, A1
00001334  103C 000E                316          MOVE.B  #14, D0
00001338  4E4F                     317          TRAP    #15
0000133A  E94A                     318          LSL.W   #4, D2
0000133C  3602                     319          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000133E  E04B                     320          LSR.W   #8, D3 * D3 = D register
00001340  EA4B                     321          LSR.W   #5, D3
00001342  3802                     322          MOVE.W  D2, D4 *D4 = SubOPMODE
00001344  E74C                     323          LSL.W   #3, D4
00001346  E04C                     324          LSR.W   #8, D4
00001348  EA4C                     325          LSR.W   #5, D4
0000134A  3202                     326          MOVE.W  D2, D1 * D1 = EA Mode
0000134C  ED49                     327          LSL.W   #6, D1
0000134E  E049                     328          LSR.W   #8, D1
00001350  EA49                     329          LSR.W   #5, D1
00001352  3002                     330          MOVE.W  D2, D0 * D0 = EA register
00001354  E148                     331          LSL.W   #8, D0
00001356  E348                     332          LSL.W   #1, D0
00001358  E048                     333          LSR.W   #8, D0
0000135A  EA48                     334          LSR.W   #5, D0
0000135C  45F9 00001426            335          LEA     SubTable, A2
00001362  C8FC 0006                336          MULU    #6, D4
00001366  4EB2 4000                337          JSR     (A2, D4)
0000136A                           338  * -> OR
0000136A                           339  * Splitting AND into OPMODE and Register value       
0000136A                           340  OP1000:
0000136A  43F9 00001B5E            341          LEA     OR, A1
00001370  103C 000E                342          MOVE.B  #14, D0
00001374  4E4F                     343          TRAP    #15
00001376  E94A                     344          LSL.W   #4, D2
00001378  3602                     345          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000137A  E04B                     346          LSR.W   #8, D3 * D3 = D register
0000137C  EA4B                     347          LSR.W   #5, D3
0000137E  3802                     348          MOVE.W  D2, D4 *D4 = SubOPMODE
00001380  E74C                     349          LSL.W   #3, D4
00001382  E04C                     350          LSR.W   #8, D4
00001384  EA4C                     351          LSR.W   #5, D4
00001386  3202                     352          MOVE.W  D2, D1 * D1 = EA Mode
00001388  ED49                     353          LSL.W   #6, D1
0000138A  E049                     354          LSR.W   #8, D1
0000138C  EA49                     355          LSR.W   #5, D1
0000138E  B23C 0001                356          CMP.B   #%0001, D1
00001392  6700 0646                357          BEQ     PRINTINVALIDEA
00001396  3002                     358          MOVE.W  D2, D0 * D0 = EA register
00001398  E148                     359          LSL.W   #8, D0
0000139A  E348                     360          LSL.W   #1, D0
0000139C  E048                     361          LSR.W   #8, D0
0000139E  EA48                     362          LSR.W   #5, D0
000013A0  45F9 00001426            363          LEA     SubTable, A2
000013A6  C8FC 0006                364          MULU    #6, D4
000013AA  4EB2 4000                365          JSR     (A2, D4)
000013AE                           366  OP1010
000013AE                           367  OP1011
000013AE                           368  * -> AND
000013AE                           369  * Splitting AND into OPMODE and Register value
000013AE                           370  OP1100
000013AE  43F9 00001B5A            371          LEA     AND, A1
000013B4  103C 000E                372          MOVE.B  #14, D0
000013B8  4E4F                     373          TRAP    #15
000013BA  E94A                     374          LSL.W   #4, D2
000013BC  3602                     375          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000013BE  E04B                     376          LSR.W   #8, D3 * D3 = D register
000013C0  EA4B                     377          LSR.W   #5, D3
000013C2  3802                     378          MOVE.W  D2, D4 *D4 = SubOPMODE
000013C4  E74C                     379          LSL.W   #3, D4
000013C6  E04C                     380          LSR.W   #8, D4
000013C8  EA4C                     381          LSR.W   #5, D4
000013CA  3202                     382          MOVE.W  D2, D1 * D1 = EA Mode
000013CC  ED49                     383          LSL.W   #6, D1
000013CE  E049                     384          LSR.W   #8, D1
000013D0  EA49                     385          LSR.W   #5, D1
000013D2  3002                     386          MOVE.W  D2, D0 * D0 = EA register
000013D4  E148                     387          LSL.W   #8, D0
000013D6  E348                     388          LSL.W   #1, D0
000013D8  E048                     389          LSR.W   #8, D0
000013DA  EA48                     390          LSR.W   #5, D0
000013DC  45F9 00001426            391          LEA     SubTable, A2
000013E2  C8FC 0006                392          MULU    #6, D4
000013E6  4EB2 4000                393          JSR     (A2, D4)
000013EA                           394          
000013EA                           395  * -> ADD
000013EA                           396  * Spltting Add into OPMODE and Register Value
000013EA                           397  OP1101:
000013EA  43F9 00001B56            398          LEA     ADDITION, A1
000013F0  103C 000E                399          MOVE.B  #14, D0
000013F4  4E4F                     400          TRAP    #15
000013F6  E94A                     401          LSL.W   #4, D2
000013F8  3602                     402          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000013FA  E04B                     403          LSR.W   #8, D3 * D3 = D register
000013FC  EA4B                     404          LSR.W   #5, D3
000013FE  3802                     405          MOVE.W  D2, D4 *D4 = SubOPMODE
00001400  E74C                     406          LSL.W   #3, D4
00001402  E04C                     407          LSR.W   #8, D4
00001404  EA4C                     408          LSR.W   #5, D4
00001406  3202                     409          MOVE.W  D2, D1 * D1 = EA Mode
00001408  ED49                     410          LSL.W   #6, D1
0000140A  E049                     411          LSR.W   #8, D1
0000140C  EA49                     412          LSR.W   #5, D1
0000140E  3002                     413          MOVE.W  D2, D0 * D0 = EA register
00001410  E148                     414          LSL.W   #8, D0
00001412  E348                     415          LSL.W   #1, D0
00001414  E048                     416          LSR.W   #8, D0
00001416  EA48                     417          LSR.W   #5, D0
00001418  45F9 00001426            418          LEA     SubTable, A2
0000141E  C8FC 0006                419          MULU    #6, D4
00001422  4EB2 4000                420          JSR     (A2, D4)
00001426                           421          
00001426                           422  * =============================================
00001426                           423  * JMP Table for SUB OPMODES
00001426                           424  SubTable:
00001426  4EF9 00001456            425          JMP     OPMODE000 * BYTE  EA->DN
0000142C  4EF9 00001470            426          JMP     OPMODE001 * WORD  RA->DN  
00001432  4EF9 00001482            427          JMP     OPMODE010 * LONG  EA->DN 
00001438  4EF9 00001494            428          JMP     OPMODE011 * ADDA  WORD
0000143E  4EF9 000014C2            429          JMP     OPMODE100 * BYTE  DN->EA
00001444  4EF9 000014DA            430          JMP     OPMODE101 * BYTE  DN->EA
0000144A  4EF9 000014F2            431          JMP     OPMODE110 * BYTE  DN->EA
00001450  4EF9 0000150A            432          JMP     OPMODE111 * ADDA  LONG
00001456                           433          
00001456                           434  OPMODE000:
00001456  13FC 0000 00001B72       435          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
0000145E  1A00                     436          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001460  43F9 00001AEF            437          LEA     SIZE_BYTE, A1
00001466  103C 000E                438          MOVE.B  #14, D0
0000146A  4E4F                     439          TRAP    #15
0000146C  6000 00DC                440          BRA     Sub_OPMODE_FIRST
00001470                           441  OPMODE001
00001470  1A00                     442          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001472  43F9 00001AF3            443          LEA     SIZE_Word, A1
00001478  103C 000E                444          MOVE.B  #14, D0
0000147C  4E4F                     445          TRAP    #15
0000147E  6000 00CA                446          BRA     Sub_OPMODE_FIRST
00001482                           447  OPMODE010
00001482  1A00                     448          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001484  43F9 00001AF7            449          LEA     SIZE_Long, A1
0000148A  103C 000E                450          MOVE.B  #14, D0
0000148E  4E4F                     451          TRAP    #15
00001490  6000 00B8                452          BRA     Sub_OPMODE_FIRST
00001494                           453  *===============================================
00001494                           454  *Special OPMODE can only be used by ADD
00001494                           455  OPMODE011
00001494  0C38 000D 1180           456          CMP.B   #%1101, OpCode
0000149A  6700 0008                457          BEQ     Special_OPMODE_USED
0000149E  4EF9 000019DA            458          JMP     PRINTINVALIDEA
000014A4                           459  Special_OPMODE_USED:
000014A4  1A00                     460          MOVE.B  D0, D5
000014A6  43F9 00001B14            461          LEA     MOVEA, A1
000014AC  103C 000E                462          MOVE.B  #14, D0
000014B0  4E4F                     463          TRAP    #15
000014B2  43F9 00001AF3            464          LEA     SIZE_WORD, A1
000014B8  103C 000E                465          MOVE.B  #14, D0
000014BC  4E4F                     466          TRAP    #15
000014BE  6000 00CE                467          BRA     Sub_OPMODE_ADDA
000014C2                           468  OPMODE100
000014C2  1A00                     469          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014C4  43F9 00001AEF            470          LEA     SIZE_BYTE, A1
000014CA  103C 000E                471          MOVE.B  #14, D0
000014CE  4E4F                     472          TRAP    #15
000014D0  4EB9 00001538            473          JSR     Memory_Alterable_Check
000014D6  6000 0090                474          BRA     Sub_OPMODE_SECOND
000014DA                           475  OPMODE101
000014DA  1A00                     476          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014DC  43F9 00001AF3            477          LEA     SIZE_Word, A1
000014E2  103C 000E                478          MOVE.B  #14, D0
000014E6  4E4F                     479          TRAP    #15
000014E8  4EB9 00001538            480          JSR     Memory_Alterable_Check
000014EE  6000 0078                481          BRA     Sub_OPMODE_SECOND
000014F2                           482  OPMODE110
000014F2  1A00                     483          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014F4  43F9 00001AF7            484          LEA     SIZE_LONG, A1
000014FA  103C 000E                485          MOVE.B  #14, D0
000014FE  4E4F                     486          TRAP    #15
00001500  4EB9 00001538            487          JSR     Memory_Alterable_Check
00001506  6000 0060                488          BRA     Sub_OPMODE_SECOND
0000150A                           489  OPMODE111:
0000150A  0C38 000D 1180           490          CMP.B   #%1101, OpCode
00001510  6700 0008                491          BEQ     Special_OPMODE_USED2
00001514  4EF9 000019DA            492          JMP     PRINTINVALIDEA
0000151A                           493  Special_OPMODE_USED2:
0000151A  1A00                     494          MOVE.B  D0, D5
0000151C  43F9 00001B14            495          LEA     MOVEA, A1
00001522  103C 000E                496          MOVE.B  #14, D0
00001526  4E4F                     497          TRAP    #15
00001528  43F9 00001AF7            498          LEA     SIZE_LONG, A1
0000152E  103C 000E                499          MOVE.B  #14, D0
00001532  4E4F                     500          TRAP    #15
00001534  6000 0058                501          BRA     Sub_OPMODE_ADDA
00001538                           502  *===================================================
00001538                           503  * USED FOR SUB AND OR, check if dest EA is memory Alterable
00001538                           504  
00001538                           505  Memory_Alterable_Check:
00001538  B23C 0000                506          CMP.B   #%000, D1
0000153C  6700 049C                507          BEQ     PRINTINVALIDEA
00001540  B23C 0001                508          CMP.B   #%001, D1
00001544  6700 0494                509          BEQ     PRINTINVALIDEA
00001548  4E75                     510          RTS
0000154A                           511          
0000154A                           512  *===============================================
0000154A                           513  * Used for Dn->EA for SUB
0000154A                           514  * Called by 001, 010, 100, 
0000154A                           515  Sub_OPMODE_FIRST:
0000154A  1005                     516          MOVE.B  D5, D0   * TEMP RETURN D0
0000154C  4EB9 00001600            517          JSR     EACHECKER 
00001552  4240                     518          CLR     D0
00001554  4241                     519          CLR     D1
00001556  4EB9 000019CC            520          JSR     PRINTCOMMA
0000155C  1003                     521          MOVE.B  D3, D0
0000155E  4EB9 00001636            522          JSR     DestEAChecker 
00001564  6000 FB60                523          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001568                           524  *===============================================
00001568                           525  * Used for Dn->EA for SUB
00001568                           526  * Called by 100, 101, 110 
00001568                           527  Sub_OPMODE_SECOND:
00001568  1801                     528          MOVE.B  D1, D4   *TEMP STORE D1
0000156A  4240                     529          CLR     D0  *Clean D0
0000156C  1003                     530          MOVE.B  D3, D0
0000156E  4241                     531          CLR     D1
00001570  4EB9 00001600            532          JSR     EACHECKER 
00001576  4240                     533          CLR     D0
00001578  4241                     534          CLR     D1
0000157A  4EB9 000019CC            535          JSR     PRINTCOMMA
00001580  1005                     536          MOVE.B  D5, D0   * TEMP RETURN D0
00001582  1204                     537          MOVE.B  D4, D1   * TEMP RETURN D1
00001584  4EB9 00001636            538          JSR     DestEAChecker 
0000158A  6000 FB3A                539          BRA     addrloop *EA FINISHED-----
0000158E                           540  *===============================================
0000158E                           541  * Used for Dn->EA for SUB
0000158E                           542  * Called by 011, 111
0000158E                           543  Sub_OPMODE_ADDA:
0000158E  1005                     544          MOVE.B  D5, D0   * TEMP RETURN D0
00001590  4EB9 00001600            545          JSR     EACHECKER 
00001596  4240                     546          CLR     D0
00001598  4241                     547          CLR     D1
0000159A  4EB9 000019CC            548          JSR     PRINTCOMMA
000015A0  1003                     549          MOVE.B  D3, D0
000015A2  123C 0001                550          MOVE.B  #%001, D1
000015A6  4EB9 00001636            551          JSR     DestEAChecker 
000015AC  6000 FB18                552          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
000015B0                           553          
000015B0                           554  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
000015B0                           555  CHECK_MOVEA
000015B0  2602                     556          MOVE.L  D2, D3  * HOlding D2 in D3 temp
000015B2  E18A                     557          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000015B4  E18A                     558          LSL.L   #8, D2
000015B6  E98A                     559          LSL.L   #4, D2
000015B8  E08A                     560          LSR.L   #8, D2
000015BA  E08A                     561          LSR.L   #8, D2
000015BC  E88A                     562          LSR.L   #4, D2 // 12 bits of opperand found
000015BE  EC8A                     563          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
000015C0  1202                     564          MOVE.B  D2, D1 * Prepare D1 for Mode
000015C2  EB09                     565          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000015C4  EA09                     566          LSR.B   #5, D1
000015C6  B23C 0001                567          CMP.B   #%001, D1
000015CA  6700 0006                568          BEQ     PRINTA
000015CE  2403                     569          MOVE.L  D3, D2 
000015D0  4E75                     570          RTS * Goes back to OP Value
000015D2                           571          
000015D2                           572  PRINTA
000015D2  43F9 00001B14            573          LEA     MOVEA, A1
000015D8  103C 000E                574          MOVE.B  #14, D0
000015DC  4E4F                     575          TRAP    #15
000015DE  2403                     576          MOVE.L  D3, D2
000015E0  4E75                     577          RTS * Goes back to CHECK_MOVEA
000015E2                           578          
000015E2                           579          
000015E2                           580  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
000015E2                           581  *=================================================================
000015E2                           582  *-----------EA-- Calculate EA used for Data Registers
000015E2                           583  *----------Pre: D2, D0, D1 must be clear
000015E2                           584  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
000015E2                           585  EA:
000015E2  4240                     586          CLR     D0  * Clear D0 and D1 so they don't conflict
000015E4  4241                     587          CLR     D1
000015E6  4243                     588          CLR     D3
000015E8  E18A                     589          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000015EA  E18A                     590          LSL.L   #8, D2
000015EC  E98A                     591          LSL.L   #4, D2
000015EE  E08A                     592          LSR.L   #8, D2
000015F0  E08A                     593          LSR.L   #8, D2
000015F2  E88A                     594          LSR.L   #4, D2 // 12 bits of opperand found
000015F4  1002                     595          MOVE.B  D2, D0 Source Data Register
000015F6  EB08                     596          LSL.B   #5, D0
000015F8  EA08                     597          LSR.B   #5, D0
000015FA  1202                     598          MOVE.B  D2, D1 *Source Data Mode
000015FC  E509                     599          LSL.B   #2, D1
000015FE  EA09                     600          LSR.B   #5, D1
00001600                           601          
00001600                           602  *=================================================
00001600                           603  *-----------EA CHECKER------Continues from EA
00001600                           604  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001600                           605  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
00001600                           606  EACHECKER: 
00001600  B23C 0000                607          CMP.B   #%0000, D1
00001604  6700 007E                608          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001608  B23C 0001                609          CMP.B   #%0001, D1
0000160C  6700 0096                610          BEQ     JMPTO_SRC_ADDR_REG
00001610  B23C 0002                611          CMP.B   #%0010, D1
00001614  6700 00AE                612          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001618  B23C 0003                613          CMP.B   #%0011, D1
0000161C  6700 00A6                614          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001620  B23C 0004                615          CMP.B   #%0100, D1
00001624  6700 009E                616          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001628  B23C 0007                617          CMP.B   #%0111, D1
0000162C  6700 0196                618          BEQ     JMPTO_SRC_IMMEDIATE
00001630  4EF9 000019DA            619          JMP     PRINTINVALIDEA
00001636                           620          
00001636                           621  *=================================================
00001636                           622  *-----------DEST EA CHECKER------Continues from EA
00001636                           623  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001636                           624  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
00001636                           625  DESTEACHECKER:
00001636  B23C 0000                626          CMP.B   #%0000, D1
0000163A  6700 0058                627          BEQ     JMPTODestREG *JUMPS TO Source D registers
0000163E  B23C 0001                628          CMP.B   #%0001, D1
00001642  6700 0070                629          BEQ     JMPTO_DEST_ADDR_REG
00001646  B23C 0002                630          CMP.B   #%0010, D1
0000164A  6700 00B4                631          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000164E  B23C 0003                632          CMP.B   #%0011, D1
00001652  6700 00AC                633          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001656  B23C 0004                634          CMP.B   #%0100, D1
0000165A  6700 00A4                635          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000165E  4EF9 000019DA            636          JMP     PRINTINVALIDEA
00001664                           637          
00001664                           638  *=================================================      
00001664                           639  * Dest EA Finder
00001664                           640  * PRE: ONLY USED FOR MOVE
00001664                           641  * POST: PRINTS DEST EA  
00001664                           642  DestEAFinder:
00001664  4EB9 000019CC            643          JSR     PRINTCOMMA  * Prints comma between two operrands
0000166A  EC8A                     644          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
0000166C  4241                     645          CLR     D1     * Clear D1 and D0 for opperand mode and register
0000166E  4240                     646          CLR     D0
00001670  1202                     647          MOVE.B  D2, D1 * Prepare D1 for Mode
00001672  EB09                     648          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001674  EA09                     649          LSR.B   #5, D1
00001676  1002                     650          MOVE.B  D2, D0  *Prepare D0 for Register
00001678  E508                     651          LSL.B   #2, D0
0000167A  EA08                     652          LSR.B   #5, D0
0000167C  4EB8 1636                653          JSR     DESTEACHECKER
00001680  4EF8 10C6                654          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00001684                           655  
00001684                           656          
00001684                           657  *===================================================
00001684                           658  *-------------Data Register checker------------------        
00001684                           659  JMPTOSRCREG:
00001684  43F9 00001880            660          LEA     DATAREGTABLE, A1
0000168A  C0FC 0006                661          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000168E  4EB1 0000                662          JSR     (A1, D0) *JMP To index A1 + D0
00001692                           663          * EA CONTINUES HERE
00001692  4E75                     664          RTS * BRA DESTEAFINDER DELETED
00001694                           665  JMPToDestReg: *PRINT OUT DEST Registers
00001694  43F9 00001880            666          LEA     DATAREGTABLE, A1
0000169A  C0FC 0006                667          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
0000169E  4EB1 0000                668          JSR     (A1, D0) *JMP to A1 + D0
000016A2  4E75                     669          RTS    * Goes Back to DestEAFinder
000016A4                           670          
000016A4                           671  
000016A4                           672  *===================================================
000016A4                           673  *-------------Address Register checker------------------             
000016A4                           674  JMPTO_SRC_ADDR_REG:
000016A4  43F9 000018B0            675          LEA     AddrREGTABLE, A1
000016AA  C0FC 0006                676          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000016AE  4EB1 0000                677          JSR     (A1, D0) *JMP To index A1 + D0
000016B2                           678          * EA CONTINUES HERE
000016B2  4E75                     679          RTS * BRA DESTEAFINDER DELETED
000016B4                           680  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
000016B4  43F9 000018B0            681          LEA     AddrREGTABLE, A1
000016BA  C0FC 0006                682          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000016BE  4EB1 0000                683          JSR     (A1, D0) *JMP to A1 + D0
000016C2  4E75                     684          RTS     * Goes Back to DESTEAFinder
000016C4                           685          
000016C4                           686  *===================================================
000016C4                           687  *-------------Indirect Address Register checker------------------
000016C4                           688  *Copied from Address Register checker, basically adding parenthesis () around Address register
000016C4                           689  * Also Detects ()+ and -()
000016C4                           690  * PRE: D1 stores mode, D0 stores register #
000016C4                           691  * D1 to D5 are off limits
000016C4                           692  JMPTO_SRC_INDR_ADDR_REG:
000016C4  1A00                     693         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
000016C6  B23C 0004                694         CMP.B    #%100, D1       * IF IT IS -()
000016CA  6700 007E                695         BEQ      PRE_DECREMENT_SRC
000016CE  43F9 00001B46            696         LEA      INDR_LEFT, A1
000016D4  103C 000E                697         MOVE.B   #14, D0
000016D8  4E4F                     698         TRAP     #15
000016DA  1005                     699         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000016DC  43F9 000018B0            700         LEA     AddrREGTABLE, A1
000016E2  C0FC 0006                701         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000016E6  4EB1 0000                702         JSR     (A1, D0) *JMP To index A1 + D0
000016EA  43F9 00001B48            703         LEA      INDR_RIGHT, A1
000016F0  103C 000E                704         MOVE.B   #14, D0
000016F4  4E4F                     705         TRAP     #15
000016F6  B23C 0003                706         CMP.B    #%0011, D1 * IF IT IS ()+
000016FA  6700 0040                707         BEQ      POST_INCREMENT_SRC
000016FE  4E75                     708         RTS * BRA DESTEAFINDER DELETED
00001700                           709         
00001700                           710  JMPTO_DEST_INDR_ADDR_REG:
00001700  1600                     711         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
00001702  B23C 0004                712         CMP.B    #%100, D1
00001706  6700 0086                713         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
0000170A  43F9 00001B46            714         LEA      INDR_LEFT, A1
00001710  103C 000E                715         MOVE.B   #14, D0
00001714  4E4F                     716         TRAP     #15
00001716  1003                     717         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001718  43F9 000018B0            718         LEA     AddrREGTABLE, A1
0000171E  C0FC 0006                719         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001722  4EB1 0000                720         JSR     (A1, D0) *JMP To index A1 + D0
00001726  43F9 00001B48            721         LEA      INDR_RIGHT, A1
0000172C  103C 000E                722         MOVE.B   #14, D0
00001730  4E4F                     723         TRAP     #15
00001732  B23C 0003                724         CMP.B    #%0011, D1  // IF IT IS ()+
00001736  6700 0048                725         BEQ      POST_INCREMENT_DEST
0000173A  4E75                     726         RTS      * Goes Back to DestEAFinder
0000173C                           727         
0000173C                           728  POST_INCREMENT_SRC:
0000173C  43F9 00001B4A            729         LEA      POST_INCRE, A1
00001742  103C 000E                730         MOVE.B   #14, D0
00001746  4E4F                     731         TRAP     #15
00001748  4E75                     732         RTS * BRA DESTEAFINDER DELETED
0000174A                           733         
0000174A                           734  PRE_DECREMENT_SRC:
0000174A  43F9 00001B4C            735         LEA      PRE_DECRE, A1
00001750  103C 000E                736         MOVE.B   #14, D0
00001754  4E4F                     737         TRAP     #15
00001756  43F9 00001B46            738         LEA      INDR_LEFT, A1
0000175C  103C 000E                739         MOVE.B   #14, D0
00001760  4E4F                     740         TRAP     #15
00001762  1005                     741         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001764  43F9 000018B0            742         LEA     AddrREGTABLE, A1
0000176A  C0FC 0006                743         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000176E  4EB1 0000                744         JSR     (A1, D0) *JMP To index A1 + D0
00001772  43F9 00001B48            745         LEA      INDR_RIGHT, A1
00001778  103C 000E                746         MOVE.B   #14, D0
0000177C  4E4F                     747         TRAP     #15
0000177E  4E75                     748         RTS * BRA DESTEAFINDER DELETED
00001780                           749  
00001780                           750  POST_INCREMENT_DEST
00001780  43F9 00001B4A            751         LEA      POST_INCRE, A1
00001786  103C 000E                752         MOVE.B   #14, D0
0000178A  4E4F                     753         TRAP     #15
0000178C  4E75                     754         RTS      * Goes Back to DestEAFinder
0000178E                           755         
0000178E                           756  PRE_DECREMENT_DEST:
0000178E  43F9 00001B4C            757         LEA      PRE_DECRE, A1
00001794  103C 000E                758         MOVE.B   #14, D0
00001798  4E4F                     759         TRAP     #15
0000179A  43F9 00001B46            760         LEA      INDR_LEFT, A1
000017A0  103C 000E                761         MOVE.B   #14, D0
000017A4  4E4F                     762         TRAP     #15
000017A6  1005                     763         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000017A8  43F9 000018B0            764         LEA     AddrREGTABLE, A1
000017AE  C0FC 0006                765         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000017B2  4EB1 0000                766         JSR     (A1, D0) *JMP To index A1 + D0
000017B6  43F9 00001B48            767         LEA      INDR_RIGHT, A1
000017BC  103C 000E                768         MOVE.B   #14, D0
000017C0  4E4F                     769         TRAP     #15
000017C2  4E75                     770         RTS      * Goes Back to DestEAFinder
000017C4                           771         
000017C4                           772  JMPTO_SRC_IMMEDIATE:
000017C4  B03C 0000                773         CMP.B    #%000, D0
000017C8  6700 0014                774         BEQ      Address_W
000017CC  B03C 0001                775         CMP.B    #%001, D0
000017D0  6700 002A                776         BEQ      Address_L
000017D4  B03C 0004                777         CMP.B    #%100, D0
000017D8  4EF9 000019DA            778         JMP      PRINTINVALIDEA
000017DE                           779         
000017DE                           780  Address_W:
000017DE  43F9 00001B4E            781          LEA     DOLLAR_SIGN, A1
000017E4  103C 000E                782          MOVE.B  #14, D0
000017E8  4E4F                     783          TRAP    #15
000017EA  4241                     784          CLR     D1
000017EC  4240                     785          CLR     D0
000017EE  321E                     786          MOVE.W  (A6)+, D1
000017F0  143C 0010                787          MOVE.B  #16, D2
000017F4  103C 000F                788          MOVE.B  #15, D0
000017F8  4E4F                     789          TRAP    #15 
000017FA  4E75                     790          RTS 
000017FC                           791  
000017FC                           792  Address_L
000017FC  43F9 00001B4E            793          LEA     DOLLAR_SIGN, A1
00001802  103C 000E                794          MOVE.B  #14, D0
00001806  4E4F                     795          TRAP    #15
00001808  4241                     796          CLR     D1
0000180A  4240                     797          CLR     D0
0000180C  221E                     798          MOVE.L  (A6)+, D1
0000180E  143C 0010                799          MOVE.B  #16, D2
00001812  103C 000F                800          MOVE.B  #15, D0
00001816  4E4F                     801          TRAP    #15
00001818  4E75                     802          RTS  
0000181A                           803          
0000181A                           804  Address_Immediate:
0000181A  43F9 00001B50            805          LEA     POUND_SIGN, A1
00001820  103C 000E                806          MOVE.B  #14, D0
00001824  4E4F                     807          TRAP    #15
00001826  43F9 00001B4E            808          LEA     DOLLAR_SIGN, A1
0000182C  103C 000E                809          MOVE.B  #14, D0
00001830  4E4F                     810          TRAP    #15
00001832  0C39 0000 00001B72       811          CMP.B   #%00, OpCodeSize
0000183A  6700 001A                812          BEQ     Immediate_B
0000183E  0C39 0003 00001B72       813          CMP.B   #%11, OpCodeSize
00001846  6700 001C                814          BEQ     Immediate_W
0000184A  0C39 0002 00001B72       815          CMP.B   #%10, OpCOdeSize
00001852  6700 001E                816          BEQ     Immediate_L
00001856                           817          
00001856                           818  Immediate_B:
00001856  121E                     819          MOVE.B  (A6)+, D1
00001858  143C 0010                820          MOVE.B  #16, D2
0000185C  103C 000F                821          MOVE.B  #15, D0
00001860  4E4F                     822          TRAP    #15
00001862  4E75                     823          RTS
00001864                           824          
00001864                           825  Immediate_W:
00001864  321E                     826          MOVE.W  (A6)+, D1
00001866  143C 0010                827          MOVE.B  #16, D2
0000186A  103C 000F                828          MOVE.B  #15, D0
0000186E  4E4F                     829          TRAP    #15
00001870  4E75                     830          RTS
00001872                           831          
00001872                           832  Immediate_L:
00001872  221E                     833          MOVE.L  (A6)+, D1
00001874  143C 0010                834          MOVE.B  #16, D2
00001878  103C 000F                835          MOVE.B  #15, D0
0000187C  4E4F                     836          TRAP    #15
0000187E  4E75                     837          RTS
00001880                           838  
00001880                           839          
00001880                           840  
00001880                           841  *=================================================================
00001880                           842  *---------Data Register Table used for printing out Registers----
00001880                           843  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
00001880                           844  DataRegTable
00001880  4EF9 000018E0            845          JMP REG_D0
00001886  4EF9 000018F4            846          JMP REG_D1
0000188C  4EF9 00001902            847          JMP REG_D2
00001892  4EF9 00001910            848          JMP REG_D3
00001898  4EF9 0000191E            849          JMP REG_D4
0000189E  4EF9 0000192C            850          JMP REG_D5
000018A4  4EF9 0000193A            851          JMP REG_D6
000018AA  4EF9 00001948            852          JMP REG_D7
000018B0                           853  
000018B0                           854  AddrRegTable:
000018B0                           855          
000018B0  4EF9 00001956            856          JMP REG_A0
000018B6  4EF9 0000196A            857          JMP REG_A1
000018BC  4EF9 00001978            858          JMP REG_A2
000018C2  4EF9 00001986            859          JMP REG_A3
000018C8  4EF9 00001994            860          JMP REG_A4
000018CE  4EF9 000019A2            861          JMP REG_A5
000018D4  4EF9 000019B0            862          JMP REG_A6
000018DA  4EF9 000019BE            863          JMP REG_A7
000018E0                           864  
000018E0                           865  * Data Registers Printing        
000018E0                           866  REG_D0:
000018E0  227C 00000000            867          MOVEA.L #$0, A1
000018E6  43F9 00001B16            868          LEA     DREG0, A1
000018EC  103C 000E                869          MOVE.B  #14, D0
000018F0  4E4F                     870          TRAP    #15
000018F2  4E75                     871          RTS
000018F4                           872          
000018F4                           873  REG_D1:
000018F4  43F9 00001B19            874          LEA     DREG1, A1
000018FA  103C 000E                875          MOVE.B  #14, D0
000018FE  4E4F                     876          TRAP    #15
00001900  4E75                     877          RTS
00001902                           878  REG_D2:
00001902  43F9 00001B1C            879          LEA     DREG2, A1
00001908  103C 000E                880          MOVE.B  #14, D0
0000190C  4E4F                     881          TRAP    #15
0000190E  4E75                     882          RTS
00001910                           883  REG_D3:
00001910  43F9 00001B1F            884          LEA     DREG3, A1
00001916  103C 000E                885          MOVE.B  #14, D0
0000191A  4E4F                     886          TRAP    #15
0000191C  4E75                     887          RTS
0000191E                           888  REG_D4:
0000191E  43F9 00001B22            889          LEA     DREG4, A1
00001924  103C 000E                890          MOVE.B  #14, D0
00001928  4E4F                     891          TRAP    #15
0000192A  4E75                     892          RTS
0000192C                           893  REG_D5:
0000192C  43F9 00001B25            894          LEA     DREG5, A1
00001932  103C 000E                895          MOVE.B  #14, D0
00001936  4E4F                     896          TRAP    #15
00001938  4E75                     897          RTS
0000193A                           898  REG_D6:
0000193A  43F9 00001B28            899          LEA     DREG6, A1
00001940  103C 000E                900          MOVE.B  #14, D0
00001944  4E4F                     901          TRAP    #15
00001946  4E75                     902          RTS
00001948                           903  REG_D7:
00001948  43F9 00001B2B            904          LEA     DREG7, A1
0000194E  103C 000E                905          MOVE.B  #14, D0
00001952  4E4F                     906          TRAP    #15
00001954  4E75                     907          RTS
00001956                           908          
00001956                           909  *--------------------Addr Reigster printing ------------------------*        
00001956                           910  REG_A0:
00001956  227C 00000000            911          MOVEA.L #$0, A1
0000195C  43F9 00001B2E            912          LEA     AREG0, A1
00001962  103C 000E                913          MOVE.B  #14, D0
00001966  4E4F                     914          TRAP    #15
00001968  4E75                     915          RTS
0000196A                           916          
0000196A                           917  REG_A1:
0000196A  43F9 00001B31            918          LEA     AREG1, A1
00001970  103C 000E                919          MOVE.B  #14, D0
00001974  4E4F                     920          TRAP    #15
00001976  4E75                     921          RTS
00001978                           922  REG_A2:
00001978  43F9 00001B34            923          LEA     AREG2, A1
0000197E  103C 000E                924          MOVE.B  #14, D0
00001982  4E4F                     925          TRAP    #15
00001984  4E75                     926          RTS
00001986                           927  REG_A3:
00001986  43F9 00001B37            928          LEA     AREG3, A1
0000198C  103C 000E                929          MOVE.B  #14, D0
00001990  4E4F                     930          TRAP    #15
00001992  4E75                     931          RTS
00001994                           932  REG_A4:
00001994  43F9 00001B3A            933          LEA     AREG4, A1
0000199A  103C 000E                934          MOVE.B  #14, D0
0000199E  4E4F                     935          TRAP    #15
000019A0  4E75                     936          RTS
000019A2                           937  REG_A5:
000019A2  43F9 00001B3D            938          LEA     AREG5, A1
000019A8  103C 000E                939          MOVE.B  #14, D0
000019AC  4E4F                     940          TRAP    #15
000019AE  4E75                     941          RTS
000019B0                           942  REG_A6:
000019B0  43F9 00001B40            943          LEA     AREG6, A1
000019B6  103C 000E                944          MOVE.B  #14, D0
000019BA  4E4F                     945          TRAP    #15
000019BC  4E75                     946          RTS
000019BE                           947  REG_A7:
000019BE  43F9 00001B43            948          LEA     AREG7, A1
000019C4  103C 000E                949          MOVE.B  #14, D0
000019C8  4E4F                     950          TRAP    #15
000019CA  4E75                     951          RTS
000019CC                           952          
000019CC                           953  *====================================================PRinting/ ERROR method comes down here=========================================
000019CC                           954  PRINTCOMMA: * Prints comma between two operrands
000019CC  43F9 00001AE8            955          LEA     COMMA, A1
000019D2  103C 000E                956          MOVE.B  #14, D0
000019D6  4E4F                     957          TRAP    #15
000019D8  4E75                     958          RTS
000019DA                           959          
000019DA                           960  PrintInvalidEA:
000019DA  43F9 00001A5C            961          LEA     Invalid_EA_Addr, A1
000019E0  103C 000E                962          MOVE.B  #14, D0
000019E4  4E4F                     963          TRAP    #15
000019E6  4EF8 10C6                964          JMP     AddrLoop
000019EA                           965          
000019EA                           966  PrintInvalidSUB:
000019EA  43F9 00001A72            967          LEA     Invalid_EA_SUB, A1
000019F0  103C 000E                968          MOVE.B  #14, D0
000019F4  4E4F                     969          TRAP    #15
000019F6  4EF8 10C6                970          JMP     AddrLoop
000019FA                           971          
000019FA                           972  PrintInvalidAddress:
000019FA  43F9 00001A90            973          LEA     Invalid_Address, A1
00001A00  103C 000E                974          MOVE.B  #14, D0
00001A04  4E4F                     975          TRAP    #15
00001A06  4EF8 10C6                976          JMP     AddrLoop
00001A0A                           977          
00001A0A                           978           
00001A0A                           979  * Clear all registers    
00001A0A                           980  CLRREG:
00001A0A  4240                     981      CLR D0
00001A0C  4241                     982      CLR D1
00001A0E  4242                     983      CLR D2
00001A10  4243                     984      CLR D3
00001A12  4244                     985      CLR D4
00001A14  4245                     986      CLR D5
00001A16  4246                     987      CLR D6
00001A18  4E75                     988      RTS
00001A1A                           989      
00001A1A                           990      
00001A1A                           991          
00001A1A                           992  * Put program code here
00001A1A                           993  
00001A1A  FFFF FFFF                994      SIMHALT             ; halt simulator
00001A1E                           995  
00001A1E                           996  * Put variables and constants here
00001A1E  =0000000D                997  CR  EQU $0D
00001A1E  =0000000A                998  LF  EQU $0A
00001A1E= 50 6C 65 61 73 65 ...    999  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
00001A3E= 50 6C 65 61 73 65 ...   1000  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
00001A5C= 49 6E 76 61 6C 69 ...   1001  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
00001A72= 49 6E 76 61 6C 69 ...   1002  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00001A90= 47 69 76 65 6E 20 ...   1003  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00001AAB= 43 6F 6E 74 69 6E ...   1004  Continue_Program    DC.B    'Continue Program? Y/N', CR, LF, 0
00001AC3= 0D 0A 00                1005  Print_NextLine  DC.B    '', CR, LF, 0
00001AC6= 54 68 61 6E 6B 20 ...   1006  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
00001AE8                          1007  
00001AE8= 2C 20 00                1008  COMMA       DC.B    ', ', 0
00001AEB= 20 20 20 00             1009  SPACER      DC.B    '   ', 0
00001AEF                          1010  *DATASIZE
00001AEF= 2E 42 20 00             1011  SIZE_BYTE       DC.B    '.B ', 0
00001AF3= 2E 57 20 00             1012  SIZE_WORD       DC.B    '.W ', 0
00001AF7= 2E 4C 20 00             1013  SIZE_LONG       DC.B    '.L ', 0
00001AFB                          1014  
00001AFB                          1015  *MOVE OPCODES
00001AFB= 4D 4F 56 45 00          1016  MOVE_PRINT  DC.B    'MOVE', 0
00001B00= 4D 4F 56 45 2E 42 ...   1017  MOVEB       DC.B    'MOVE.B ', 0
00001B08= 2E 42 20 00             1018  SIZE_B       DC.B    '.B ', 0
00001B0C= 2E 57 20 00             1019  MOVEW       DC.B    '.W ', 0
00001B10= 2E 4C 20 00             1020  MOVEL       DC.B    '.L ', 0
00001B14= 41 00                   1021  MOVEA       DC.B    'A', 0
00001B16                          1022  
00001B16                          1023  
00001B16                          1024  *DATA REGISTERS PRINTOUT
00001B16= 44 30 00                1025  DREG0       DC.B    'D0', 0
00001B19= 44 31 00                1026  DREG1       DC.B    'D1', 0
00001B1C= 44 32 00                1027  DREG2       DC.B    'D2', 0
00001B1F= 44 33 00                1028  DREG3       DC.B    'D3', 0
00001B22= 44 34 00                1029  DREG4       DC.B    'D4', 0
00001B25= 44 35 00                1030  DREG5       DC.B    'D5', 0
00001B28= 44 36 00                1031  DREG6       DC.B    'D6', 0
00001B2B= 44 37 00                1032  DREG7       DC.B    'D7', 0 
00001B2E                          1033  
00001B2E                          1034  *ADDR REGISTERS PRINTOUT
00001B2E= 41 30 00                1035  AREG0       DC.B    'A0', 0
00001B31= 41 31 00                1036  AREG1       DC.B    'A1', 0
00001B34= 41 32 00                1037  AREG2       DC.B    'A2', 0
00001B37= 41 33 00                1038  AREG3       DC.B    'A3', 0
00001B3A= 41 34 00                1039  AREG4       DC.B    'A4', 0
00001B3D= 41 35 00                1040  AREG5       DC.B    'A5', 0
00001B40= 41 36 00                1041  AREG6       DC.B    'A6', 0
00001B43= 41 37 00                1042  AREG7       DC.B    'A7', 0 
00001B46                          1043  
00001B46                          1044  *INDR_ADDR REGISTERS PRINTOUT
00001B46= 28 00                   1045  INDR_LEFT   DC.B    '(', 0
00001B48= 29 00                   1046  INDR_RIGHT  DC.B    ')', 0
00001B4A= 2B 00                   1047  POST_INCRE   DC.B    '+', 0
00001B4C= 2D 00                   1048  PRE_DECRE   DC.B    '-', 0
00001B4E= 24 00                   1049  DOLLAR_SIGN DC.B    '$', 0
00001B50= 23 00                   1050  POUND_SIGN  DC.B    '#', 0
00001B52                          1051  
00001B52                          1052  *SUB
00001B52= 53 55 42 00             1053  SUBTRACT    DC.B    'SUB', 0
00001B56= 41 44 44 00             1054  ADDITION    DC.B    'ADD', 0
00001B5A= 41 4E 44 00             1055  AND         DC.B    'AND', 0
00001B5E= 4F 52 00                1056  OR          DC.B    'OR', 0
00001B61= 4E 4F 54 00             1057  NOT_OP      DC.B    'NOT', 0
00001B65                          1058  
00001B66= 00000001                1059  addrStart   DC.L    1   // Starting address
00001B6A= 00000001                1060  addrEnd     DC.L    1   // ending address
00001B6E= 00000001                1061  OpCodeStorage DC.L    1
00001B72= 00000001                1062  OpCodeSize  DC.L    1
00001B76                          1063      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   115C
ADDITION            1B56
ADDREND             1B6A
ADDRESS_IMMEDIATE   181A
ADDRESS_L           17FC
ADDRESS_W           17DE
ADDRLOOP            10C6
ADDRREGTABLE        18B0
ADDRSTART           1B66
ADDVAL              1156
AND                 1B5A
AREG0               1B2E
AREG1               1B31
AREG2               1B34
AREG3               1B37
AREG4               1B3A
AREG5               1B3D
AREG6               1B40
AREG7               1B43
B                   1162
C                   1168
CHAR                1126
CHECKRANGE          1076
CHECK_CONT          10E0
CHECK_MOVEA         15B0
CLRREG              1A0A
COMMA               1AE8
CONTINUE_PROGRAM    1AAB
CONVERT             110C
CR                  D
D                   116E
DATAREGTABLE        1880
DESTEACHECKER       1636
DESTEAFINDER        1664
DOLLAR_SIGN         1B4E
DREG0               1B16
DREG1               1B19
DREG2               1B1C
DREG3               1B1F
DREG4               1B22
DREG5               1B25
DREG6               1B28
DREG7               1B2B
E                   1174
EA                  15E2
EACHECKER           1600
END                 10B4
F                   117A
GETINPUT            1006
IMMEDIATE_B         1856
IMMEDIATE_L         1872
IMMEDIATE_W         1864
INDR_LEFT           1B46
INDR_RIGHT          1B48
INVALID_ADDRESS     1A90
INVALID_EA_ADDR     1A5C
INVALID_EA_SUB      1A72
JMPTABLE            11C8
JMPTODESTREG        1694
JMPTOSRCREG         1684
JMPTO_DEST_ADDR_REG  16B4
JMPTO_DEST_INDR_ADDR_REG  1700
JMPTO_SRC_ADDR_REG  16A4
JMPTO_SRC_IMMEDIATE  17C4
JMPTO_SRC_INDR_ADDR_REG  16C4
LF                  A
LOOP                1102
LOWERLIMIT          3000
MEMORY_ALTERABLE_CHECK  1538
MOVEA               1B14
MOVEB               1B00
MOVEL               1B10
MOVEW               1B0C
MOVE_PRINT          1AFB
NOT_JMPTABLE        12BC
NOT_OP              1B61
NOT_SIZE00          12D4
NOT_SIZE01          12F6
NOT_SIZE10          1310
NOT_SIZE11          132A
OP0000              121C
OP0001              121C
OP0010              123A
OP0011              1262
OP0100              128A
OP0101              132E
OP0110              132E
OP0111              132E
OP1000              136A
OP1001              132E
OP1010              13AE
OP1011              13AE
OP1100              13AE
OP1101              13EA
OPCODE              1180
OPCODESIZE          1B72
OPCODESTORAGE       1B6E
OPMODE000           1456
OPMODE001           1470
OPMODE010           1482
OPMODE011           1494
OPMODE100           14C2
OPMODE101           14DA
OPMODE110           14F2
OPMODE111           150A
OR                  1B5E
POST_INCRE          1B4A
POST_INCREMENT_DEST  1780
POST_INCREMENT_SRC  173C
POUND_SIGN          1B50
PRE_DECRE           1B4C
PRE_DECREMENT_DEST  178E
PRE_DECREMENT_SRC   174A
PRINTA              15D2
PRINTCOMMA          19CC
PRINTINVALIDADDRESS  19FA
PRINTINVALIDEA      19DA
PRINTINVALIDSUB     19EA
PRINT_NEXTLINE      1AC3
REG_A0              1956
REG_A1              196A
REG_A2              1978
REG_A3              1986
REG_A4              1994
REG_A5              19A2
REG_A6              19B0
REG_A7              19BE
REG_D0              18E0
REG_D1              18F4
REG_D2              1902
REG_D3              1910
REG_D4              191E
REG_D5              192C
REG_D6              193A
REG_D7              1948
SIZE_B              1B08
SIZE_BYTE           1AEF
SIZE_LONG           1AF7
SIZE_WORD           1AF3
SPACER              1AEB
SPECIAL_OPMODE_USED  14A4
SPECIAL_OPMODE_USED2  151A
START               1000
SUBTABLE            1426
SUBTRACT            1B52
SUB_OPMODE_ADDA     158E
SUB_OPMODE_FIRST    154A
SUB_OPMODE_SECOND   1568
TESTER              6000
TY_MESSAGE          1AC6
UPPERLIMIT          FFFFFE
WELCOME             1A1E
WELCOME2            1A3E
YESNOSTORAGE        50
