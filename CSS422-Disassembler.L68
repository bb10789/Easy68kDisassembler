00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/10/2020 12:46:40 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00009000                            12      ORG    $9000
00009000                            13  TESTER:
00009000  4611                      14          NOT.B       (A1)
00009002  4659                      15          NOT.W       (A1)+
00009004  4693                      16          NOT.L       (A3)
00009006  1200                      17          MOVE.B      D0, D1
00009008                            18  
00001000                            19      ORG    $1000
00001000                            20  *=================================================================
00001000                            21  *                     THIS IS OUR MAIN METHOD
00001000                            22  *               Don't throw random stuff in it, keep it to a minimum
00001000                            23  
00001000                            24  START:                  ; first instruction of program
00001000  4EB9 00001006             25          JSR     GETINPUT
00001006                            26  *=================================================================
00001006                            27  *---------------Get starting and ending addresss------- Kelvin
00001006                            28  *--------------- PRE: will be using D0, D5, A1
00001006                            29  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            30  GETINPUT:
00001006  4EB9 00001A2C             31          JSR     CLRREG    *clean registers to restart program
0000100C  43F9 00001A40             32          LEA     WELCOME, A1
00001012  103C 000E                 33          MOVE.B  #14,    D0
00001016  4E4F                      34          TRAP    #15
00001018  327C 0000                 35          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000101C  103C 0002                 36          MOVE.B  #2,D0
00001020  4E4F                      37          TRAP    #15
00001022  2801                      38          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001024  7000                      39          MOVE.L  #$0, d0  // intitiate counter
00001026  4EB9 00001102             40          JSR     LOOP    // Convert starting address into hex
0000102C  23C5 00001B88             41          MOVE.L  D5, addrStart
00001032  43F9 00001A60             42          LEA     WELCOME2, A1
00001038  103C 000E                 43          MOVE.B  #14,    D0
0000103C  4E4F                      44          TRAP    #15
0000103E  327C 0000                 45          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001042  103C 0002                 46          MOVE.B  #2,D0
00001046  4E4F                      47          TRAP    #15
00001048  4245                      48          CLR     D5       // Clear D5 for exit address
0000104A  1801                      49          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 50          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001102             51          JSR     LOOP    // Convert Ending address int Hex
00001056  23C5 00001B8C             52          MOVE.L  D5, addrEnd
0000105C  4EB9 00001076             53          JSR     CheckRange
00001062                            54          *MOVE.W  #$4655, $6000 // MOVE.L D0, D1, used for testing only
00001062                            55          *LEA     $6000, A6 //testing
00001062  2039 00001B88             56          MOVE.L  addrStart, D0
00001068  2C40                      57          MOVEA.L D0, A6
0000106A  4EB9 00001180             58          JSR     OPCODE
00001070  4EF9 000010B4             59          JMP     END
00001076                            60  
00001076                            61  *==================================================================
00001076                            62  *-----------------Check if the range is above or under the limit
00001076                            63  *------------------Pre: addrStart and addrEnd has begin and end values
00001076                            64          
00001076                            65  CheckRange:
00001076  2C79 00001B88             66          MOVE.L  AddrStart, A6
0000107C  203C 00003000             67          MOVE.L  #LowerLimit, D0
00001082  B08E                      68          CMP.L   A6, D0
00001084  6E00 0996                 69          BGT     PRINTINVALIDADDRESS
00001088  203C 00FFFFFE             70          MOVE.L  #UpperLimit, D0
0000108E  B08E                      71          CMP.L   A6, D0
00001090  6D00 098A                 72          BLT     PRINTINVALIDADDRESS
00001094  2C79 00001B8C             73          MOVE.L  AddrEnd, A6
0000109A  203C 00003000             74          MOVE.L  #LowerLimit, D0
000010A0  B08E                      75          CMP.L   A6, D0
000010A2  6E00 0978                 76          BGT     PRINTINVALIDADDRESS
000010A6  203C 00FFFFFE             77          MOVE.L  #UpperLimit, D0
000010AC  B08E                      78          CMP.L   A6, D0
000010AE  6D00 096C                 79          BLT     PRINTINVALIDADDRESS
000010B2  4E75                      80          RTS
000010B4                            81  
000010B4                            82  END:
000010B4  43F9 00001AE8             83          LEA     TY_Message, A1
000010BA  103C 000E                 84          MOVE.B  #14, D0
000010BE  4E4F                      85          TRAP    #15
000010C0  103C 0009                 86          MOVE.B  #9, D0
000010C4  4E4F                      87          TRAP    #15
000010C6                            88          
000010C6                            89  *Please start from here Annabelle
000010C6                            90  AddrLoop:
000010C6  43F9 00001AE5             91          LEA     PRINT_NEXTLINE, A1
000010CC  103C 000E                 92          MOVE.B  #14, D0
000010D0  4E4F                      93          TRAP    #15
000010D2  2879 00001B8C             94          MOVE.L  addrEnd, A4
000010D8  B9CE                      95          CMP.L   A6, A4
000010DA  6FD8                      96          BLE     END
000010DC  6000 00A2                 97          BRA     OPCODE
000010E0                            98          
000010E0                            99  *===========Check if user wants to continue
000010E0                           100  CHECK_CONT:
000010E0  43F9 00001ACD            101          LEA     Continue_Program, A1
000010E6  103C 000E                102          MOVE.B  #14, D0
000010EA  4E4F                     103          TRAP    #15
000010EC  43F8 0050                104          LEA     YesNoStorage, A1
000010F0  103C 0002                105          MOVE.B  #2, D0
000010F4  4E4F                     106          TRAP    #15
000010F6  0C11 0059                107          CMP.B   #$59, (A1) * Yes
000010FA  6700 FF0A                108          BEQ     GETINPUT
000010FE  4EF8 10B4                109          JMP     END
00001102                           110  LOOP
00001102                           111  
00001102  B880                     112          CMP.L   D0, D4  // Loop until length of word reached
00001104  6E00 0006                113          BGT     CONVERT
00001108  5480                     114          ADD.L   #$2, D0 
0000110A  4E75                     115          RTS 
0000110C                           116  
0000110C                           117  *=================================================================
0000110C                           118  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000110C                           119  *PRE      D4 must contain input length, d0 must be 0
0000110C                           120  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000110C                           121  CONVERT:
0000110C  5280                     122          ADDQ.L  #$1, D0 // increment counter
0000110E  1211                     123          move.b  (A1),D1    // Get next bit from Input
00001110  5289                     124          adda.L  #1, A1      // Increment Input
00001112  0401 0030                125          sub.b   #$30,D1     //
00001116  B23C 0010                126          cmp.b   #$10,D1   // Check if value is larger than 10
0000111A  6E00 000A                127          bgt     CHAR      // Find Hex
0000111E  1401                     128          move.b  D1, D2    // IF it is less than 10
00001120  4EF9 00001156            129          JMP     ADDVAL        
00001126                           130  CHAR:
00001126  B23C 0011                131          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
0000112A  6700 0030                132          BEQ     A
0000112E  B23C 0012                133          CMP.B   #$12, D1
00001132  6700 002E                134          BEQ     B
00001136  B23C 0013                135          CMP.B   #$13, D1
0000113A  6700 002C                136          BEQ     C
0000113E  B23C 0014                137          CMP.B   #$14, D1
00001142  6700 002A                138          BEQ     D
00001146  B23C 0015                139          CMP.B   #$15, D1
0000114A  6700 0028                140          BEQ     E
0000114E  B23C 0016                141          CMP.B   #$16, D1
00001152  6700 0026                142          BEQ     F
00001156                           143  
00001156                           144  ADDVAL:
00001156  E98D                     145          lsl.l    #$4, D5 // Shift based on position
00001158  DA82                     146          add.l    D2, D5 //Add value into Input
0000115A  60A6                     147          BRA      LOOP
0000115C                           148      
0000115C                           149  A:
0000115C  740A                     150          MOVE.L  #$A, D2 
0000115E  4EF8 1156                151          jmp ADDVAL
00001162                           152  B:
00001162  740B                     153          MOVE.L  #$B, D2
00001164  4EF8 1156                154          jmp ADDVAL
00001168                           155  C:
00001168  740C                     156          MOVE.L  #$C, D2
0000116A  4EF8 1156                157          jmp ADDVAL
0000116E                           158  D:
0000116E  740D                     159          MOVE.L  #$D, D2
00001170  4EF8 1156                160          jmp ADDVAL
00001174                           161  E:
00001174  740E                     162          MOVE.L  #$E, D2
00001176  4EF8 1156                163          jmp ADDVAL
0000117A                           164  F:
0000117A  740F                     165          MOVE.L  #$F, D2
0000117C  4EF8 1156                166          jmp ADDVAL
00001180                           167          
00001180                           168  *=======================================================================
00001180                           169  *---------Find the first 4 of instruction and determines the instruction
00001180                           170  OPCODE:
00001180  4280                     171          CLR.L     D0
00001182  4281                     172          CLR.L     D1
00001184  4282                     173          CLR.L     D2
00001186  320E                     174          MOVE.W  A6, D1  * PRINT ADDRESS PER LINE
00001188  143C 0010                175          MOVE.B  #16, D2
0000118C  103C 000F                176          MOVE.B  #15, D0
00001190  4E4F                     177          TRAP    #15
00001192  227C 00000000            178          MOVE.L  #$00000000, A1
00001198  43F9 00001B0D            179          LEA     SPACER, A1
0000119E  103C 000E                180          MOVE.B  #14, D0
000011A2  4E4F                     181          TRAP    #15
000011A4  4280                     182          CLR.L     D0
000011A6  4281                     183          CLR.L     D1
000011A8  4282                     184          CLR.L     D2
000011AA  321E                     185          MOVE.W  (A6)+,D1
000011AC  2401                     186          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
000011AE  E849                     187          LSR.W   #4, D1
000011B0  E849                     188          LSR.W   #4, D1
000011B2  E849                     189          LSR.W   #4, D1  //Right Shift 3 times
000011B4  1001                     190          MOVE.B  D1, D0  // OPCODE FOUND
000011B6  C0FC 0006                191          MULU    #6, D0
000011BA  11C0 1180                192          MOVE.B  D0, OpCode
000011BE  45F9 000011C8            193          LEA     JMPTABLE, A2
000011C4  4EF2 0000                194          JMP     (A2, D0)
000011C8                           195          
000011C8                           196  *========================================================================
000011C8                           197  *--------Jump table used for different opcode!!! Please orgainze well using decimal
000011C8                           198  *------- Add your instructions here
000011C8                           199  JMPTABLE
000011C8  4EF9 0000121C            200          JMP     OP0000
000011CE  4EF9 0000121C            201          JMP     OP0001 *MOVEB
000011D4  4EF9 0000123A            202          JMP     OP0010 *MOVEL
000011DA  4EF9 0000126A            203          JMP     OP0011 *MOVEW
000011E0  4EF9 00001292            204          JMP     OP0100 *NOT
000011E6  4EF9 00001336            205          JMP     OP0101
000011EC  4EF9 00001336            206          JMP     OP0110
000011F2  4EF9 00001336            207          JMP     OP0111
000011F8  4EF9 00001372            208          JMP     OP1000 *OR
000011FE  4EF9 00001336            209          JMP     OP1001 *SUB
00001204  4EF9 000013B6            210          JMP     OP1010
0000120A  4EF9 000013B6            211          JMP     OP1011
00001210  4EF9 000013B6            212          JMP     OP1100 *AND
00001216  4EF9 000013F2            213          JMP     OP1101 *ADD
0000121C                           214  
0000121C                           215  *=====================================================================    
0000121C                           216  *--------------D2 must contain Entire opcode for everything below
0000121C                           217  OP0000:
0000121C                           218  *-> MOVE.B
0000121C                           219  OP0001:
0000121C  13FC 0000 00001B94       220          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001224  43F9 00001B22            221          LEA     MOVEB, A1
0000122A  103C 000E                222          MOVE.B  #14, D0
0000122E  4E4F                     223          TRAP    #15
00001230  4EB9 000015EA            224          JSR     EA * Find SRC EA
00001236  6000 0434                225          BRA     DESTEAFINDER * FIND DEST EA
0000123A                           226  * -> MOVE.L
0000123A                           227  * Printed using MOVEL String as a variable on the very bottom
0000123A                           228  OP0010:
0000123A  13FC 0002 00001B94       229          MOVE.B  #%10, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001242  43F9 00001B1D            230          LEA     MOVE_PRINT, A1
00001248  103C 000E                231          MOVE.B  #14, D0
0000124C  4E4F                     232          TRAP    #15
0000124E  4EB9 000015B8            233          JSR     CHECK_MOVEA
00001254  43F9 00001B32            234          LEA     MOVEL, A1
0000125A  103C 000E                235          MOVE.B  #14, D0
0000125E  4E4F                     236          TRAP    #15
00001260  4EB9 000015EA            237          JSR     EA *Find SRC EA
00001266  6000 0404                238          BRA     DESTEAFINDER *FIND DEST EA
0000126A                           239  * -> MOVE.W
0000126A                           240  OP0011:
0000126A  43F9 00001B1D            241          LEA     MOVE_PRINT, A1
00001270  103C 000E                242          MOVE.B  #14, D0
00001274  4E4F                     243          TRAP    #15
00001276  4EB9 000015B8            244          JSR     CHECK_MOVEA
0000127C  43F9 00001B2E            245          LEA     MOVEW, A1
00001282  103C 000E                246          MOVE.B  #14, D0
00001286  4E4F                     247          TRAP    #15
00001288  4EB9 000015EA            248          JSR     EA * FIND SRC EA
0000128E  6000 03DC                249          BRA     DESTEAFINDER *FIND DEST EA
00001292                           250          
00001292                           251  *-> NOT
00001292                           252  OP0100:
00001292  43F9 00001B83            253          LEA     NOT_OP, A1
00001298  103C 000E                254          MOVE.B  #14, D0
0000129C  4E4F                     255          TRAP    #15
0000129E  E14A                     256          LSL.W   #8, D2
000012A0  1602                     257          MOVE.B  D2, D3 * D3 = SIZE OF INSTRUCTION
000012A2  E04B                     258          LSR.W   #8, D3
000012A4  EC4B                     259          LSR.W   #6, D3
000012A6  3202                     260          MOVE.W  D2, D1 * D1 = EA OPMODE
000012A8  E549                     261          LSL.W   #2, D1
000012AA  E049                     262          LSR.W   #8, D1
000012AC  EA49                     263          LSR.W   #5, D1
000012AE  3002                     264          MOVE.W  D2, D0 * D0 = EA REGISTER
000012B0  EB48                     265          LSL.W   #5, D0
000012B2  E048                     266          LSR.W   #8, D0
000012B4  EA48                     267          LSR.W   #5, D0
000012B6  C6FC 0006                268          MULU    #6, D3 * Multiply for JMPTABLE
000012BA  45F9 000012C4            269          LEA     NOT_JMPTable, A2
000012C0  4EB2 3000                270          JSR     (A2, D3)
000012C4                           271          
000012C4                           272  NOT_JMPTable
000012C4  4EF9 000012DC            273          JMP     NOT_SIZE00
000012CA  4EF9 000012FE            274          JMP     NOT_SIZE01
000012D0  4EF9 00001318            275          JMP     NOT_SIZE10
000012D6  4EF9 00001332            276          JMP     NOT_SIZE11
000012DC                           277  *NOT.B
000012DC                           278  NOT_SIZE00:
000012DC  13FC 0000 00001B94       279          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012E4  1A00                     280          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
000012E6  43F9 00001B2A            281          LEA     SIZE_B, A1
000012EC  103C 000E                282          MOVE.B  #14, D0
000012F0  4E4F                     283          TRAP    #15
000012F2  1005                     284          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000012F4  4EB9 00001608            285          JSR     EACHECKER
000012FA  6000 FDCA                286          BRA     AddrLoop
000012FE                           287  * NOT.W
000012FE                           288  NOT_SIZE01: 
000012FE  1A00                     289          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001300  43F9 00001B15            290          LEA     SIZE_WORD, A1
00001306  103C 000E                291          MOVE.B  #14, D0
0000130A  4E4F                     292          TRAP    #15
0000130C  1005                     293          MOVE.B  D5, D0 * RETURN TEMP STORAGE
0000130E  4EB9 00001608            294          JSR     EACHECKER
00001314  6000 FDB0                295          BRA     AddrLoop
00001318                           296  * NOT.L
00001318                           297  NOT_SIZE10:
00001318  1A00                     298          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
0000131A  43F9 00001B19            299          LEA     SIZE_LONG, A1
00001320  103C 000E                300          MOVE.B  #14, D0
00001324  4E4F                     301          TRAP    #15
00001326  1005                     302          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001328  4EB9 00001608            303          JSR     EACHECKER
0000132E  6000 FD96                304          BRA     AddrLoop
00001332                           305  NOT_SIZE11:
00001332  6000 06C8                306          BRA     PRINTINVALIDEA
00001336                           307  
00001336                           308              
00001336                           309  OP0101:
00001336                           310          
00001336                           311  OP0110:
00001336                           312  OP0111:
00001336                           313          
00001336                           314  
00001336                           315  
00001336                           316  
00001336                           317  * -> SUB
00001336                           318  * Splitting Sub into OPMODE and Register value
00001336                           319  OP1001:
00001336  43F9 00001B74            320          LEA     SUBTRACT, A1
0000133C  103C 000E                321          MOVE.B  #14, D0
00001340  4E4F                     322          TRAP    #15
00001342  E94A                     323          LSL.W   #4, D2
00001344  3602                     324          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001346  E04B                     325          LSR.W   #8, D3 * D3 = D register
00001348  EA4B                     326          LSR.W   #5, D3
0000134A  3802                     327          MOVE.W  D2, D4 *D4 = SubOPMODE
0000134C  E74C                     328          LSL.W   #3, D4
0000134E  E04C                     329          LSR.W   #8, D4
00001350  EA4C                     330          LSR.W   #5, D4
00001352  3202                     331          MOVE.W  D2, D1 * D1 = EA Mode
00001354  ED49                     332          LSL.W   #6, D1
00001356  E049                     333          LSR.W   #8, D1
00001358  EA49                     334          LSR.W   #5, D1
0000135A  3002                     335          MOVE.W  D2, D0 * D0 = EA register
0000135C  E148                     336          LSL.W   #8, D0
0000135E  E348                     337          LSL.W   #1, D0
00001360  E048                     338          LSR.W   #8, D0
00001362  EA48                     339          LSR.W   #5, D0
00001364  45F9 0000142E            340          LEA     SubTable, A2
0000136A  C8FC 0006                341          MULU    #6, D4
0000136E  4EB2 4000                342          JSR     (A2, D4)
00001372                           343  * -> OR
00001372                           344  * Splitting AND into OPMODE and Register value       
00001372                           345  OP1000:
00001372  43F9 00001B80            346          LEA     OR, A1
00001378  103C 000E                347          MOVE.B  #14, D0
0000137C  4E4F                     348          TRAP    #15
0000137E  E94A                     349          LSL.W   #4, D2
00001380  3602                     350          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001382  E04B                     351          LSR.W   #8, D3 * D3 = D register
00001384  EA4B                     352          LSR.W   #5, D3
00001386  3802                     353          MOVE.W  D2, D4 *D4 = SubOPMODE
00001388  E74C                     354          LSL.W   #3, D4
0000138A  E04C                     355          LSR.W   #8, D4
0000138C  EA4C                     356          LSR.W   #5, D4
0000138E  3202                     357          MOVE.W  D2, D1 * D1 = EA Mode
00001390  ED49                     358          LSL.W   #6, D1
00001392  E049                     359          LSR.W   #8, D1
00001394  EA49                     360          LSR.W   #5, D1
00001396  B23C 0001                361          CMP.B   #%0001, D1
0000139A  6700 0660                362          BEQ     PRINTINVALIDEA
0000139E  3002                     363          MOVE.W  D2, D0 * D0 = EA register
000013A0  E148                     364          LSL.W   #8, D0
000013A2  E348                     365          LSL.W   #1, D0
000013A4  E048                     366          LSR.W   #8, D0
000013A6  EA48                     367          LSR.W   #5, D0
000013A8  45F9 0000142E            368          LEA     SubTable, A2
000013AE  C8FC 0006                369          MULU    #6, D4
000013B2  4EB2 4000                370          JSR     (A2, D4)
000013B6                           371  OP1010
000013B6                           372  OP1011
000013B6                           373  * -> AND
000013B6                           374  * Splitting AND into OPMODE and Register value
000013B6                           375  OP1100
000013B6  43F9 00001B7C            376          LEA     AND, A1
000013BC  103C 000E                377          MOVE.B  #14, D0
000013C0  4E4F                     378          TRAP    #15
000013C2  E94A                     379          LSL.W   #4, D2
000013C4  3602                     380          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000013C6  E04B                     381          LSR.W   #8, D3 * D3 = D register
000013C8  EA4B                     382          LSR.W   #5, D3
000013CA  3802                     383          MOVE.W  D2, D4 *D4 = SubOPMODE
000013CC  E74C                     384          LSL.W   #3, D4
000013CE  E04C                     385          LSR.W   #8, D4
000013D0  EA4C                     386          LSR.W   #5, D4
000013D2  3202                     387          MOVE.W  D2, D1 * D1 = EA Mode
000013D4  ED49                     388          LSL.W   #6, D1
000013D6  E049                     389          LSR.W   #8, D1
000013D8  EA49                     390          LSR.W   #5, D1
000013DA  3002                     391          MOVE.W  D2, D0 * D0 = EA register
000013DC  E148                     392          LSL.W   #8, D0
000013DE  E348                     393          LSL.W   #1, D0
000013E0  E048                     394          LSR.W   #8, D0
000013E2  EA48                     395          LSR.W   #5, D0
000013E4  45F9 0000142E            396          LEA     SubTable, A2
000013EA  C8FC 0006                397          MULU    #6, D4
000013EE  4EB2 4000                398          JSR     (A2, D4)
000013F2                           399          
000013F2                           400  * -> ADD
000013F2                           401  * Spltting Add into OPMODE and Register Value
000013F2                           402  OP1101:
000013F2  43F9 00001B78            403          LEA     ADDITION, A1
000013F8  103C 000E                404          MOVE.B  #14, D0
000013FC  4E4F                     405          TRAP    #15
000013FE  E94A                     406          LSL.W   #4, D2
00001400  3602                     407          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001402  E04B                     408          LSR.W   #8, D3 * D3 = D register
00001404  EA4B                     409          LSR.W   #5, D3
00001406  3802                     410          MOVE.W  D2, D4 *D4 = SubOPMODE
00001408  E74C                     411          LSL.W   #3, D4
0000140A  E04C                     412          LSR.W   #8, D4
0000140C  EA4C                     413          LSR.W   #5, D4
0000140E  3202                     414          MOVE.W  D2, D1 * D1 = EA Mode
00001410  ED49                     415          LSL.W   #6, D1
00001412  E049                     416          LSR.W   #8, D1
00001414  EA49                     417          LSR.W   #5, D1
00001416  3002                     418          MOVE.W  D2, D0 * D0 = EA register
00001418  E148                     419          LSL.W   #8, D0
0000141A  E348                     420          LSL.W   #1, D0
0000141C  E048                     421          LSR.W   #8, D0
0000141E  EA48                     422          LSR.W   #5, D0
00001420  45F9 0000142E            423          LEA     SubTable, A2
00001426  C8FC 0006                424          MULU    #6, D4
0000142A  4EB2 4000                425          JSR     (A2, D4)
0000142E                           426          
0000142E                           427  * =============================================
0000142E                           428  * JMP Table for SUB OPMODES
0000142E                           429  SubTable:
0000142E  4EF9 0000145E            430          JMP     OPMODE000 * BYTE  EA->DN
00001434  4EF9 00001478            431          JMP     OPMODE001 * WORD  RA->DN  
0000143A  4EF9 0000148A            432          JMP     OPMODE010 * LONG  EA->DN 
00001440  4EF9 0000149C            433          JMP     OPMODE011 * ADDA  WORD
00001446  4EF9 000014CA            434          JMP     OPMODE100 * BYTE  DN->EA
0000144C  4EF9 000014E2            435          JMP     OPMODE101 * BYTE  DN->EA
00001452  4EF9 000014FA            436          JMP     OPMODE110 * BYTE  DN->EA
00001458  4EF9 00001512            437          JMP     OPMODE111 * ADDA  LONG
0000145E                           438          
0000145E                           439  OPMODE000:
0000145E  13FC 0000 00001B94       440          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001466  1A00                     441          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001468  43F9 00001B11            442          LEA     SIZE_BYTE, A1
0000146E  103C 000E                443          MOVE.B  #14, D0
00001472  4E4F                     444          TRAP    #15
00001474  6000 00DC                445          BRA     Sub_OPMODE_FIRST
00001478                           446  OPMODE001
00001478  1A00                     447          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000147A  43F9 00001B15            448          LEA     SIZE_Word, A1
00001480  103C 000E                449          MOVE.B  #14, D0
00001484  4E4F                     450          TRAP    #15
00001486  6000 00CA                451          BRA     Sub_OPMODE_FIRST
0000148A                           452  OPMODE010
0000148A  1A00                     453          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000148C  43F9 00001B19            454          LEA     SIZE_Long, A1
00001492  103C 000E                455          MOVE.B  #14, D0
00001496  4E4F                     456          TRAP    #15
00001498  6000 00B8                457          BRA     Sub_OPMODE_FIRST
0000149C                           458  *===============================================
0000149C                           459  *Special OPMODE can only be used by ADD
0000149C                           460  OPMODE011
0000149C  0C38 000D 1180           461          CMP.B   #%1101, OpCode
000014A2  6700 0008                462          BEQ     Special_OPMODE_USED
000014A6  4EF9 000019FC            463          JMP     PRINTINVALIDEA
000014AC                           464  Special_OPMODE_USED:
000014AC  1A00                     465          MOVE.B  D0, D5
000014AE  43F9 00001B36            466          LEA     MOVEA, A1
000014B4  103C 000E                467          MOVE.B  #14, D0
000014B8  4E4F                     468          TRAP    #15
000014BA  43F9 00001B15            469          LEA     SIZE_WORD, A1
000014C0  103C 000E                470          MOVE.B  #14, D0
000014C4  4E4F                     471          TRAP    #15
000014C6  6000 00CE                472          BRA     Sub_OPMODE_ADDA
000014CA                           473  OPMODE100
000014CA  1A00                     474          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014CC  43F9 00001B11            475          LEA     SIZE_BYTE, A1
000014D2  103C 000E                476          MOVE.B  #14, D0
000014D6  4E4F                     477          TRAP    #15
000014D8  4EB9 00001540            478          JSR     Memory_Alterable_Check
000014DE  6000 0090                479          BRA     Sub_OPMODE_SECOND
000014E2                           480  OPMODE101
000014E2  1A00                     481          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014E4  43F9 00001B15            482          LEA     SIZE_Word, A1
000014EA  103C 000E                483          MOVE.B  #14, D0
000014EE  4E4F                     484          TRAP    #15
000014F0  4EB9 00001540            485          JSR     Memory_Alterable_Check
000014F6  6000 0078                486          BRA     Sub_OPMODE_SECOND
000014FA                           487  OPMODE110
000014FA  1A00                     488          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014FC  43F9 00001B19            489          LEA     SIZE_LONG, A1
00001502  103C 000E                490          MOVE.B  #14, D0
00001506  4E4F                     491          TRAP    #15
00001508  4EB9 00001540            492          JSR     Memory_Alterable_Check
0000150E  6000 0060                493          BRA     Sub_OPMODE_SECOND
00001512                           494  OPMODE111:
00001512  0C38 000D 1180           495          CMP.B   #%1101, OpCode
00001518  6700 0008                496          BEQ     Special_OPMODE_USED2
0000151C  4EF9 000019FC            497          JMP     PRINTINVALIDEA
00001522                           498  Special_OPMODE_USED2:
00001522  1A00                     499          MOVE.B  D0, D5
00001524  43F9 00001B36            500          LEA     MOVEA, A1
0000152A  103C 000E                501          MOVE.B  #14, D0
0000152E  4E4F                     502          TRAP    #15
00001530  43F9 00001B19            503          LEA     SIZE_LONG, A1
00001536  103C 000E                504          MOVE.B  #14, D0
0000153A  4E4F                     505          TRAP    #15
0000153C  6000 0058                506          BRA     Sub_OPMODE_ADDA
00001540                           507  *===================================================
00001540                           508  * USED FOR SUB AND OR, check if dest EA is memory Alterable
00001540                           509  
00001540                           510  Memory_Alterable_Check:
00001540  B23C 0000                511          CMP.B   #%000, D1
00001544  6700 04B6                512          BEQ     PRINTINVALIDEA
00001548  B23C 0001                513          CMP.B   #%001, D1
0000154C  6700 04AE                514          BEQ     PRINTINVALIDEA
00001550  4E75                     515          RTS
00001552                           516          
00001552                           517  *===============================================
00001552                           518  * Used for Dn->EA for SUB
00001552                           519  * Called by 001, 010, 100, 
00001552                           520  Sub_OPMODE_FIRST:
00001552  1005                     521          MOVE.B  D5, D0   * TEMP RETURN D0
00001554  4EB9 00001608            522          JSR     EACHECKER 
0000155A  4280                     523          CLR.L     D0
0000155C  4281                     524          CLR.L     D1
0000155E  4EB9 000019EE            525          JSR     PRINTCOMMA
00001564  1003                     526          MOVE.B  D3, D0
00001566  4EB9 0000163E            527          JSR     DestEAChecker 
0000156C  6000 FB58                528          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001570                           529  *===============================================
00001570                           530  * Used for Dn->EA for SUB
00001570                           531  * Called by 100, 101, 110 
00001570                           532  Sub_OPMODE_SECOND:
00001570  1801                     533          MOVE.B  D1, D4   *TEMP STORE D1
00001572  4280                     534          CLR.L     D0  *Clean D0
00001574  1003                     535          MOVE.B  D3, D0
00001576  4281                     536          CLR.L     D1
00001578  4EB9 00001608            537          JSR     EACHECKER 
0000157E  4280                     538          CLR.L     D0
00001580  4281                     539          CLR.L     D1
00001582  4EB9 000019EE            540          JSR     PRINTCOMMA
00001588  1005                     541          MOVE.B  D5, D0   * TEMP RETURN D0
0000158A  1204                     542          MOVE.B  D4, D1   * TEMP RETURN D1
0000158C  4EB9 0000163E            543          JSR     DestEAChecker 
00001592  6000 FB32                544          BRA     addrloop *EA FINISHED-----
00001596                           545  *===============================================
00001596                           546  * Used for Dn->EA for SUB
00001596                           547  * Called by 011, 111
00001596                           548  Sub_OPMODE_ADDA:
00001596  1005                     549          MOVE.B  D5, D0   * TEMP RETURN D0
00001598  4EB9 00001608            550          JSR     EACHECKER 
0000159E  4240                     551          CLR     D0
000015A0  4241                     552          CLR     D1
000015A2  4EB9 000019EE            553          JSR     PRINTCOMMA
000015A8  1003                     554          MOVE.B  D3, D0
000015AA  123C 0001                555          MOVE.B  #%001, D1
000015AE  4EB9 0000163E            556          JSR     DestEAChecker 
000015B4  6000 FB10                557          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
000015B8                           558          
000015B8                           559  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
000015B8                           560  CHECK_MOVEA
000015B8  2602                     561          MOVE.L  D2, D3  * HOlding D2 in D3 temp
000015BA  E18A                     562          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000015BC  E18A                     563          LSL.L   #8, D2
000015BE  E98A                     564          LSL.L   #4, D2
000015C0  E08A                     565          LSR.L   #8, D2
000015C2  E08A                     566          LSR.L   #8, D2
000015C4  E88A                     567          LSR.L   #4, D2 // 12 bits of opperand found
000015C6  EC8A                     568          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
000015C8  1202                     569          MOVE.B  D2, D1 * Prepare D1 for Mode
000015CA  EB09                     570          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000015CC  EA09                     571          LSR.B   #5, D1
000015CE  B23C 0001                572          CMP.B   #%001, D1
000015D2  6700 0006                573          BEQ     PRINTA
000015D6  2403                     574          MOVE.L  D3, D2 
000015D8  4E75                     575          RTS * Goes back to OP Value
000015DA                           576          
000015DA                           577  PRINTA
000015DA  43F9 00001B36            578          LEA     MOVEA, A1
000015E0  103C 000E                579          MOVE.B  #14, D0
000015E4  4E4F                     580          TRAP    #15
000015E6  2403                     581          MOVE.L  D3, D2
000015E8  4E75                     582          RTS * Goes back to CHECK_MOVEA
000015EA                           583          
000015EA                           584          
000015EA                           585  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
000015EA                           586  *=================================================================
000015EA                           587  *-----------EA-- Calculate EA used for Data Registers
000015EA                           588  *----------Pre: D2, D0, D1 must be clear
000015EA                           589  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
000015EA                           590  EA:
000015EA  4280                     591          CLR.L     D0  * Clear D0 and D1 so they don't conflict
000015EC  4281                     592          CLR.L     D1
000015EE  4283                     593          CLR.L     D3
000015F0  E18A                     594          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000015F2  E18A                     595          LSL.L   #8, D2
000015F4  E98A                     596          LSL.L   #4, D2
000015F6  E08A                     597          LSR.L   #8, D2
000015F8  E08A                     598          LSR.L   #8, D2
000015FA  E88A                     599          LSR.L   #4, D2 // 12 bits of opperand found
000015FC  1002                     600          MOVE.B  D2, D0 Source Data Register
000015FE  EB08                     601          LSL.B   #5, D0
00001600  EA08                     602          LSR.B   #5, D0
00001602  1202                     603          MOVE.B  D2, D1 *Source Data Mode
00001604  E509                     604          LSL.B   #2, D1
00001606  EA09                     605          LSR.B   #5, D1
00001608                           606          
00001608                           607  *=================================================
00001608                           608  *-----------EA CHECKER------Continues from EA
00001608                           609  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001608                           610  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
00001608                           611  EACHECKER: 
00001608  B23C 0000                612          CMP.B   #%0000, D1
0000160C  6700 007E                613          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001610  B23C 0001                614          CMP.B   #%0001, D1
00001614  6700 0096                615          BEQ     JMPTO_SRC_ADDR_REG
00001618  B23C 0002                616          CMP.B   #%0010, D1
0000161C  6700 00AE                617          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001620  B23C 0003                618          CMP.B   #%0011, D1
00001624  6700 00A6                619          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001628  B23C 0004                620          CMP.B   #%0100, D1
0000162C  6700 009E                621          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001630  B23C 0007                622          CMP.B   #%0111, D1
00001634  6700 0196                623          BEQ     JMPTO_SRC_IMMEDIATE
00001638  4EF9 000019FC            624          JMP     PRINTINVALIDEA
0000163E                           625          
0000163E                           626  *=================================================
0000163E                           627  *-----------DEST EA CHECKER------Continues from EA
0000163E                           628  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
0000163E                           629  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
0000163E                           630  DESTEACHECKER:
0000163E  B23C 0000                631          CMP.B   #%0000, D1
00001642  6700 0058                632          BEQ     JMPTODestREG *JUMPS TO Source D registers
00001646  B23C 0001                633          CMP.B   #%0001, D1
0000164A  6700 0070                634          BEQ     JMPTO_DEST_ADDR_REG
0000164E  B23C 0002                635          CMP.B   #%0010, D1
00001652  6700 00B4                636          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001656  B23C 0003                637          CMP.B   #%0011, D1
0000165A  6700 00AC                638          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000165E  B23C 0004                639          CMP.B   #%0100, D1
00001662  6700 00A4                640          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001666  4EF9 000019FC            641          JMP     PRINTINVALIDEA
0000166C                           642          
0000166C                           643  *=================================================      
0000166C                           644  * Dest EA Finder
0000166C                           645  * PRE: ONLY USED FOR MOVE
0000166C                           646  * POST: PRINTS DEST EA  
0000166C                           647  DestEAFinder:
0000166C  4EB9 000019EE            648          JSR     PRINTCOMMA  * Prints comma between two operrands
00001672  EC8A                     649          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001674  4241                     650          CLR     D1     * Clear D1 and D0 for opperand mode and register
00001676  4240                     651          CLR     D0
00001678  1202                     652          MOVE.B  D2, D1 * Prepare D1 for Mode
0000167A  EB09                     653          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
0000167C  EA09                     654          LSR.B   #5, D1
0000167E  1002                     655          MOVE.B  D2, D0  *Prepare D0 for Register
00001680  E508                     656          LSL.B   #2, D0
00001682  EA08                     657          LSR.B   #5, D0
00001684  4EB8 163E                658          JSR     DESTEACHECKER
00001688  4EF8 10C6                659          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
0000168C                           660  
0000168C                           661          
0000168C                           662  *===================================================
0000168C                           663  *-------------Data Register checker------------------        
0000168C                           664  JMPTOSRCREG:
0000168C  43F9 000018A2            665          LEA     DATAREGTABLE, A1
00001692  C0FC 0006                666          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001696  4EB1 0000                667          JSR     (A1, D0) *JMP To index A1 + D0
0000169A                           668          * EA CONTINUES HERE
0000169A  4E75                     669          RTS * BRA DESTEAFINDER DELETED
0000169C                           670  JMPToDestReg: *PRINT OUT DEST Registers
0000169C  43F9 000018A2            671          LEA     DATAREGTABLE, A1
000016A2  C0FC 0006                672          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000016A6  4EB1 0000                673          JSR     (A1, D0) *JMP to A1 + D0
000016AA  4E75                     674          RTS    * Goes Back to DestEAFinder
000016AC                           675          
000016AC                           676  
000016AC                           677  *===================================================
000016AC                           678  *-------------Address Register checker------------------             
000016AC                           679  JMPTO_SRC_ADDR_REG:
000016AC  43F9 000018D2            680          LEA     AddrREGTABLE, A1
000016B2  C0FC 0006                681          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000016B6  4EB1 0000                682          JSR     (A1, D0) *JMP To index A1 + D0
000016BA                           683          * EA CONTINUES HERE
000016BA  4E75                     684          RTS * BRA DESTEAFINDER DELETED
000016BC                           685  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
000016BC  43F9 000018D2            686          LEA     AddrREGTABLE, A1
000016C2  C0FC 0006                687          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000016C6  4EB1 0000                688          JSR     (A1, D0) *JMP to A1 + D0
000016CA  4E75                     689          RTS     * Goes Back to DESTEAFinder
000016CC                           690          
000016CC                           691  *===================================================
000016CC                           692  *-------------Indirect Address Register checker------------------
000016CC                           693  *Copied from Address Register checker, basically adding parenthesis () around Address register
000016CC                           694  * Also Detects ()+ and -()
000016CC                           695  * PRE: D1 stores mode, D0 stores register #
000016CC                           696  * D1 to D5 are off limits
000016CC                           697  JMPTO_SRC_INDR_ADDR_REG:
000016CC  1A00                     698         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
000016CE  B23C 0004                699         CMP.B    #%100, D1       * IF IT IS -()
000016D2  6700 007E                700         BEQ      PRE_DECREMENT_SRC
000016D6  43F9 00001B68            701         LEA      INDR_LEFT, A1
000016DC  103C 000E                702         MOVE.B   #14, D0
000016E0  4E4F                     703         TRAP     #15
000016E2  1005                     704         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000016E4  43F9 000018D2            705         LEA     AddrREGTABLE, A1
000016EA  C0FC 0006                706         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000016EE  4EB1 0000                707         JSR     (A1, D0) *JMP To index A1 + D0
000016F2  43F9 00001B6A            708         LEA      INDR_RIGHT, A1
000016F8  103C 000E                709         MOVE.B   #14, D0
000016FC  4E4F                     710         TRAP     #15
000016FE  B23C 0003                711         CMP.B    #%0011, D1 * IF IT IS ()+
00001702  6700 0040                712         BEQ      POST_INCREMENT_SRC
00001706  4E75                     713         RTS * BRA DESTEAFINDER DELETED
00001708                           714         
00001708                           715  JMPTO_DEST_INDR_ADDR_REG:
00001708  1600                     716         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
0000170A  B23C 0004                717         CMP.B    #%100, D1
0000170E  6700 0086                718         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00001712  43F9 00001B68            719         LEA      INDR_LEFT, A1
00001718  103C 000E                720         MOVE.B   #14, D0
0000171C  4E4F                     721         TRAP     #15
0000171E  1003                     722         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001720  43F9 000018D2            723         LEA     AddrREGTABLE, A1
00001726  C0FC 0006                724         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000172A  4EB1 0000                725         JSR     (A1, D0) *JMP To index A1 + D0
0000172E  43F9 00001B6A            726         LEA      INDR_RIGHT, A1
00001734  103C 000E                727         MOVE.B   #14, D0
00001738  4E4F                     728         TRAP     #15
0000173A  B23C 0003                729         CMP.B    #%0011, D1  // IF IT IS ()+
0000173E  6700 0048                730         BEQ      POST_INCREMENT_DEST
00001742  4E75                     731         RTS      * Goes Back to DestEAFinder
00001744                           732         
00001744                           733  POST_INCREMENT_SRC:
00001744  43F9 00001B6C            734         LEA      POST_INCRE, A1
0000174A  103C 000E                735         MOVE.B   #14, D0
0000174E  4E4F                     736         TRAP     #15
00001750  4E75                     737         RTS * BRA DESTEAFINDER DELETED
00001752                           738         
00001752                           739  PRE_DECREMENT_SRC:
00001752  43F9 00001B6E            740         LEA      PRE_DECRE, A1
00001758  103C 000E                741         MOVE.B   #14, D0
0000175C  4E4F                     742         TRAP     #15
0000175E  43F9 00001B68            743         LEA      INDR_LEFT, A1
00001764  103C 000E                744         MOVE.B   #14, D0
00001768  4E4F                     745         TRAP     #15
0000176A  1005                     746         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
0000176C  43F9 000018D2            747         LEA     AddrREGTABLE, A1
00001772  C0FC 0006                748         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001776  4EB1 0000                749         JSR     (A1, D0) *JMP To index A1 + D0
0000177A  43F9 00001B6A            750         LEA      INDR_RIGHT, A1
00001780  103C 000E                751         MOVE.B   #14, D0
00001784  4E4F                     752         TRAP     #15
00001786  4E75                     753         RTS * BRA DESTEAFINDER DELETED
00001788                           754  
00001788                           755  POST_INCREMENT_DEST
00001788  43F9 00001B6C            756         LEA      POST_INCRE, A1
0000178E  103C 000E                757         MOVE.B   #14, D0
00001792  4E4F                     758         TRAP     #15
00001794  4E75                     759         RTS      * Goes Back to DestEAFinder
00001796                           760         
00001796                           761  PRE_DECREMENT_DEST:
00001796  43F9 00001B6E            762         LEA      PRE_DECRE, A1
0000179C  103C 000E                763         MOVE.B   #14, D0
000017A0  4E4F                     764         TRAP     #15
000017A2  43F9 00001B68            765         LEA      INDR_LEFT, A1
000017A8  103C 000E                766         MOVE.B   #14, D0
000017AC  4E4F                     767         TRAP     #15
000017AE  1005                     768         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000017B0  43F9 000018D2            769         LEA     AddrREGTABLE, A1
000017B6  C0FC 0006                770         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000017BA  4EB1 0000                771         JSR     (A1, D0) *JMP To index A1 + D0
000017BE  43F9 00001B6A            772         LEA      INDR_RIGHT, A1
000017C4  103C 000E                773         MOVE.B   #14, D0
000017C8  4E4F                     774         TRAP     #15
000017CA  4E75                     775         RTS      * Goes Back to DestEAFinder
000017CC                           776         
000017CC                           777  JMPTO_SRC_IMMEDIATE:
000017CC  B03C 0000                778         CMP.B    #%000, D0
000017D0  6700 002E                779         BEQ      Address_W
000017D4  B03C 0001                780         CMP.B    #%001, D0
000017D8  6700 0044                781         BEQ      Address_L
000017DC  B03C 0004                782         CMP.B    #%100, D0
000017E0  6700 005A                783         BEQ      Address_Immediate
000017E4  4EF9 000019FC            784         JMP      PRINTINVALIDEA
000017EA                           785  *===================================  
000017EA                           786  * Same as SRC but without Immediate address     
000017EA                           787  JMPTO_DEST_IMMEDIATE:
000017EA  B03C 0000                788         CMP.B    #%000, D0
000017EE  6700 0010                789         BEQ      Address_W
000017F2  B03C 0001                790         CMP.B    #%001, D0
000017F6  6700 0026                791         BEQ      Address_L
000017FA  4EF9 000019FC            792         JMP      PRINTINVALIDEA
00001800                           793         
00001800                           794  Address_W:
00001800  43F9 00001B70            795          LEA     DOLLAR_SIGN, A1
00001806  103C 000E                796          MOVE.B  #14, D0
0000180A  4E4F                     797          TRAP    #15
0000180C  4241                     798          CLR     D1
0000180E  4240                     799          CLR     D0
00001810  321E                     800          MOVE.W  (A6)+, D1
00001812  143C 0010                801          MOVE.B  #16, D2
00001816  103C 000F                802          MOVE.B  #15, D0
0000181A  4E4F                     803          TRAP    #15 
0000181C  4E75                     804          RTS 
0000181E                           805  
0000181E                           806  Address_L
0000181E  43F9 00001B70            807          LEA     DOLLAR_SIGN, A1
00001824  103C 000E                808          MOVE.B  #14, D0
00001828  4E4F                     809          TRAP    #15
0000182A  4241                     810          CLR     D1
0000182C  4240                     811          CLR     D0
0000182E  221E                     812          MOVE.L  (A6)+, D1
00001830  143C 0010                813          MOVE.B  #16, D2
00001834  103C 000F                814          MOVE.B  #15, D0
00001838  4E4F                     815          TRAP    #15
0000183A  4E75                     816          RTS  
0000183C                           817          
0000183C                           818  Address_Immediate:
0000183C  43F9 00001B72            819          LEA     POUND_SIGN, A1
00001842  103C 000E                820          MOVE.B  #14, D0
00001846  4E4F                     821          TRAP    #15
00001848  43F9 00001B70            822          LEA     DOLLAR_SIGN, A1
0000184E  103C 000E                823          MOVE.B  #14, D0
00001852  4E4F                     824          TRAP    #15
00001854  0C39 0000 00001B94       825          CMP.B   #%00, OpCodeSize
0000185C  6700 001A                826          BEQ     Immediate_B
00001860  0C39 0003 00001B94       827          CMP.B   #%11, OpCodeSize
00001868  6700 001C                828          BEQ     Immediate_W
0000186C  0C39 0002 00001B94       829          CMP.B   #%10, OpCOdeSize
00001874  6700 001E                830          BEQ     Immediate_L
00001878                           831          
00001878                           832  Immediate_B:
00001878  121E                     833          MOVE.B  (A6)+, D1
0000187A  143C 0010                834          MOVE.B  #16, D2
0000187E  103C 000F                835          MOVE.B  #15, D0
00001882  4E4F                     836          TRAP    #15
00001884  4E75                     837          RTS
00001886                           838          
00001886                           839  Immediate_W:
00001886  321E                     840          MOVE.W  (A6)+, D1
00001888  143C 0010                841          MOVE.B  #16, D2
0000188C  103C 000F                842          MOVE.B  #15, D0
00001890  4E4F                     843          TRAP    #15
00001892  4E75                     844          RTS
00001894                           845          
00001894                           846  Immediate_L:
00001894  221E                     847          MOVE.L  (A6)+, D1
00001896  143C 0010                848          MOVE.B  #16, D2
0000189A  103C 000F                849          MOVE.B  #15, D0
0000189E  4E4F                     850          TRAP    #15
000018A0  4E75                     851          RTS
000018A2                           852  
000018A2                           853          
000018A2                           854  
000018A2                           855  *=================================================================
000018A2                           856  *---------Data Register Table used for printing out Registers----
000018A2                           857  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
000018A2                           858  DataRegTable
000018A2  4EF9 00001902            859          JMP REG_D0
000018A8  4EF9 00001916            860          JMP REG_D1
000018AE  4EF9 00001924            861          JMP REG_D2
000018B4  4EF9 00001932            862          JMP REG_D3
000018BA  4EF9 00001940            863          JMP REG_D4
000018C0  4EF9 0000194E            864          JMP REG_D5
000018C6  4EF9 0000195C            865          JMP REG_D6
000018CC  4EF9 0000196A            866          JMP REG_D7
000018D2                           867  
000018D2                           868  AddrRegTable:
000018D2                           869          
000018D2  4EF9 00001978            870          JMP REG_A0
000018D8  4EF9 0000198C            871          JMP REG_A1
000018DE  4EF9 0000199A            872          JMP REG_A2
000018E4  4EF9 000019A8            873          JMP REG_A3
000018EA  4EF9 000019B6            874          JMP REG_A4
000018F0  4EF9 000019C4            875          JMP REG_A5
000018F6  4EF9 000019D2            876          JMP REG_A6
000018FC  4EF9 000019E0            877          JMP REG_A7
00001902                           878  
00001902                           879  * Data Registers Printing        
00001902                           880  REG_D0:
00001902  227C 00000000            881          MOVEA.L #$0, A1
00001908  43F9 00001B38            882          LEA     DREG0, A1
0000190E  103C 000E                883          MOVE.B  #14, D0
00001912  4E4F                     884          TRAP    #15
00001914  4E75                     885          RTS
00001916                           886          
00001916                           887  REG_D1:
00001916  43F9 00001B3B            888          LEA     DREG1, A1
0000191C  103C 000E                889          MOVE.B  #14, D0
00001920  4E4F                     890          TRAP    #15
00001922  4E75                     891          RTS
00001924                           892  REG_D2:
00001924  43F9 00001B3E            893          LEA     DREG2, A1
0000192A  103C 000E                894          MOVE.B  #14, D0
0000192E  4E4F                     895          TRAP    #15
00001930  4E75                     896          RTS
00001932                           897  REG_D3:
00001932  43F9 00001B41            898          LEA     DREG3, A1
00001938  103C 000E                899          MOVE.B  #14, D0
0000193C  4E4F                     900          TRAP    #15
0000193E  4E75                     901          RTS
00001940                           902  REG_D4:
00001940  43F9 00001B44            903          LEA     DREG4, A1
00001946  103C 000E                904          MOVE.B  #14, D0
0000194A  4E4F                     905          TRAP    #15
0000194C  4E75                     906          RTS
0000194E                           907  REG_D5:
0000194E  43F9 00001B47            908          LEA     DREG5, A1
00001954  103C 000E                909          MOVE.B  #14, D0
00001958  4E4F                     910          TRAP    #15
0000195A  4E75                     911          RTS
0000195C                           912  REG_D6:
0000195C  43F9 00001B4A            913          LEA     DREG6, A1
00001962  103C 000E                914          MOVE.B  #14, D0
00001966  4E4F                     915          TRAP    #15
00001968  4E75                     916          RTS
0000196A                           917  REG_D7:
0000196A  43F9 00001B4D            918          LEA     DREG7, A1
00001970  103C 000E                919          MOVE.B  #14, D0
00001974  4E4F                     920          TRAP    #15
00001976  4E75                     921          RTS
00001978                           922          
00001978                           923  *--------------------Addr Reigster printing ------------------------*        
00001978                           924  REG_A0:
00001978  227C 00000000            925          MOVEA.L #$0, A1
0000197E  43F9 00001B50            926          LEA     AREG0, A1
00001984  103C 000E                927          MOVE.B  #14, D0
00001988  4E4F                     928          TRAP    #15
0000198A  4E75                     929          RTS
0000198C                           930          
0000198C                           931  REG_A1:
0000198C  43F9 00001B53            932          LEA     AREG1, A1
00001992  103C 000E                933          MOVE.B  #14, D0
00001996  4E4F                     934          TRAP    #15
00001998  4E75                     935          RTS
0000199A                           936  REG_A2:
0000199A  43F9 00001B56            937          LEA     AREG2, A1
000019A0  103C 000E                938          MOVE.B  #14, D0
000019A4  4E4F                     939          TRAP    #15
000019A6  4E75                     940          RTS
000019A8                           941  REG_A3:
000019A8  43F9 00001B59            942          LEA     AREG3, A1
000019AE  103C 000E                943          MOVE.B  #14, D0
000019B2  4E4F                     944          TRAP    #15
000019B4  4E75                     945          RTS
000019B6                           946  REG_A4:
000019B6  43F9 00001B5C            947          LEA     AREG4, A1
000019BC  103C 000E                948          MOVE.B  #14, D0
000019C0  4E4F                     949          TRAP    #15
000019C2  4E75                     950          RTS
000019C4                           951  REG_A5:
000019C4  43F9 00001B5F            952          LEA     AREG5, A1
000019CA  103C 000E                953          MOVE.B  #14, D0
000019CE  4E4F                     954          TRAP    #15
000019D0  4E75                     955          RTS
000019D2                           956  REG_A6:
000019D2  43F9 00001B62            957          LEA     AREG6, A1
000019D8  103C 000E                958          MOVE.B  #14, D0
000019DC  4E4F                     959          TRAP    #15
000019DE  4E75                     960          RTS
000019E0                           961  REG_A7:
000019E0  43F9 00001B65            962          LEA     AREG7, A1
000019E6  103C 000E                963          MOVE.B  #14, D0
000019EA  4E4F                     964          TRAP    #15
000019EC  4E75                     965          RTS
000019EE                           966          
000019EE                           967  *====================================================PRinting/ ERROR method comes down here=========================================
000019EE                           968  PRINTCOMMA: * Prints comma between two operrands
000019EE  43F9 00001B0A            969          LEA     COMMA, A1
000019F4  103C 000E                970          MOVE.B  #14, D0
000019F8  4E4F                     971          TRAP    #15
000019FA  4E75                     972          RTS
000019FC                           973          
000019FC                           974  PrintInvalidEA:
000019FC  43F9 00001A7E            975          LEA     Invalid_EA_Addr, A1
00001A02  103C 000E                976          MOVE.B  #14, D0
00001A06  4E4F                     977          TRAP    #15
00001A08  4EF8 10C6                978          JMP     AddrLoop
00001A0C                           979          
00001A0C                           980  PrintInvalidSUB:
00001A0C  43F9 00001A94            981          LEA     Invalid_EA_SUB, A1
00001A12  103C 000E                982          MOVE.B  #14, D0
00001A16  4E4F                     983          TRAP    #15
00001A18  4EF8 10C6                984          JMP     AddrLoop
00001A1C                           985          
00001A1C                           986  PrintInvalidAddress:
00001A1C  43F9 00001AB2            987          LEA     Invalid_Address, A1
00001A22  103C 000E                988          MOVE.B  #14, D0
00001A26  4E4F                     989          TRAP    #15
00001A28  4EF8 10C6                990          JMP     AddrLoop
00001A2C                           991          
00001A2C                           992           
00001A2C                           993  * Clear all registers    
00001A2C                           994  CLRREG:
00001A2C  4280                     995      CLR.L D0
00001A2E  4281                     996      CLR.L D1
00001A30  4282                     997      CLR.L D2
00001A32  4283                     998      CLR.L D3
00001A34  4284                     999      CLR.L D4
00001A36  4285                    1000      CLR.L D5
00001A38  4286                    1001      CLR.L D6
00001A3A  4E75                    1002      RTS
00001A3C                          1003      
00001A3C                          1004      
00001A3C                          1005          
00001A3C                          1006  * Put program code here
00001A3C                          1007  
00001A3C  FFFF FFFF               1008      SIMHALT             ; halt simulator
00001A40                          1009  
00001A40                          1010  * Put variables and constants here
00001A40  =0000000D               1011  CR  EQU $0D
00001A40  =0000000A               1012  LF  EQU $0A
00001A40= 50 6C 65 61 73 65 ...   1013  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
00001A60= 50 6C 65 61 73 65 ...   1014  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
00001A7E= 49 6E 76 61 6C 69 ...   1015  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
00001A94= 49 6E 76 61 6C 69 ...   1016  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00001AB2= 47 69 76 65 6E 20 ...   1017  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00001ACD= 43 6F 6E 74 69 6E ...   1018  Continue_Program    DC.B    'Continue Program? Y/N', CR, LF, 0
00001AE5= 0D 0A 00                1019  Print_NextLine  DC.B    '', CR, LF, 0
00001AE8= 54 68 61 6E 6B 20 ...   1020  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
00001B0A                          1021  
00001B0A= 2C 20 00                1022  COMMA       DC.B    ', ', 0
00001B0D= 20 20 20 00             1023  SPACER      DC.B    '   ', 0
00001B11                          1024  *DATASIZE
00001B11= 2E 42 20 00             1025  SIZE_BYTE       DC.B    '.B ', 0
00001B15= 2E 57 20 00             1026  SIZE_WORD       DC.B    '.W ', 0
00001B19= 2E 4C 20 00             1027  SIZE_LONG       DC.B    '.L ', 0
00001B1D                          1028  
00001B1D                          1029  *MOVE OPCODES
00001B1D= 4D 4F 56 45 00          1030  MOVE_PRINT  DC.B    'MOVE', 0
00001B22= 4D 4F 56 45 2E 42 ...   1031  MOVEB       DC.B    'MOVE.B ', 0
00001B2A= 2E 42 20 00             1032  SIZE_B       DC.B    '.B ', 0
00001B2E= 2E 57 20 00             1033  MOVEW       DC.B    '.W ', 0
00001B32= 2E 4C 20 00             1034  MOVEL       DC.B    '.L ', 0
00001B36= 41 00                   1035  MOVEA       DC.B    'A', 0
00001B38                          1036  
00001B38                          1037  
00001B38                          1038  *DATA REGISTERS PRINTOUT
00001B38= 44 30 00                1039  DREG0       DC.B    'D0', 0
00001B3B= 44 31 00                1040  DREG1       DC.B    'D1', 0
00001B3E= 44 32 00                1041  DREG2       DC.B    'D2', 0
00001B41= 44 33 00                1042  DREG3       DC.B    'D3', 0
00001B44= 44 34 00                1043  DREG4       DC.B    'D4', 0
00001B47= 44 35 00                1044  DREG5       DC.B    'D5', 0
00001B4A= 44 36 00                1045  DREG6       DC.B    'D6', 0
00001B4D= 44 37 00                1046  DREG7       DC.B    'D7', 0 
00001B50                          1047  
00001B50                          1048  *ADDR REGISTERS PRINTOUT
00001B50= 41 30 00                1049  AREG0       DC.B    'A0', 0
00001B53= 41 31 00                1050  AREG1       DC.B    'A1', 0
00001B56= 41 32 00                1051  AREG2       DC.B    'A2', 0
00001B59= 41 33 00                1052  AREG3       DC.B    'A3', 0
00001B5C= 41 34 00                1053  AREG4       DC.B    'A4', 0
00001B5F= 41 35 00                1054  AREG5       DC.B    'A5', 0
00001B62= 41 36 00                1055  AREG6       DC.B    'A6', 0
00001B65= 41 37 00                1056  AREG7       DC.B    'A7', 0 
00001B68                          1057  
00001B68                          1058  *INDR_ADDR REGISTERS PRINTOUT
00001B68= 28 00                   1059  INDR_LEFT   DC.B    '(', 0
00001B6A= 29 00                   1060  INDR_RIGHT  DC.B    ')', 0
00001B6C= 2B 00                   1061  POST_INCRE   DC.B    '+', 0
00001B6E= 2D 00                   1062  PRE_DECRE   DC.B    '-', 0
00001B70= 24 00                   1063  DOLLAR_SIGN DC.B    '$', 0
00001B72= 23 00                   1064  POUND_SIGN  DC.B    '#', 0
00001B74                          1065  
00001B74                          1066  *SUB
00001B74= 53 55 42 00             1067  SUBTRACT    DC.B    'SUB', 0
00001B78= 41 44 44 00             1068  ADDITION    DC.B    'ADD', 0
00001B7C= 41 4E 44 00             1069  AND         DC.B    'AND', 0
00001B80= 4F 52 00                1070  OR          DC.B    'OR', 0
00001B83= 4E 4F 54 00             1071  NOT_OP      DC.B    'NOT', 0
00001B87                          1072  
00001B88= 00000001                1073  addrStart   DC.L    1   // Starting address
00001B8C= 00000001                1074  addrEnd     DC.L    1   // ending address
00001B90= 00000001                1075  OpCodeStorage DC.L    1
00001B94= 00000001                1076  OpCodeSize  DC.L    1
00001B98                          1077      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   115C
ADDITION            1B78
ADDREND             1B8C
ADDRESS_IMMEDIATE   183C
ADDRESS_L           181E
ADDRESS_W           1800
ADDRLOOP            10C6
ADDRREGTABLE        18D2
ADDRSTART           1B88
ADDVAL              1156
AND                 1B7C
AREG0               1B50
AREG1               1B53
AREG2               1B56
AREG3               1B59
AREG4               1B5C
AREG5               1B5F
AREG6               1B62
AREG7               1B65
B                   1162
C                   1168
CHAR                1126
CHECKRANGE          1076
CHECK_CONT          10E0
CHECK_MOVEA         15B8
CLRREG              1A2C
COMMA               1B0A
CONTINUE_PROGRAM    1ACD
CONVERT             110C
CR                  D
D                   116E
DATAREGTABLE        18A2
DESTEACHECKER       163E
DESTEAFINDER        166C
DOLLAR_SIGN         1B70
DREG0               1B38
DREG1               1B3B
DREG2               1B3E
DREG3               1B41
DREG4               1B44
DREG5               1B47
DREG6               1B4A
DREG7               1B4D
E                   1174
EA                  15EA
EACHECKER           1608
END                 10B4
F                   117A
GETINPUT            1006
IMMEDIATE_B         1878
IMMEDIATE_L         1894
IMMEDIATE_W         1886
INDR_LEFT           1B68
INDR_RIGHT          1B6A
INVALID_ADDRESS     1AB2
INVALID_EA_ADDR     1A7E
INVALID_EA_SUB      1A94
JMPTABLE            11C8
JMPTODESTREG        169C
JMPTOSRCREG         168C
JMPTO_DEST_ADDR_REG  16BC
JMPTO_DEST_IMMEDIATE  17EA
JMPTO_DEST_INDR_ADDR_REG  1708
JMPTO_SRC_ADDR_REG  16AC
JMPTO_SRC_IMMEDIATE  17CC
JMPTO_SRC_INDR_ADDR_REG  16CC
LF                  A
LOOP                1102
LOWERLIMIT          3000
MEMORY_ALTERABLE_CHECK  1540
MOVEA               1B36
MOVEB               1B22
MOVEL               1B32
MOVEW               1B2E
MOVE_PRINT          1B1D
NOT_JMPTABLE        12C4
NOT_OP              1B83
NOT_SIZE00          12DC
NOT_SIZE01          12FE
NOT_SIZE10          1318
NOT_SIZE11          1332
OP0000              121C
OP0001              121C
OP0010              123A
OP0011              126A
OP0100              1292
OP0101              1336
OP0110              1336
OP0111              1336
OP1000              1372
OP1001              1336
OP1010              13B6
OP1011              13B6
OP1100              13B6
OP1101              13F2
OPCODE              1180
OPCODESIZE          1B94
OPCODESTORAGE       1B90
OPMODE000           145E
OPMODE001           1478
OPMODE010           148A
OPMODE011           149C
OPMODE100           14CA
OPMODE101           14E2
OPMODE110           14FA
OPMODE111           1512
OR                  1B80
POST_INCRE          1B6C
POST_INCREMENT_DEST  1788
POST_INCREMENT_SRC  1744
POUND_SIGN          1B72
PRE_DECRE           1B6E
PRE_DECREMENT_DEST  1796
PRE_DECREMENT_SRC   1752
PRINTA              15DA
PRINTCOMMA          19EE
PRINTINVALIDADDRESS  1A1C
PRINTINVALIDEA      19FC
PRINTINVALIDSUB     1A0C
PRINT_NEXTLINE      1AE5
REG_A0              1978
REG_A1              198C
REG_A2              199A
REG_A3              19A8
REG_A4              19B6
REG_A5              19C4
REG_A6              19D2
REG_A7              19E0
REG_D0              1902
REG_D1              1916
REG_D2              1924
REG_D3              1932
REG_D4              1940
REG_D5              194E
REG_D6              195C
REG_D7              196A
SIZE_B              1B2A
SIZE_BYTE           1B11
SIZE_LONG           1B19
SIZE_WORD           1B15
SPACER              1B0D
SPECIAL_OPMODE_USED  14AC
SPECIAL_OPMODE_USED2  1522
START               1000
SUBTABLE            142E
SUBTRACT            1B74
SUB_OPMODE_ADDA     1596
SUB_OPMODE_FIRST    1552
SUB_OPMODE_SECOND   1570
TESTER              9000
TY_MESSAGE          1AE8
UPPERLIMIT          FFFFFE
WELCOME             1A40
WELCOME2            1A60
YESNOSTORAGE        50
