00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/20/2020 3:21:31 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *=================================================================
00001000                             9  *                     THIS IS OUR MAIN METHOD
00001000                            10  *               Don't throw random stuff in it, keep it to a minimum
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000  4EB9 00001006             13          JSR     GETINPUT
00001006                            14  *=================================================================
00001006                            15  *---------------Get starting and ending addresss------- Kelvin
00001006                            16  *--------------- PRE: will be using D0, D5, A1
00001006                            17  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            18  GETINPUT:
00001006  43F9 0000113E             19          LEA     WELCOME, A1
0000100C  103C 000E                 20          MOVE.B  #14,    D0
00001010  4E4F                      21          TRAP    #15
00001012  327C 0000                 22          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001016  103C 0002                 23          MOVE.B  #2,D0
0000101A  4E4F                      24          TRAP    #15
0000101C  2801                      25          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
0000101E  7000                      26          MOVE.L  #$0, d0  // intitiate counter
00001020  4EB9 00001072             27          JSR     LOOP    // Convert starting address into hex
00001026  23C5 00001184             28          MOVE.L  D5, addrStart
0000102C  43F9 0000115E             29          LEA     WELCOME2, A1
00001032  103C 000E                 30          MOVE.B  #14,    D0
00001036  4E4F                      31          TRAP    #15
00001038  327C 0000                 32          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000103C  103C 0002                 33          MOVE.B  #2,D0
00001040  4E4F                      34          TRAP    #15
00001042  23C5 00001188             35          MOVE.L  D5, addrEnd
00001048  4245                      36          CLR     D5       // Clear D5 for exit address
0000104A  1801                      37          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 38          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001072             39          JSR     LOOP    // Convert Ending address int Hex
00001056  31FC 2200 6000            40          MOVE.W  #$2200, $6000 
0000105C  45F8 6000                 41          LEA $6000, A2
00001060  4EB9 000010EE             42          JSR     OPCODE
00001066  4EF9 0000106C             43          JMP     END
0000106C                            44  END:
0000106C  103C 0009                 45          MOVE.B  #9, D0
00001070  4E4F                      46          TRAP    #15
00001072                            47  LOOP
00001072  B880                      48          CMP.L   D0, D4  // Loop until length of word reached
00001074  6E00 0004                 49          BGT     CONVERT
00001078  4E75                      50          RTS 
0000107A                            51  
0000107A                            52  *=================================================================
0000107A                            53  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000107A                            54  *PRE      D4 must contain input length, d0 must be 0
0000107A                            55  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000107A                            56  CONVERT:
0000107A  5280                      57          ADDQ.L  #$1, D0 // increment counter
0000107C  1211                      58          move.b  (A1),D1    // Get next bit from Input
0000107E  5289                      59          adda.L  #1, A1      // Increment Input
00001080  0401 0030                 60          sub.b   #$30,D1     //
00001084  B23C 0010                 61          cmp.b   #$10,D1   // Check if value is larger than 10
00001088  6E00 000A                 62          bgt     CHAR      // Find Hex
0000108C  1401                      63          move.b  D1, D2    // IF it is less than 10
0000108E  4EF9 000010C4             64          JMP     ADDVAL        
00001094                            65  CHAR:
00001094  B23C 0011                 66          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
00001098  6700 0030                 67          BEQ     A
0000109C  B23C 0012                 68          CMP.B   #$12, D1
000010A0  6700 002E                 69          BEQ     B
000010A4  B23C 0013                 70          CMP.B   #$13, D1
000010A8  6700 002C                 71          BEQ     C
000010AC  B23C 0014                 72          CMP.B   #$14, D1
000010B0  6700 002A                 73          BEQ     D
000010B4  B23C 0015                 74          CMP.B   #$15, D1
000010B8  6700 0028                 75          BEQ     E
000010BC  B23C 0016                 76          CMP.B   #$16, D1
000010C0  6700 0026                 77          BEQ     F
000010C4                            78  
000010C4                            79  ADDVAL:
000010C4  E98D                      80          lsl.l    #$4, D5 // Shift based on position
000010C6  DA82                      81          add.l    D2, D5 //Add value into Input
000010C8  60A8                      82          BRA      LOOP
000010CA                            83      
000010CA                            84  A:
000010CA  740A                      85          MOVE.L  #$A, D2 
000010CC  4EF8 10C4                 86          jmp ADDVAL
000010D0                            87  B:
000010D0  740B                      88          MOVE.L  #$B, D2
000010D2  4EF8 10C4                 89          jmp ADDVAL
000010D6                            90  C:
000010D6  740C                      91          MOVE.L  #$C, D2
000010D8  4EF8 10C4                 92          jmp ADDVAL
000010DC                            93  D:
000010DC  740D                      94          MOVE.L  #$D, D2
000010DE  4EF8 10C4                 95          jmp ADDVAL
000010E2                            96  E:
000010E2  740E                      97          MOVE.L  #$E, D2
000010E4  4EF8 10C4                 98          jmp ADDVAL
000010E8                            99  F:
000010E8  740F                     100          MOVE.L  #$F, D2
000010EA  4EF8 10C4                101          jmp ADDVAL
000010EE                           102          
000010EE                           103  *=======================================================================
000010EE                           104  *---------Find the first 4 of instruction and determines the instruction
000010EE                           105  OPCODE:
000010EE  4EB9 0000112C            106          JSR     CLRREG
000010F4  3212                     107          MOVE.W  (A2), D1
000010F6  1401                     108          MOVE.B  D1, D2  //D2 now containse the opperand EA!!!
000010F8  E849                     109          LSR.W   #4, D1
000010FA  E849                     110          LSR.W   #4, D1
000010FC  E849                     111          LSR.W   #4, D1  //Right Shift 3 times
000010FE  1001                     112          MOVE.B  D1, D0  // OPCODE FOUND
00001100  C0FC 0006                113          MULU    #6, D0
00001104  45F9 0000110E            114          LEA     JMPTABLE, A2
0000110A  4EB2 0000                115          JSR     (A2, D0)
0000110E                           116          
0000110E                           117  JMPTABLE
0000110E  4EF9 00001120            118          JMP     OP0000
00001114  4EF9 00001120            119          JMP     OP0001
0000111A  4EF9 00001120            120          JMP     OP0010 
00001120                           121           
00001120                           122  OP0000:
00001120                           123  OP0001:
00001120                           124  OP0010:
00001120  43F9 0000117C            125          LEA     MOVEL, A1
00001126  103C 000E                126          MOVE.B  #14, D0
0000112A  4E4F                     127          TRAP    #15
0000112C                           128          
0000112C                           129  
0000112C                           130  
0000112C                           131  
0000112C                           132           
0000112C                           133         
0000112C                           134  CLRREG:
0000112C  4241                     135      CLR D1
0000112E  4242                     136      CLR D2
00001130  4243                     137      CLR D3
00001132  4244                     138      CLR D4
00001134  4245                     139      CLR D5
00001136  4246                     140      CLR D6
00001138  4E75                     141      RTS
0000113A                           142          
0000113A                           143  * Put program code here
0000113A                           144  
0000113A  FFFF FFFF                145      SIMHALT             ; halt simulator
0000113E                           146  
0000113E                           147  * Put variables and constants here
0000113E  =0000000D                148  CR  EQU $0D
0000113E  =0000000A                149  LF  EQU $0A
0000113E= 50 6C 65 61 73 65 ...    150  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
0000115E= 50 6C 65 61 73 65 ...    151  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
0000117C= 4D 4F 56 45 2E 4C ...    152  MOVEL       DC.B    'MOVE.L ', 0
00001184= 00000001                 153  addrStart   DC.L    1   // Starting address
00001188= 00000001                 154  addrEnd     DC.L    1   // ending address
0000118C                           155      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   10CA
ADDREND             1188
ADDRSTART           1184
ADDVAL              10C4
B                   10D0
C                   10D6
CHAR                1094
CLRREG              112C
CONVERT             107A
CR                  D
D                   10DC
E                   10E2
END                 106C
F                   10E8
GETINPUT            1006
JMPTABLE            110E
LF                  A
LOOP                1072
MOVEL               117C
OP0000              1120
OP0001              1120
OP0010              1120
OPCODE              10EE
START               1000
WELCOME             113E
WELCOME2            115E
