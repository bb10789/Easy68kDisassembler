00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/3/2020 11:02:51 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *=================================================================
00001000                             9  *                     THIS IS OUR MAIN METHOD
00001000                            10  *               Don't throw random stuff in it, keep it to a minimum
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000  4EB9 00001006             13          JSR     GETINPUT
00001006                            14  *=================================================================
00001006                            15  *---------------Get starting and ending addresss------- Kelvin
00001006                            16  *--------------- PRE: will be using D0, D5, A1
00001006                            17  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            18  GETINPUT:
00001006  43F9 00001674             19          LEA     WELCOME, A1
0000100C  103C 000E                 20          MOVE.B  #14,    D0
00001010  4E4F                      21          TRAP    #15
00001012  327C 0000                 22          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001016  103C 0002                 23          MOVE.B  #2,D0
0000101A  4E4F                      24          TRAP    #15
0000101C  2801                      25          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
0000101E  7000                      26          MOVE.L  #$0, d0  // intitiate counter
00001020  4EB9 00001074             27          JSR     LOOP    // Convert starting address into hex
00001026  23C5 00001748             28          MOVE.L  D5, addrStart
0000102C  43F9 00001694             29          LEA     WELCOME2, A1
00001032  103C 000E                 30          MOVE.B  #14,    D0
00001036  4E4F                      31          TRAP    #15
00001038  327C 0000                 32          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000103C  103C 0002                 33          MOVE.B  #2,D0
00001040  4E4F                      34          TRAP    #15
00001042  23C5 0000174C             35          MOVE.L  D5, addrEnd
00001048  4245                      36          CLR     D5       // Clear D5 for exit address
0000104A  1801                      37          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 38          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001074             39          JSR     LOOP    // Convert Ending address int Hex
00001056                            40         * MOVEA.L  D0, A0   // Testing
00001056  31FC 9B91 6000            41          MOVE.W  #$9B91, $6000 // MOVE.L D0, D1, used for testing only
0000105C  45F8 6000                 42          LEA     $6000, A2 //testing
00001060  4EB9 000010F2             43          JSR     OPCODE
00001066  4EF9 0000106C             44          JMP     END
0000106C                            45  END:
0000106C  103C 0009                 46          MOVE.B  #9, D0
00001070  4E4F                      47          TRAP    #15
00001072                            48          
00001072                            49  *Please start from here Annabelle
00001072                            50  AddrLoop:
00001072  60F8                      51          BRA     END     // DELETE THIS WHEN UR WORKING ON IT ANNABELLE!!!!!!!
00001074                            52  LOOP
00001074                            53  
00001074  B880                      54          CMP.L   D0, D4  // Loop until length of word reached
00001076  6E00 0006                 55          BGT     CONVERT
0000107A  5480                      56          ADD.L   #$2, D0 
0000107C  4E75                      57          RTS 
0000107E                            58  
0000107E                            59  *=================================================================
0000107E                            60  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000107E                            61  *PRE      D4 must contain input length, d0 must be 0
0000107E                            62  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000107E                            63  CONVERT:
0000107E  5280                      64          ADDQ.L  #$1, D0 // increment counter
00001080  1211                      65          move.b  (A1),D1    // Get next bit from Input
00001082  5289                      66          adda.L  #1, A1      // Increment Input
00001084  0401 0030                 67          sub.b   #$30,D1     //
00001088  B23C 0010                 68          cmp.b   #$10,D1   // Check if value is larger than 10
0000108C  6E00 000A                 69          bgt     CHAR      // Find Hex
00001090  1401                      70          move.b  D1, D2    // IF it is less than 10
00001092  4EF9 000010C8             71          JMP     ADDVAL        
00001098                            72  CHAR:
00001098  B23C 0011                 73          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
0000109C  6700 0030                 74          BEQ     A
000010A0  B23C 0012                 75          CMP.B   #$12, D1
000010A4  6700 002E                 76          BEQ     B
000010A8  B23C 0013                 77          CMP.B   #$13, D1
000010AC  6700 002C                 78          BEQ     C
000010B0  B23C 0014                 79          CMP.B   #$14, D1
000010B4  6700 002A                 80          BEQ     D
000010B8  B23C 0015                 81          CMP.B   #$15, D1
000010BC  6700 0028                 82          BEQ     E
000010C0  B23C 0016                 83          CMP.B   #$16, D1
000010C4  6700 0026                 84          BEQ     F
000010C8                            85  
000010C8                            86  ADDVAL:
000010C8  E98D                      87          lsl.l    #$4, D5 // Shift based on position
000010CA  DA82                      88          add.l    D2, D5 //Add value into Input
000010CC  60A6                      89          BRA      LOOP
000010CE                            90      
000010CE                            91  A:
000010CE  740A                      92          MOVE.L  #$A, D2 
000010D0  4EF8 10C8                 93          jmp ADDVAL
000010D4                            94  B:
000010D4  740B                      95          MOVE.L  #$B, D2
000010D6  4EF8 10C8                 96          jmp ADDVAL
000010DA                            97  C:
000010DA  740C                      98          MOVE.L  #$C, D2
000010DC  4EF8 10C8                 99          jmp ADDVAL
000010E0                           100  D:
000010E0  740D                     101          MOVE.L  #$D, D2
000010E2  4EF8 10C8                102          jmp ADDVAL
000010E6                           103  E:
000010E6  740E                     104          MOVE.L  #$E, D2
000010E8  4EF8 10C8                105          jmp ADDVAL
000010EC                           106  F:
000010EC  740F                     107          MOVE.L  #$F, D2
000010EE  4EF8 10C8                108          jmp ADDVAL
000010F2                           109          
000010F2                           110  *=======================================================================
000010F2                           111  *---------Find the first 4 of instruction and determines the instruction
000010F2                           112  OPCODE:
000010F2  4EB9 00001662            113          JSR     CLRREG
000010F8  3212                     114          MOVE.W  (A2), D1
000010FA  2401                     115          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
000010FC  E849                     116          LSR.W   #4, D1
000010FE  E849                     117          LSR.W   #4, D1
00001100  E849                     118          LSR.W   #4, D1  //Right Shift 3 times
00001102  1001                     119          MOVE.B  D1, D0  // OPCODE FOUND
00001104  C0FC 0006                120          MULU    #6, D0
00001108  45F9 00001112            121          LEA     JMPTABLE, A2
0000110E  4EF2 0000                122          JMP     (A2, D0)
00001112                           123          
00001112                           124  *========================================================================
00001112                           125  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001112                           126  *------- Add your instructions here
00001112                           127  JMPTABLE
00001112  4EF9 0000114E            128          JMP     OP0000
00001118  4EF9 0000114E            129          JMP     OP0001 *MOVEB
0000111E  4EF9 00001164            130          JMP     OP0010 *MOVEL
00001124  4EF9 0000118C            131          JMP     OP0011 *MOVEW
0000112A  4EF9 000011B4            132          JMP     OP0100 *MOVEM
00001130  4EF9 000011B4            133          JMP     OP0101
00001136  4EF9 000011B4            134          JMP     OP0110
0000113C  4EF9 000011B4            135          JMP     OP0111
00001142  4EF9 000011B4            136          JMP     OP1000
00001148  4EF9 000011B4            137          JMP     OP1001 *SUB
0000114E                           138           
0000114E                           139  OP0000:
0000114E                           140  *-> MOVE.B
0000114E                           141  OP0001:
0000114E  43F9 000016FA            142          LEA     MOVEB, A1
00001154  103C 000E                143          MOVE.B  #14, D0
00001158  4E4F                     144          TRAP    #15
0000115A  4EB9 0000130E            145          JSR     EA * Find SRC EA
00001160  6000 0226                146          BRA     DESTEAFINDER * FIND DEST EA
00001164                           147  * -> MOVE.L
00001164                           148  * Printed using MOVEL String as a variable on the very bottom
00001164                           149  OP0010:
00001164  43F9 000016F5            150          LEA     MOVE_PRINT, A1
0000116A  103C 000E                151          MOVE.B  #14, D0
0000116E  4E4F                     152          TRAP    #15
00001170  4EB9 000012DC            153          JSR     CHECK_MOVEA
00001176  43F9 00001706            154          LEA     MOVEL, A1
0000117C  103C 000E                155          MOVE.B  #14, D0
00001180  4E4F                     156          TRAP    #15
00001182  4EB9 0000130E            157          JSR     EA *Find SRC EA
00001188  6000 01FE                158          BRA     DESTEAFINDER *FIND DEST EA
0000118C                           159  * -> MOVE.W
0000118C                           160  OP0011:
0000118C  43F9 000016F5            161          LEA     MOVE_PRINT, A1
00001192  103C 000E                162          MOVE.B  #14, D0
00001196  4E4F                     163          TRAP    #15
00001198  4EB9 000012DC            164          JSR     CHECK_MOVEA
0000119E  43F9 00001702            165          LEA     MOVEW, A1
000011A4  103C 000E                166          MOVE.B  #14, D0
000011A8  4E4F                     167          TRAP    #15
000011AA  4EB9 0000130E            168          JSR     EA * FIND SRC EA
000011B0  6000 01D6                169          BRA     DESTEAFINDER *FIND DEST EA
000011B4                           170  OP0100:
000011B4                           171  OP0101:
000011B4                           172  OP0110:
000011B4                           173  OP0111:
000011B4                           174          
000011B4                           175  OP1000:
000011B4                           176  * -> SUB
000011B4                           177  * Splitting Sub into OPMODE and Register value
000011B4                           178  
000011B4                           179  
000011B4                           180  
000011B4                           181  OP1001:
000011B4  43F9 00001744            182          LEA     SUBTRACT, A1
000011BA  103C 000E                183          MOVE.B  #14, D0
000011BE  4E4F                     184          TRAP    #15
000011C0  E94A                     185          LSL.W   #4, D2
000011C2  3602                     186          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000011C4  E04B                     187          LSR.W   #8, D3 * D3 = D register
000011C6  EA4B                     188          LSR.W   #5, D3
000011C8  3802                     189          MOVE.W  D2, D4 *D4 = SubOPMODE
000011CA  E74C                     190          LSL.W   #3, D4
000011CC  E04C                     191          LSR.W   #8, D4
000011CE  EA4C                     192          LSR.W   #5, D4
000011D0  3202                     193          MOVE.W  D2, D1 * D1 = EA Mode
000011D2  ED49                     194          LSL.W   #6, D1
000011D4  E049                     195          LSR.W   #8, D1
000011D6  EA49                     196          LSR.W   #5, D1
000011D8  3002                     197          MOVE.W  D2, D0 * D0 = EA register
000011DA  E148                     198          LSL.W   #8, D0
000011DC  E348                     199          LSL.W   #1, D0
000011DE  E048                     200          LSR.W   #8, D0
000011E0  EA48                     201          LSR.W   #5, D0
000011E2  45F9 000011F0            202          LEA     SubTable, A2
000011E8  C8FC 0006                203          MULU    #6, D4
000011EC  4EB2 4000                204          JSR     (A2, D4)
000011F0                           205          
000011F0                           206  * =============================================
000011F0                           207  * JMP Table for SUB OPMODES
000011F0                           208  SubTable:
000011F0  4EF9 00001220            209          JMP     OPMODE000 * BYTE  EA->DN
000011F6  4EF9 00001232            210          JMP     OPMODE001 * WORD  RA->DN  
000011FC  4EF9 00001244            211          JMP     OPMODE010 * LONG  EA->DN 
00001202  4EF9 00001256            212          JMP     OPMODE011 * ERROR
00001208  4EF9 0000125C            213          JMP     OPMODE100 * BYTE  DN->EA
0000120E  4EF9 0000126E            214          JMP     OPMODE101 * BYTE  DN->EA
00001214  4EF9 00001280            215          JMP     OPMODE110 * BYTE  DN->EA
0000121A  4EF9 00001292            216          JMP     OPMODE111 * ERROR
00001220                           217          
00001220                           218  OPMODE000:
00001220  1A00                     219          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001222  43F9 000016E9            220          LEA     SIZE_BYTE, A1
00001228  103C 000E                221          MOVE.B  #14, D0
0000122C  4E4F                     222          TRAP    #15
0000122E  6000 0068                223          BRA     Sub_OPMODE_FIRST
00001232                           224  OPMODE001
00001232  1A00                     225          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001234  43F9 000016ED            226          LEA     SIZE_Word, A1
0000123A  103C 000E                227          MOVE.B  #14, D0
0000123E  4E4F                     228          TRAP    #15
00001240  6000 0056                229          BRA     Sub_OPMODE_FIRST
00001244                           230  OPMODE010
00001244  1A00                     231          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001246  43F9 000016F1            232          LEA     SIZE_Long, A1
0000124C  103C 000E                233          MOVE.B  #14, D0
00001250  4E4F                     234          TRAP    #15
00001252  6000 0044                235          BRA     Sub_OPMODE_FIRST
00001256                           236  OPMODE011
00001256  4EF9 00001652            237          JMP     PRINTInvalidSUB
0000125C                           238  OPMODE100
0000125C  1A00                     239          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000125E  43F9 000016E9            240          LEA     SIZE_BYTE, A1
00001264  103C 000E                241          MOVE.B  #14, D0
00001268  4E4F                     242          TRAP    #15
0000126A  6000 004A                243          BRA     Sub_OPMODE_SECOND
0000126E                           244  OPMODE101
0000126E  1A00                     245          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001270  43F9 000016ED            246          LEA     SIZE_Word, A1
00001276  103C 000E                247          MOVE.B  #14, D0
0000127A  4E4F                     248          TRAP    #15
0000127C  6000 0038                249          BRA     Sub_OPMODE_SECOND
00001280                           250  OPMODE110
00001280  1A00                     251          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001282  43F9 000016F1            252          LEA     SIZE_LONG, A1
00001288  103C 000E                253          MOVE.B  #14, D0
0000128C  4E4F                     254          TRAP    #15
0000128E  6000 0026                255          BRA     Sub_OPMODE_SECOND
00001292                           256  OPMODE111
00001292  4EF9 00001652            257          JMP     PRINTInvalidSUB
00001298                           258  
00001298                           259  *===============================================
00001298                           260  * Used for Dn->EA for SUB
00001298                           261  * Called by 001, 010, 100, 
00001298                           262  Sub_OPMODE_FIRST:
00001298  1005                     263          MOVE.B  D5, D0   * TEMP RETURN D0
0000129A  4EB9 0000132C            264          JSR     EACHECKER 
000012A0  4240                     265          CLR     D0
000012A2  4241                     266          CLR     D1
000012A4  4EB9 00001634            267          JSR     PRINTCOMMA
000012AA  1003                     268          MOVE.B  D3, D0
000012AC  4EB9 0000135A            269          JSR     DestEAChecker 
000012B2  6000 FDBE                270          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
000012B6                           271          
000012B6                           272  Sub_OPMODE_SECOND:
000012B6  1801                     273          MOVE.B  D1, D4   *TEMP STORE D1
000012B8  4240                     274          CLR     D0  *Clean D0
000012BA  1003                     275          MOVE.B  D3, D0
000012BC  4241                     276          CLR     D1
000012BE  4EB9 0000132C            277          JSR     EACHECKER 
000012C4  4240                     278          CLR     D0
000012C6  4241                     279          CLR     D1
000012C8  4EB9 00001634            280          JSR     PRINTCOMMA
000012CE  1005                     281          MOVE.B  D5, D0   * TEMP RETURN D0
000012D0  1204                     282          MOVE.B  D4, D1   * TEMP RETURN D1
000012D2  4EB9 0000135A            283          JSR     DestEAChecker 
000012D8  6000 FD98                284          BRA     addrloop *EA FINISHED-----
000012DC                           285          
000012DC                           286  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
000012DC                           287  CHECK_MOVEA
000012DC  2602                     288          MOVE.L  D2, D3  * HOlding D2 in D3 temp
000012DE  E18A                     289          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000012E0  E18A                     290          LSL.L   #8, D2
000012E2  E98A                     291          LSL.L   #4, D2
000012E4  E08A                     292          LSR.L   #8, D2
000012E6  E08A                     293          LSR.L   #8, D2
000012E8  E88A                     294          LSR.L   #4, D2 // 12 bits of opperand found
000012EA  EC8A                     295          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
000012EC  1202                     296          MOVE.B  D2, D1 * Prepare D1 for Mode
000012EE  EB09                     297          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000012F0  EA09                     298          LSR.B   #5, D1
000012F2  B23C 0001                299          CMP.B   #%001, D1
000012F6  6700 0006                300          BEQ     PRINTA
000012FA  2403                     301          MOVE.L  D3, D2 
000012FC  4E75                     302          RTS * Goes back to OP Value
000012FE                           303          
000012FE                           304  PRINTA
000012FE  43F9 0000170A            305          LEA     MOVEA, A1
00001304  103C 000E                306          MOVE.B  #14, D0
00001308  4E4F                     307          TRAP    #15
0000130A  2403                     308          MOVE.L  D3, D2
0000130C  4E75                     309          RTS * Goes back to CHECK_MOVEA
0000130E                           310          
0000130E                           311          
0000130E                           312  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
0000130E                           313  *=================================================================
0000130E                           314  *-----------EA-- Calculate EA used for Data Registers
0000130E                           315  *----------Pre: D2, D0, D1 must be clear
0000130E                           316  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
0000130E                           317  EA:
0000130E  4240                     318          CLR     D0  * Clear D0 and D1 so they don't conflict
00001310  4241                     319          CLR     D1
00001312  4243                     320          CLR     D3
00001314  E18A                     321          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001316  E18A                     322          LSL.L   #8, D2
00001318  E98A                     323          LSL.L   #4, D2
0000131A  E08A                     324          LSR.L   #8, D2
0000131C  E08A                     325          LSR.L   #8, D2
0000131E  E88A                     326          LSR.L   #4, D2 // 12 bits of opperand found
00001320  1002                     327          MOVE.B  D2, D0 Source Data Register
00001322  EB08                     328          LSL.B   #5, D0
00001324  EA08                     329          LSR.B   #5, D0
00001326  1202                     330          MOVE.B  D2, D1 *Source Data Mode
00001328  E509                     331          LSL.B   #2, D1
0000132A  EA09                     332          LSR.B   #5, D1
0000132C                           333          
0000132C                           334  *=================================================
0000132C                           335  *-----------EA CHECKER------Continues from EA
0000132C                           336  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
0000132C                           337  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
0000132C                           338  EACHECKER: 
0000132C  B23C 0000                339          CMP.B   #%0000, D1
00001330  6700 0076                340          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001334  B23C 0001                341          CMP.B   #%0001, D1
00001338  6700 008E                342          BEQ     JMPTO_SRC_ADDR_REG
0000133C  B23C 0002                343          CMP.B   #%0010, D1
00001340  6700 00A6                344          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001344  B23C 0003                345          CMP.B   #%0011, D1
00001348  6700 009E                346          BEQ     JMPTO_SRC_INDR_ADDR_REG
0000134C  B23C 0004                347          CMP.B   #%0100, D1
00001350  6700 0096                348          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001354  4EF9 00001642            349          JMP     PRINTINVALIDEA
0000135A                           350          
0000135A                           351  *=================================================
0000135A                           352  *-----------DEST EA CHECKER------Continues from EA
0000135A                           353  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
0000135A                           354  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
0000135A                           355  DESTEACHECKER:
0000135A  B23C 0000                356          CMP.B   #%0000, D1
0000135E  6700 0058                357          BEQ     JMPTODestREG *JUMPS TO Source D registers
00001362  B23C 0001                358          CMP.B   #%0001, D1
00001366  6700 0070                359          BEQ     JMPTO_DEST_ADDR_REG
0000136A  B23C 0002                360          CMP.B   #%0010, D1
0000136E  6700 00B4                361          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001372  B23C 0003                362          CMP.B   #%0011, D1
00001376  6700 00AC                363          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000137A  B23C 0004                364          CMP.B   #%0100, D1
0000137E  6700 00A4                365          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001382  4EF9 00001642            366          JMP     PRINTINVALIDEA
00001388                           367          
00001388                           368  *=================================================      
00001388                           369  * Dest EA Finder
00001388                           370  * PRE: ONLY USED FOR MOVE
00001388                           371  * POST: PRINTS DEST EA  
00001388                           372  DestEAFinder:
00001388  4EB9 00001634            373          JSR     PRINTCOMMA  * Prints comma between two operrands
0000138E  EC8A                     374          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001390  4241                     375          CLR     D1     * Clear D1 and D0 for opperand mode and register
00001392  4240                     376          CLR     D0
00001394  1202                     377          MOVE.B  D2, D1 * Prepare D1 for Mode
00001396  EB09                     378          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001398  EA09                     379          LSR.B   #5, D1
0000139A  1002                     380          MOVE.B  D2, D0  *Prepare D0 for Register
0000139C  E508                     381          LSL.B   #2, D0
0000139E  EA08                     382          LSR.B   #5, D0
000013A0  4EB8 135A                383          JSR     DESTEACHECKER
000013A4  4EF8 106C                384          JMP     END     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
000013A8                           385  
000013A8                           386          
000013A8                           387  *===================================================
000013A8                           388  *-------------Data Register checker------------------        
000013A8                           389  JMPTOSRCREG:
000013A8  43F9 000014E8            390          LEA     DATAREGTABLE, A1
000013AE  C0FC 0006                391          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000013B2  4EB1 0000                392          JSR     (A1, D0) *JMP To index A1 + D0
000013B6                           393          * EA CONTINUES HERE
000013B6  4E75                     394          RTS * BRA DESTEAFINDER DELETED
000013B8                           395  JMPToDestReg: *PRINT OUT DEST Registers
000013B8  43F9 000014E8            396          LEA     DATAREGTABLE, A1
000013BE  C0FC 0006                397          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000013C2  4EB1 0000                398          JSR     (A1, D0) *JMP to A1 + D0
000013C6  4E75                     399          RTS    * Goes Back to DestEAFinder
000013C8                           400          
000013C8                           401  
000013C8                           402  *===================================================
000013C8                           403  *-------------Address Register checker------------------             
000013C8                           404  JMPTO_SRC_ADDR_REG:
000013C8  43F9 00001518            405          LEA     AddrREGTABLE, A1
000013CE  C0FC 0006                406          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000013D2  4EB1 0000                407          JSR     (A1, D0) *JMP To index A1 + D0
000013D6                           408          * EA CONTINUES HERE
000013D6  4E75                     409          RTS * BRA DESTEAFINDER DELETED
000013D8                           410  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
000013D8  43F9 00001518            411          LEA     AddrREGTABLE, A1
000013DE  C0FC 0006                412          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000013E2  4EB1 0000                413          JSR     (A1, D0) *JMP to A1 + D0
000013E6  4E75                     414          RTS     * Goes Back to DESTEAFinder
000013E8                           415          
000013E8                           416  *===================================================
000013E8                           417  *-------------Indirect Address Register checker------------------
000013E8                           418  *Copied from Address Register checker, basically adding parenthesis () around Address register
000013E8                           419  * Also Detects ()+ and -()
000013E8                           420  * PRE: D1 stores mode, D0 stores register #
000013E8                           421  * D1 to D5 are off limits
000013E8                           422  JMPTO_SRC_INDR_ADDR_REG:
000013E8  1A00                     423         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
000013EA  B23C 0004                424         CMP.B    #%100, D1       * IF IT IS -()
000013EE  6700 007E                425         BEQ      PRE_DECREMENT_SRC
000013F2  43F9 0000173C            426         LEA      INDR_LEFT, A1
000013F8  103C 000E                427         MOVE.B   #14, D0
000013FC  4E4F                     428         TRAP     #15
000013FE  1005                     429         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001400  43F9 00001518            430         LEA     AddrREGTABLE, A1
00001406  C0FC 0006                431         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000140A  4EB1 0000                432         JSR     (A1, D0) *JMP To index A1 + D0
0000140E  43F9 0000173E            433         LEA      INDR_RIGHT, A1
00001414  103C 000E                434         MOVE.B   #14, D0
00001418  4E4F                     435         TRAP     #15
0000141A  B23C 0003                436         CMP.B    #%0011, D1 * IF IT IS ()+
0000141E  6700 0040                437         BEQ      POST_INCREMENT_SRC
00001422  4E75                     438         RTS * BRA DESTEAFINDER DELETED
00001424                           439         
00001424                           440  JMPTO_DEST_INDR_ADDR_REG:
00001424  1600                     441         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
00001426  B23C 0004                442         CMP.B    #%100, D1
0000142A  6700 0086                443         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
0000142E  43F9 0000173C            444         LEA      INDR_LEFT, A1
00001434  103C 000E                445         MOVE.B   #14, D0
00001438  4E4F                     446         TRAP     #15
0000143A  1003                     447         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
0000143C  43F9 00001518            448         LEA     AddrREGTABLE, A1
00001442  C0FC 0006                449         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001446  4EB1 0000                450         JSR     (A1, D0) *JMP To index A1 + D0
0000144A  43F9 0000173E            451         LEA      INDR_RIGHT, A1
00001450  103C 000E                452         MOVE.B   #14, D0
00001454  4E4F                     453         TRAP     #15
00001456  B23C 0003                454         CMP.B    #%0011, D1  // IF IT IS ()+
0000145A  6700 0048                455         BEQ      POST_INCREMENT_DEST
0000145E  4E75                     456         RTS      * Goes Back to DestEAFinder
00001460                           457         
00001460                           458  POST_INCREMENT_SRC:
00001460  43F9 00001740            459         LEA      POST_INCRE, A1
00001466  103C 000E                460         MOVE.B   #14, D0
0000146A  4E4F                     461         TRAP     #15
0000146C  4E75                     462         RTS * BRA DESTEAFINDER DELETED
0000146E                           463         
0000146E                           464  PRE_DECREMENT_SRC:
0000146E  43F9 00001742            465         LEA      PRE_DECRE, A1
00001474  103C 000E                466         MOVE.B   #14, D0
00001478  4E4F                     467         TRAP     #15
0000147A  43F9 0000173C            468         LEA      INDR_LEFT, A1
00001480  103C 000E                469         MOVE.B   #14, D0
00001484  4E4F                     470         TRAP     #15
00001486  1005                     471         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001488  43F9 00001518            472         LEA     AddrREGTABLE, A1
0000148E  C0FC 0006                473         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001492  4EB1 0000                474         JSR     (A1, D0) *JMP To index A1 + D0
00001496  43F9 0000173E            475         LEA      INDR_RIGHT, A1
0000149C  103C 000E                476         MOVE.B   #14, D0
000014A0  4E4F                     477         TRAP     #15
000014A2  4E75                     478         RTS * BRA DESTEAFINDER DELETED
000014A4                           479  
000014A4                           480  POST_INCREMENT_DEST
000014A4  43F9 00001740            481         LEA      POST_INCRE, A1
000014AA  103C 000E                482         MOVE.B   #14, D0
000014AE  4E4F                     483         TRAP     #15
000014B0  4E75                     484         RTS      * Goes Back to DestEAFinder
000014B2                           485         
000014B2                           486  PRE_DECREMENT_DEST:
000014B2  43F9 00001742            487         LEA      PRE_DECRE, A1
000014B8  103C 000E                488         MOVE.B   #14, D0
000014BC  4E4F                     489         TRAP     #15
000014BE  43F9 0000173C            490         LEA      INDR_LEFT, A1
000014C4  103C 000E                491         MOVE.B   #14, D0
000014C8  4E4F                     492         TRAP     #15
000014CA  1005                     493         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000014CC  43F9 00001518            494         LEA     AddrREGTABLE, A1
000014D2  C0FC 0006                495         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000014D6  4EB1 0000                496         JSR     (A1, D0) *JMP To index A1 + D0
000014DA  43F9 0000173E            497         LEA      INDR_RIGHT, A1
000014E0  103C 000E                498         MOVE.B   #14, D0
000014E4  4E4F                     499         TRAP     #15
000014E6  4E75                     500         RTS      * Goes Back to DestEAFinder
000014E8                           501         
000014E8                           502  
000014E8                           503  
000014E8                           504  *=================================================================
000014E8                           505  *---------Data Register Table used for printing out Registers----
000014E8                           506  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
000014E8                           507  DataRegTable
000014E8  4EF9 00001548            508          JMP REG_D0
000014EE  4EF9 0000155C            509          JMP REG_D1
000014F4  4EF9 0000156A            510          JMP REG_D2
000014FA  4EF9 00001578            511          JMP REG_D3
00001500  4EF9 00001586            512          JMP REG_D4
00001506  4EF9 00001594            513          JMP REG_D5
0000150C  4EF9 000015A2            514          JMP REG_D6
00001512  4EF9 000015B0            515          JMP REG_D7
00001518                           516  
00001518                           517  AddrRegTable:
00001518                           518          
00001518  4EF9 000015BE            519          JMP REG_A0
0000151E  4EF9 000015D2            520          JMP REG_A1
00001524  4EF9 000015E0            521          JMP REG_A2
0000152A  4EF9 000015EE            522          JMP REG_A3
00001530  4EF9 000015FC            523          JMP REG_A4
00001536  4EF9 0000160A            524          JMP REG_A5
0000153C  4EF9 00001618            525          JMP REG_A6
00001542  4EF9 00001626            526          JMP REG_A7
00001548                           527  
00001548                           528  * Data Registers Printing        
00001548                           529  REG_D0:
00001548  227C 00000000            530          MOVEA.L #$0, A1
0000154E  43F9 0000170C            531          LEA     DREG0, A1
00001554  103C 000E                532          MOVE.B  #14, D0
00001558  4E4F                     533          TRAP    #15
0000155A  4E75                     534          RTS
0000155C                           535          
0000155C                           536  REG_D1:
0000155C  43F9 0000170F            537          LEA     DREG1, A1
00001562  103C 000E                538          MOVE.B  #14, D0
00001566  4E4F                     539          TRAP    #15
00001568  4E75                     540          RTS
0000156A                           541  REG_D2:
0000156A  43F9 00001712            542          LEA     DREG2, A1
00001570  103C 000E                543          MOVE.B  #14, D0
00001574  4E4F                     544          TRAP    #15
00001576  4E75                     545          RTS
00001578                           546  REG_D3:
00001578  43F9 00001715            547          LEA     DREG3, A1
0000157E  103C 000E                548          MOVE.B  #14, D0
00001582  4E4F                     549          TRAP    #15
00001584  4E75                     550          RTS
00001586                           551  REG_D4:
00001586  43F9 00001718            552          LEA     DREG4, A1
0000158C  103C 000E                553          MOVE.B  #14, D0
00001590  4E4F                     554          TRAP    #15
00001592  4E75                     555          RTS
00001594                           556  REG_D5:
00001594  43F9 0000171B            557          LEA     DREG5, A1
0000159A  103C 000E                558          MOVE.B  #14, D0
0000159E  4E4F                     559          TRAP    #15
000015A0  4E75                     560          RTS
000015A2                           561  REG_D6:
000015A2  43F9 0000171E            562          LEA     DREG6, A1
000015A8  103C 000E                563          MOVE.B  #14, D0
000015AC  4E4F                     564          TRAP    #15
000015AE  4E75                     565          RTS
000015B0                           566  REG_D7:
000015B0  43F9 00001721            567          LEA     DREG7, A1
000015B6  103C 000E                568          MOVE.B  #14, D0
000015BA  4E4F                     569          TRAP    #15
000015BC  4E75                     570          RTS
000015BE                           571          
000015BE                           572  *--------------------Addr Reigster printing ------------------------*        
000015BE                           573  REG_A0:
000015BE  227C 00000000            574          MOVEA.L #$0, A1
000015C4  43F9 00001724            575          LEA     AREG0, A1
000015CA  103C 000E                576          MOVE.B  #14, D0
000015CE  4E4F                     577          TRAP    #15
000015D0  4E75                     578          RTS
000015D2                           579          
000015D2                           580  REG_A1:
000015D2  43F9 00001727            581          LEA     AREG1, A1
000015D8  103C 000E                582          MOVE.B  #14, D0
000015DC  4E4F                     583          TRAP    #15
000015DE  4E75                     584          RTS
000015E0                           585  REG_A2:
000015E0  43F9 0000172A            586          LEA     AREG2, A1
000015E6  103C 000E                587          MOVE.B  #14, D0
000015EA  4E4F                     588          TRAP    #15
000015EC  4E75                     589          RTS
000015EE                           590  REG_A3:
000015EE  43F9 0000172D            591          LEA     AREG3, A1
000015F4  103C 000E                592          MOVE.B  #14, D0
000015F8  4E4F                     593          TRAP    #15
000015FA  4E75                     594          RTS
000015FC                           595  REG_A4:
000015FC  43F9 00001730            596          LEA     AREG4, A1
00001602  103C 000E                597          MOVE.B  #14, D0
00001606  4E4F                     598          TRAP    #15
00001608  4E75                     599          RTS
0000160A                           600  REG_A5:
0000160A  43F9 00001733            601          LEA     AREG5, A1
00001610  103C 000E                602          MOVE.B  #14, D0
00001614  4E4F                     603          TRAP    #15
00001616  4E75                     604          RTS
00001618                           605  REG_A6:
00001618  43F9 00001736            606          LEA     AREG6, A1
0000161E  103C 000E                607          MOVE.B  #14, D0
00001622  4E4F                     608          TRAP    #15
00001624  4E75                     609          RTS
00001626                           610  REG_A7:
00001626  43F9 00001739            611          LEA     AREG7, A1
0000162C  103C 000E                612          MOVE.B  #14, D0
00001630  4E4F                     613          TRAP    #15
00001632  4E75                     614          RTS
00001634                           615          
00001634                           616  *====================================================PRinting/ ERROR method comes down here=========================================
00001634                           617  PRINTCOMMA: * Prints comma between two operrands
00001634  43F9 000016E6            618          LEA     COMMA, A1
0000163A  103C 000E                619          MOVE.B  #14, D0
0000163E  4E4F                     620          TRAP    #15
00001640  4E75                     621          RTS
00001642                           622          
00001642                           623  PrintInvalidEA:
00001642  43F9 000016B2            624          LEA     Invalid_EA_Addr, A1
00001648  103C 000E                625          MOVE.B  #14, D0
0000164C  4E4F                     626          TRAP    #15
0000164E  4EF8 1072                627          JMP     AddrLoop
00001652                           628          
00001652                           629  PrintInvalidSUB:
00001652  43F9 000016C8            630          LEA     Invalid_EA_SUB, A1
00001658  103C 000E                631          MOVE.B  #14, D0
0000165C  4E4F                     632          TRAP    #15
0000165E  4EF8 1072                633          JMP     AddrLoop
00001662                           634          
00001662                           635          
00001662                           636          
00001662                           637           
00001662                           638  * Clear all registers    
00001662                           639  CLRREG:
00001662  4241                     640      CLR D1
00001664  4242                     641      CLR D2
00001666  4243                     642      CLR D3
00001668  4244                     643      CLR D4
0000166A  4245                     644      CLR D5
0000166C  4246                     645      CLR D6
0000166E  4E75                     646      RTS
00001670                           647      
00001670                           648      
00001670                           649          
00001670                           650  * Put program code here
00001670                           651  
00001670  FFFF FFFF                652      SIMHALT             ; halt simulator
00001674                           653  
00001674                           654  * Put variables and constants here
00001674  =0000000D                655  CR  EQU $0D
00001674  =0000000A                656  LF  EQU $0A
00001674= 50 6C 65 61 73 65 ...    657  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
00001694= 50 6C 65 61 73 65 ...    658  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
000016B2= 49 6E 76 61 6C 69 ...    659  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
000016C8= 49 6E 76 61 6C 69 ...    660  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
000016E6                           661  
000016E6= 2C 20 00                 662  COMMA       DC.B    ', ', 0
000016E9                           663  
000016E9                           664  *DATASIZE
000016E9= 2E 42 20 00              665  SIZE_BYTE       DC.B    '.B ', 0
000016ED= 2E 57 20 00              666  SIZE_WORD       DC.B    '.W ', 0
000016F1= 2E 4C 20 00              667  SIZE_LONG       DC.B    '.L ', 0
000016F5                           668  
000016F5                           669  *MOVE OPCODES
000016F5= 4D 4F 56 45 00           670  MOVE_PRINT  DC.B    'MOVE', 0
000016FA= 4D 4F 56 45 2E 42 ...    671  MOVEB       DC.B    'MOVE.B ', 0
00001702= 2E 57 20 00              672  MOVEW       DC.B    '.W ', 0
00001706= 2E 4C 20 00              673  MOVEL       DC.B    '.L ', 0
0000170A= 41 00                    674  MOVEA       DC.B    'A', 0
0000170C                           675  
0000170C                           676  
0000170C                           677  *DATA REGISTERS PRINTOUT
0000170C= 44 30 00                 678  DREG0       DC.B    'D0', 0
0000170F= 44 31 00                 679  DREG1       DC.B    'D1', 0
00001712= 44 32 00                 680  DREG2       DC.B    'D2', 0
00001715= 44 33 00                 681  DREG3       DC.B    'D3', 0
00001718= 44 34 00                 682  DREG4       DC.B    'D4', 0
0000171B= 44 35 00                 683  DREG5       DC.B    'D5', 0
0000171E= 44 36 00                 684  DREG6       DC.B    'D6', 0
00001721= 44 37 00                 685  DREG7       DC.B    'D7', 0 
00001724                           686  
00001724                           687  *ADDR REGISTERS PRINTOUT
00001724= 41 30 00                 688  AREG0       DC.B    'A0', 0
00001727= 41 31 00                 689  AREG1       DC.B    'A1', 0
0000172A= 41 32 00                 690  AREG2       DC.B    'A2', 0
0000172D= 41 33 00                 691  AREG3       DC.B    'A3', 0
00001730= 41 34 00                 692  AREG4       DC.B    'A4', 0
00001733= 41 35 00                 693  AREG5       DC.B    'A5', 0
00001736= 41 36 00                 694  AREG6       DC.B    'A6', 0
00001739= 41 37 00                 695  AREG7       DC.B    'A7', 0 
0000173C                           696  
0000173C                           697  *INDR_ADDR REGISTERS PRINTOUT
0000173C= 28 00                    698  INDR_LEFT   DC.B    '(', 0
0000173E= 29 00                    699  INDR_RIGHT  DC.B    ')', 0
00001740= 2B 00                    700  POST_INCRE   DC.B    '+', 0
00001742= 2D 00                    701  PRE_DECRE   DC.B    '-', 0
00001744                           702  
00001744                           703  *SUB
00001744= 53 55 42 00              704  SUBTRACT    DC.B    'SUB', 0
00001748                           705  
00001748= 00000001                 706  addrStart   DC.L    1   // Starting address
0000174C= 00000001                 707  addrEnd     DC.L    1   // ending address
00001750                           708      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   10CE
ADDREND             174C
ADDRLOOP            1072
ADDRREGTABLE        1518
ADDRSTART           1748
ADDVAL              10C8
AREG0               1724
AREG1               1727
AREG2               172A
AREG3               172D
AREG4               1730
AREG5               1733
AREG6               1736
AREG7               1739
B                   10D4
C                   10DA
CHAR                1098
CHECK_MOVEA         12DC
CLRREG              1662
COMMA               16E6
CONVERT             107E
CR                  D
D                   10E0
DATAREGTABLE        14E8
DESTEACHECKER       135A
DESTEAFINDER        1388
DREG0               170C
DREG1               170F
DREG2               1712
DREG3               1715
DREG4               1718
DREG5               171B
DREG6               171E
DREG7               1721
E                   10E6
EA                  130E
EACHECKER           132C
END                 106C
F                   10EC
GETINPUT            1006
INDR_LEFT           173C
INDR_RIGHT          173E
INVALID_EA_ADDR     16B2
INVALID_EA_SUB      16C8
JMPTABLE            1112
JMPTODESTREG        13B8
JMPTOSRCREG         13A8
JMPTO_DEST_ADDR_REG  13D8
JMPTO_DEST_INDR_ADDR_REG  1424
JMPTO_SRC_ADDR_REG  13C8
JMPTO_SRC_INDR_ADDR_REG  13E8
LF                  A
LOOP                1074
MOVEA               170A
MOVEB               16FA
MOVEL               1706
MOVEW               1702
MOVE_PRINT          16F5
OP0000              114E
OP0001              114E
OP0010              1164
OP0011              118C
OP0100              11B4
OP0101              11B4
OP0110              11B4
OP0111              11B4
OP1000              11B4
OP1001              11B4
OPCODE              10F2
OPMODE000           1220
OPMODE001           1232
OPMODE010           1244
OPMODE011           1256
OPMODE100           125C
OPMODE101           126E
OPMODE110           1280
OPMODE111           1292
POST_INCRE          1740
POST_INCREMENT_DEST  14A4
POST_INCREMENT_SRC  1460
PRE_DECRE           1742
PRE_DECREMENT_DEST  14B2
PRE_DECREMENT_SRC   146E
PRINTA              12FE
PRINTCOMMA          1634
PRINTINVALIDEA      1642
PRINTINVALIDSUB     1652
REG_A0              15BE
REG_A1              15D2
REG_A2              15E0
REG_A3              15EE
REG_A4              15FC
REG_A5              160A
REG_A6              1618
REG_A7              1626
REG_D0              1548
REG_D1              155C
REG_D2              156A
REG_D3              1578
REG_D4              1586
REG_D5              1594
REG_D6              15A2
REG_D7              15B0
SIZE_BYTE           16E9
SIZE_LONG           16F1
SIZE_WORD           16ED
START               1000
SUBTABLE            11F0
SUBTRACT            1744
SUB_OPMODE_FIRST    1298
SUB_OPMODE_SECOND   12B6
WELCOME             1674
WELCOME2            1694
