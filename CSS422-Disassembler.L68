00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/3/2020 11:50:24 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *=================================================================
00001000                             9  *                     THIS IS OUR MAIN METHOD
00001000                            10  *               Don't throw random stuff in it, keep it to a minimum
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000  4EB9 00001006             13          JSR     GETINPUT
00001006                            14  *=================================================================
00001006                            15  *---------------Get starting and ending addresss------- Kelvin
00001006                            16  *--------------- PRE: will be using D0, D5, A1
00001006                            17  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            18  GETINPUT:
00001006  43F9 00001702             19          LEA     WELCOME, A1
0000100C  103C 000E                 20          MOVE.B  #14,    D0
00001010  4E4F                      21          TRAP    #15
00001012  327C 0000                 22          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001016  103C 0002                 23          MOVE.B  #2,D0
0000101A  4E4F                      24          TRAP    #15
0000101C  2801                      25          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
0000101E  7000                      26          MOVE.L  #$0, d0  // intitiate counter
00001020  4EB9 00001074             27          JSR     LOOP    // Convert starting address into hex
00001026  23C5 000017DA             28          MOVE.L  D5, addrStart
0000102C  43F9 00001722             29          LEA     WELCOME2, A1
00001032  103C 000E                 30          MOVE.B  #14,    D0
00001036  4E4F                      31          TRAP    #15
00001038  327C 0000                 32          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000103C  103C 0002                 33          MOVE.B  #2,D0
00001040  4E4F                      34          TRAP    #15
00001042  23C5 000017DE             35          MOVE.L  D5, addrEnd
00001048  4245                      36          CLR     D5       // Clear D5 for exit address
0000104A  1801                      37          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 38          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001074             39          JSR     LOOP    // Convert Ending address int Hex
00001056                            40         * MOVEA.L  D0, A0   // Testing
00001056  31FC D4E5 6000            41          MOVE.W  #$D4E5, $6000 // MOVE.L D0, D1, used for testing only
0000105C  45F8 6000                 42          LEA     $6000, A2 //testing
00001060  4EB9 000010F2             43          JSR     OPCODE
00001066  4EF9 0000106C             44          JMP     END
0000106C                            45  END:
0000106C  103C 0009                 46          MOVE.B  #9, D0
00001070  4E4F                      47          TRAP    #15
00001072                            48          
00001072                            49  *Please start from here Annabelle
00001072                            50  AddrLoop:
00001072  60F8                      51          BRA     END     // DELETE THIS WHEN UR WORKING ON IT ANNABELLE!!!!!!!
00001074                            52  LOOP
00001074                            53  
00001074  B880                      54          CMP.L   D0, D4  // Loop until length of word reached
00001076  6E00 0006                 55          BGT     CONVERT
0000107A  5480                      56          ADD.L   #$2, D0 
0000107C  4E75                      57          RTS 
0000107E                            58  
0000107E                            59  *=================================================================
0000107E                            60  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000107E                            61  *PRE      D4 must contain input length, d0 must be 0
0000107E                            62  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000107E                            63  CONVERT:
0000107E  5280                      64          ADDQ.L  #$1, D0 // increment counter
00001080  1211                      65          move.b  (A1),D1    // Get next bit from Input
00001082  5289                      66          adda.L  #1, A1      // Increment Input
00001084  0401 0030                 67          sub.b   #$30,D1     //
00001088  B23C 0010                 68          cmp.b   #$10,D1   // Check if value is larger than 10
0000108C  6E00 000A                 69          bgt     CHAR      // Find Hex
00001090  1401                      70          move.b  D1, D2    // IF it is less than 10
00001092  4EF9 000010C8             71          JMP     ADDVAL        
00001098                            72  CHAR:
00001098  B23C 0011                 73          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
0000109C  6700 0030                 74          BEQ     A
000010A0  B23C 0012                 75          CMP.B   #$12, D1
000010A4  6700 002E                 76          BEQ     B
000010A8  B23C 0013                 77          CMP.B   #$13, D1
000010AC  6700 002C                 78          BEQ     C
000010B0  B23C 0014                 79          CMP.B   #$14, D1
000010B4  6700 002A                 80          BEQ     D
000010B8  B23C 0015                 81          CMP.B   #$15, D1
000010BC  6700 0028                 82          BEQ     E
000010C0  B23C 0016                 83          CMP.B   #$16, D1
000010C4  6700 0026                 84          BEQ     F
000010C8                            85  
000010C8                            86  ADDVAL:
000010C8  E98D                      87          lsl.l    #$4, D5 // Shift based on position
000010CA  DA82                      88          add.l    D2, D5 //Add value into Input
000010CC  60A6                      89          BRA      LOOP
000010CE                            90      
000010CE                            91  A:
000010CE  740A                      92          MOVE.L  #$A, D2 
000010D0  4EF8 10C8                 93          jmp ADDVAL
000010D4                            94  B:
000010D4  740B                      95          MOVE.L  #$B, D2
000010D6  4EF8 10C8                 96          jmp ADDVAL
000010DA                            97  C:
000010DA  740C                      98          MOVE.L  #$C, D2
000010DC  4EF8 10C8                 99          jmp ADDVAL
000010E0                           100  D:
000010E0  740D                     101          MOVE.L  #$D, D2
000010E2  4EF8 10C8                102          jmp ADDVAL
000010E6                           103  E:
000010E6  740E                     104          MOVE.L  #$E, D2
000010E8  4EF8 10C8                105          jmp ADDVAL
000010EC                           106  F:
000010EC  740F                     107          MOVE.L  #$F, D2
000010EE  4EF8 10C8                108          jmp ADDVAL
000010F2                           109          
000010F2                           110  *=======================================================================
000010F2                           111  *---------Find the first 4 of instruction and determines the instruction
000010F2                           112  OPCODE:
000010F2  4EB9 000016F0            113          JSR     CLRREG
000010F8  3212                     114          MOVE.W  (A2), D1
000010FA  2401                     115          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
000010FC  E849                     116          LSR.W   #4, D1
000010FE  E849                     117          LSR.W   #4, D1
00001100  E849                     118          LSR.W   #4, D1  //Right Shift 3 times
00001102  1001                     119          MOVE.B  D1, D0  // OPCODE FOUND
00001104  C0FC 0006                120          MULU    #6, D0
00001108  45F9 00001112            121          LEA     JMPTABLE, A2
0000110E  4EF2 0000                122          JMP     (A2, D0)
00001112                           123          
00001112                           124  *========================================================================
00001112                           125  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001112                           126  *------- Add your instructions here
00001112                           127  JMPTABLE
00001112  4EF9 00001166            128          JMP     OP0000
00001118  4EF9 00001166            129          JMP     OP0001 *MOVEB
0000111E  4EF9 0000117C            130          JMP     OP0010 *MOVEL
00001124  4EF9 000011A4            131          JMP     OP0011 *MOVEW
0000112A  4EF9 000011CC            132          JMP     OP0100 *MOVEM
00001130  4EF9 000011CC            133          JMP     OP0101
00001136  4EF9 000011CC            134          JMP     OP0110
0000113C  4EF9 000011CC            135          JMP     OP0111
00001142  4EF9 00001208            136          JMP     OP1000
00001148  4EF9 000011CC            137          JMP     OP1001 *SUB
0000114E  4EF9 00001208            138          JMP     OP1010
00001154  4EF9 00001208            139          JMP     OP1011
0000115A  4EF9 00001208            140          JMP     OP1100
00001160  4EF9 00001208            141          JMP     OP1101 *ADD
00001166                           142           
00001166                           143  OP0000:
00001166                           144  *-> MOVE.B
00001166                           145  OP0001:
00001166  43F9 00001788            146          LEA     MOVEB, A1
0000116C  103C 000E                147          MOVE.B  #14, D0
00001170  4E4F                     148          TRAP    #15
00001172  4EB9 0000139C            149          JSR     EA * Find SRC EA
00001178  6000 029C                150          BRA     DESTEAFINDER * FIND DEST EA
0000117C                           151  * -> MOVE.L
0000117C                           152  * Printed using MOVEL String as a variable on the very bottom
0000117C                           153  OP0010:
0000117C  43F9 00001783            154          LEA     MOVE_PRINT, A1
00001182  103C 000E                155          MOVE.B  #14, D0
00001186  4E4F                     156          TRAP    #15
00001188  4EB9 0000136A            157          JSR     CHECK_MOVEA
0000118E  43F9 00001794            158          LEA     MOVEL, A1
00001194  103C 000E                159          MOVE.B  #14, D0
00001198  4E4F                     160          TRAP    #15
0000119A  4EB9 0000139C            161          JSR     EA *Find SRC EA
000011A0  6000 0274                162          BRA     DESTEAFINDER *FIND DEST EA
000011A4                           163  * -> MOVE.W
000011A4                           164  OP0011:
000011A4  43F9 00001783            165          LEA     MOVE_PRINT, A1
000011AA  103C 000E                166          MOVE.B  #14, D0
000011AE  4E4F                     167          TRAP    #15
000011B0  4EB9 0000136A            168          JSR     CHECK_MOVEA
000011B6  43F9 00001790            169          LEA     MOVEW, A1
000011BC  103C 000E                170          MOVE.B  #14, D0
000011C0  4E4F                     171          TRAP    #15
000011C2  4EB9 0000139C            172          JSR     EA * FIND SRC EA
000011C8  6000 024C                173          BRA     DESTEAFINDER *FIND DEST EA
000011CC                           174  OP0100:
000011CC                           175  OP0101:
000011CC                           176          
000011CC                           177  OP0110:
000011CC                           178  OP0111:
000011CC                           179          
000011CC                           180  
000011CC                           181  
000011CC                           182  
000011CC                           183  * -> SUB
000011CC                           184  * Splitting Sub into OPMODE and Register value
000011CC                           185  OP1001:
000011CC  43F9 000017D2            186          LEA     SUBTRACT, A1
000011D2  103C 000E                187          MOVE.B  #14, D0
000011D6  4E4F                     188          TRAP    #15
000011D8  E94A                     189          LSL.W   #4, D2
000011DA  3602                     190          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000011DC  E04B                     191          LSR.W   #8, D3 * D3 = D register
000011DE  EA4B                     192          LSR.W   #5, D3
000011E0  3802                     193          MOVE.W  D2, D4 *D4 = SubOPMODE
000011E2  E74C                     194          LSL.W   #3, D4
000011E4  E04C                     195          LSR.W   #8, D4
000011E6  EA4C                     196          LSR.W   #5, D4
000011E8  3202                     197          MOVE.W  D2, D1 * D1 = EA Mode
000011EA  ED49                     198          LSL.W   #6, D1
000011EC  E049                     199          LSR.W   #8, D1
000011EE  EA49                     200          LSR.W   #5, D1
000011F0  3002                     201          MOVE.W  D2, D0 * D0 = EA register
000011F2  E148                     202          LSL.W   #8, D0
000011F4  E348                     203          LSL.W   #1, D0
000011F6  E048                     204          LSR.W   #8, D0
000011F8  EA48                     205          LSR.W   #5, D0
000011FA  45F9 00001244            206          LEA     SubTable, A2
00001200  C8FC 0006                207          MULU    #6, D4
00001204  4EB2 4000                208          JSR     (A2, D4)
00001208                           209          
00001208                           210  OP1000:
00001208                           211  OP1010
00001208                           212  OP1011
00001208                           213  OP1100
00001208                           214          
00001208                           215  * -> ADD
00001208                           216  * Spltting Add into OPMODE and Register Value
00001208                           217  OP1101:
00001208  43F9 000017D6            218          LEA     ADDITION, A1
0000120E  103C 000E                219          MOVE.B  #14, D0
00001212  4E4F                     220          TRAP    #15
00001214  E94A                     221          LSL.W   #4, D2
00001216  3602                     222          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001218  E04B                     223          LSR.W   #8, D3 * D3 = D register
0000121A  EA4B                     224          LSR.W   #5, D3
0000121C  3802                     225          MOVE.W  D2, D4 *D4 = SubOPMODE
0000121E  E74C                     226          LSL.W   #3, D4
00001220  E04C                     227          LSR.W   #8, D4
00001222  EA4C                     228          LSR.W   #5, D4
00001224  3202                     229          MOVE.W  D2, D1 * D1 = EA Mode
00001226  ED49                     230          LSL.W   #6, D1
00001228  E049                     231          LSR.W   #8, D1
0000122A  EA49                     232          LSR.W   #5, D1
0000122C  3002                     233          MOVE.W  D2, D0 * D0 = EA register
0000122E  E148                     234          LSL.W   #8, D0
00001230  E348                     235          LSL.W   #1, D0
00001232  E048                     236          LSR.W   #8, D0
00001234  EA48                     237          LSR.W   #5, D0
00001236  45F9 00001244            238          LEA     SubTable, A2
0000123C  C8FC 0006                239          MULU    #6, D4
00001240  4EB2 4000                240          JSR     (A2, D4)
00001244                           241          
00001244                           242  * =============================================
00001244                           243  * JMP Table for SUB OPMODES
00001244                           244  SubTable:
00001244  4EF9 00001274            245          JMP     OPMODE000 * BYTE  EA->DN
0000124A  4EF9 00001286            246          JMP     OPMODE001 * WORD  RA->DN  
00001250  4EF9 00001298            247          JMP     OPMODE010 * LONG  EA->DN 
00001256  4EF9 000012AA            248          JMP     OPMODE011 * ADDA  WORD
0000125C  4EF9 000012C8            249          JMP     OPMODE100 * BYTE  DN->EA
00001262  4EF9 000012DA            250          JMP     OPMODE101 * BYTE  DN->EA
00001268  4EF9 000012EC            251          JMP     OPMODE110 * BYTE  DN->EA
0000126E  4EF9 000012FE            252          JMP     OPMODE111 * ADDA  LONG
00001274                           253          
00001274                           254  OPMODE000:
00001274  1A00                     255          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001276  43F9 00001777            256          LEA     SIZE_BYTE, A1
0000127C  103C 000E                257          MOVE.B  #14, D0
00001280  4E4F                     258          TRAP    #15
00001282  6000 0080                259          BRA     Sub_OPMODE_FIRST
00001286                           260  OPMODE001
00001286  1A00                     261          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001288  43F9 0000177B            262          LEA     SIZE_Word, A1
0000128E  103C 000E                263          MOVE.B  #14, D0
00001292  4E4F                     264          TRAP    #15
00001294  6000 006E                265          BRA     Sub_OPMODE_FIRST
00001298                           266  OPMODE010
00001298  1A00                     267          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000129A  43F9 0000177F            268          LEA     SIZE_Long, A1
000012A0  103C 000E                269          MOVE.B  #14, D0
000012A4  4E4F                     270          TRAP    #15
000012A6  6000 005C                271          BRA     Sub_OPMODE_FIRST
000012AA                           272  OPMODE011
000012AA  1A00                     273          MOVE.B  D0, D5
000012AC  43F9 00001798            274          LEA     MOVEA, A1
000012B2  103C 000E                275          MOVE.B  #14, D0
000012B6  4E4F                     276          TRAP    #15
000012B8  43F9 0000177B            277          LEA     SIZE_WORD, A1
000012BE  103C 000E                278          MOVE.B  #14, D0
000012C2  4E4F                     279          TRAP    #15
000012C4  6000 0082                280          BRA     Sub_OPMODE_ADDA
000012C8                           281  OPMODE100
000012C8  1A00                     282          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000012CA  43F9 00001777            283          LEA     SIZE_BYTE, A1
000012D0  103C 000E                284          MOVE.B  #14, D0
000012D4  4E4F                     285          TRAP    #15
000012D6  6000 004A                286          BRA     Sub_OPMODE_SECOND
000012DA                           287  OPMODE101
000012DA  1A00                     288          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000012DC  43F9 0000177B            289          LEA     SIZE_Word, A1
000012E2  103C 000E                290          MOVE.B  #14, D0
000012E6  4E4F                     291          TRAP    #15
000012E8  6000 0038                292          BRA     Sub_OPMODE_SECOND
000012EC                           293  OPMODE110
000012EC  1A00                     294          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000012EE  43F9 0000177F            295          LEA     SIZE_LONG, A1
000012F4  103C 000E                296          MOVE.B  #14, D0
000012F8  4E4F                     297          TRAP    #15
000012FA  6000 0026                298          BRA     Sub_OPMODE_SECOND
000012FE                           299  OPMODE111
000012FE  4EF9 000016E0            300          JMP     PRINTInvalidSUB
00001304                           301  
00001304                           302  *===============================================
00001304                           303  * Used for Dn->EA for SUB
00001304                           304  * Called by 001, 010, 100, 
00001304                           305  Sub_OPMODE_FIRST:
00001304  1005                     306          MOVE.B  D5, D0   * TEMP RETURN D0
00001306  4EB9 000013BA            307          JSR     EACHECKER 
0000130C  4240                     308          CLR     D0
0000130E  4241                     309          CLR     D1
00001310  4EB9 000016C2            310          JSR     PRINTCOMMA
00001316  1003                     311          MOVE.B  D3, D0
00001318  4EB9 000013E8            312          JSR     DestEAChecker 
0000131E  6000 FD52                313          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001322                           314          
00001322                           315  Sub_OPMODE_SECOND:
00001322  1801                     316          MOVE.B  D1, D4   *TEMP STORE D1
00001324  4240                     317          CLR     D0  *Clean D0
00001326  1003                     318          MOVE.B  D3, D0
00001328  4241                     319          CLR     D1
0000132A  4EB9 000013BA            320          JSR     EACHECKER 
00001330  4240                     321          CLR     D0
00001332  4241                     322          CLR     D1
00001334  4EB9 000016C2            323          JSR     PRINTCOMMA
0000133A  1005                     324          MOVE.B  D5, D0   * TEMP RETURN D0
0000133C  1204                     325          MOVE.B  D4, D1   * TEMP RETURN D1
0000133E  4EB9 000013E8            326          JSR     DestEAChecker 
00001344  6000 FD2C                327          BRA     addrloop *EA FINISHED-----
00001348                           328  Sub_OPMODE_ADDA:
00001348  1005                     329          MOVE.B  D5, D0   * TEMP RETURN D0
0000134A  4EB9 000013BA            330          JSR     EACHECKER 
00001350  4240                     331          CLR     D0
00001352  4241                     332          CLR     D1
00001354  4EB9 000016C2            333          JSR     PRINTCOMMA
0000135A  1003                     334          MOVE.B  D3, D0
0000135C  123C 0001                335          MOVE.B  #%001, D1
00001360  4EB9 000013E8            336          JSR     DestEAChecker 
00001366  6000 FD0A                337          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
0000136A                           338          
0000136A                           339  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
0000136A                           340  CHECK_MOVEA
0000136A  2602                     341          MOVE.L  D2, D3  * HOlding D2 in D3 temp
0000136C  E18A                     342          LSL.L   #8, D2 // Remove first 20 bits to get opperand
0000136E  E18A                     343          LSL.L   #8, D2
00001370  E98A                     344          LSL.L   #4, D2
00001372  E08A                     345          LSR.L   #8, D2
00001374  E08A                     346          LSR.L   #8, D2
00001376  E88A                     347          LSR.L   #4, D2 // 12 bits of opperand found
00001378  EC8A                     348          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
0000137A  1202                     349          MOVE.B  D2, D1 * Prepare D1 for Mode
0000137C  EB09                     350          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
0000137E  EA09                     351          LSR.B   #5, D1
00001380  B23C 0001                352          CMP.B   #%001, D1
00001384  6700 0006                353          BEQ     PRINTA
00001388  2403                     354          MOVE.L  D3, D2 
0000138A  4E75                     355          RTS * Goes back to OP Value
0000138C                           356          
0000138C                           357  PRINTA
0000138C  43F9 00001798            358          LEA     MOVEA, A1
00001392  103C 000E                359          MOVE.B  #14, D0
00001396  4E4F                     360          TRAP    #15
00001398  2403                     361          MOVE.L  D3, D2
0000139A  4E75                     362          RTS * Goes back to CHECK_MOVEA
0000139C                           363          
0000139C                           364          
0000139C                           365  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
0000139C                           366  *=================================================================
0000139C                           367  *-----------EA-- Calculate EA used for Data Registers
0000139C                           368  *----------Pre: D2, D0, D1 must be clear
0000139C                           369  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
0000139C                           370  EA:
0000139C  4240                     371          CLR     D0  * Clear D0 and D1 so they don't conflict
0000139E  4241                     372          CLR     D1
000013A0  4243                     373          CLR     D3
000013A2  E18A                     374          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000013A4  E18A                     375          LSL.L   #8, D2
000013A6  E98A                     376          LSL.L   #4, D2
000013A8  E08A                     377          LSR.L   #8, D2
000013AA  E08A                     378          LSR.L   #8, D2
000013AC  E88A                     379          LSR.L   #4, D2 // 12 bits of opperand found
000013AE  1002                     380          MOVE.B  D2, D0 Source Data Register
000013B0  EB08                     381          LSL.B   #5, D0
000013B2  EA08                     382          LSR.B   #5, D0
000013B4  1202                     383          MOVE.B  D2, D1 *Source Data Mode
000013B6  E509                     384          LSL.B   #2, D1
000013B8  EA09                     385          LSR.B   #5, D1
000013BA                           386          
000013BA                           387  *=================================================
000013BA                           388  *-----------EA CHECKER------Continues from EA
000013BA                           389  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
000013BA                           390  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
000013BA                           391  EACHECKER: 
000013BA  B23C 0000                392          CMP.B   #%0000, D1
000013BE  6700 0076                393          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
000013C2  B23C 0001                394          CMP.B   #%0001, D1
000013C6  6700 008E                395          BEQ     JMPTO_SRC_ADDR_REG
000013CA  B23C 0002                396          CMP.B   #%0010, D1
000013CE  6700 00A6                397          BEQ     JMPTO_SRC_INDR_ADDR_REG
000013D2  B23C 0003                398          CMP.B   #%0011, D1
000013D6  6700 009E                399          BEQ     JMPTO_SRC_INDR_ADDR_REG
000013DA  B23C 0004                400          CMP.B   #%0100, D1
000013DE  6700 0096                401          BEQ     JMPTO_SRC_INDR_ADDR_REG
000013E2  4EF9 000016D0            402          JMP     PRINTINVALIDEA
000013E8                           403          
000013E8                           404  *=================================================
000013E8                           405  *-----------DEST EA CHECKER------Continues from EA
000013E8                           406  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
000013E8                           407  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
000013E8                           408  DESTEACHECKER:
000013E8  B23C 0000                409          CMP.B   #%0000, D1
000013EC  6700 0058                410          BEQ     JMPTODestREG *JUMPS TO Source D registers
000013F0  B23C 0001                411          CMP.B   #%0001, D1
000013F4  6700 0070                412          BEQ     JMPTO_DEST_ADDR_REG
000013F8  B23C 0002                413          CMP.B   #%0010, D1
000013FC  6700 00B4                414          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001400  B23C 0003                415          CMP.B   #%0011, D1
00001404  6700 00AC                416          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001408  B23C 0004                417          CMP.B   #%0100, D1
0000140C  6700 00A4                418          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001410  4EF9 000016D0            419          JMP     PRINTINVALIDEA
00001416                           420          
00001416                           421  *=================================================      
00001416                           422  * Dest EA Finder
00001416                           423  * PRE: ONLY USED FOR MOVE
00001416                           424  * POST: PRINTS DEST EA  
00001416                           425  DestEAFinder:
00001416  4EB9 000016C2            426          JSR     PRINTCOMMA  * Prints comma between two operrands
0000141C  EC8A                     427          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
0000141E  4241                     428          CLR     D1     * Clear D1 and D0 for opperand mode and register
00001420  4240                     429          CLR     D0
00001422  1202                     430          MOVE.B  D2, D1 * Prepare D1 for Mode
00001424  EB09                     431          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001426  EA09                     432          LSR.B   #5, D1
00001428  1002                     433          MOVE.B  D2, D0  *Prepare D0 for Register
0000142A  E508                     434          LSL.B   #2, D0
0000142C  EA08                     435          LSR.B   #5, D0
0000142E  4EB8 13E8                436          JSR     DESTEACHECKER
00001432  4EF8 106C                437          JMP     END     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00001436                           438  
00001436                           439          
00001436                           440  *===================================================
00001436                           441  *-------------Data Register checker------------------        
00001436                           442  JMPTOSRCREG:
00001436  43F9 00001576            443          LEA     DATAREGTABLE, A1
0000143C  C0FC 0006                444          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001440  4EB1 0000                445          JSR     (A1, D0) *JMP To index A1 + D0
00001444                           446          * EA CONTINUES HERE
00001444  4E75                     447          RTS * BRA DESTEAFINDER DELETED
00001446                           448  JMPToDestReg: *PRINT OUT DEST Registers
00001446  43F9 00001576            449          LEA     DATAREGTABLE, A1
0000144C  C0FC 0006                450          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001450  4EB1 0000                451          JSR     (A1, D0) *JMP to A1 + D0
00001454  4E75                     452          RTS    * Goes Back to DestEAFinder
00001456                           453          
00001456                           454  
00001456                           455  *===================================================
00001456                           456  *-------------Address Register checker------------------             
00001456                           457  JMPTO_SRC_ADDR_REG:
00001456  43F9 000015A6            458          LEA     AddrREGTABLE, A1
0000145C  C0FC 0006                459          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001460  4EB1 0000                460          JSR     (A1, D0) *JMP To index A1 + D0
00001464                           461          * EA CONTINUES HERE
00001464  4E75                     462          RTS * BRA DESTEAFINDER DELETED
00001466                           463  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
00001466  43F9 000015A6            464          LEA     AddrREGTABLE, A1
0000146C  C0FC 0006                465          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001470  4EB1 0000                466          JSR     (A1, D0) *JMP to A1 + D0
00001474  4E75                     467          RTS     * Goes Back to DESTEAFinder
00001476                           468          
00001476                           469  *===================================================
00001476                           470  *-------------Indirect Address Register checker------------------
00001476                           471  *Copied from Address Register checker, basically adding parenthesis () around Address register
00001476                           472  * Also Detects ()+ and -()
00001476                           473  * PRE: D1 stores mode, D0 stores register #
00001476                           474  * D1 to D5 are off limits
00001476                           475  JMPTO_SRC_INDR_ADDR_REG:
00001476  1A00                     476         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
00001478  B23C 0004                477         CMP.B    #%100, D1       * IF IT IS -()
0000147C  6700 007E                478         BEQ      PRE_DECREMENT_SRC
00001480  43F9 000017CA            479         LEA      INDR_LEFT, A1
00001486  103C 000E                480         MOVE.B   #14, D0
0000148A  4E4F                     481         TRAP     #15
0000148C  1005                     482         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
0000148E  43F9 000015A6            483         LEA     AddrREGTABLE, A1
00001494  C0FC 0006                484         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001498  4EB1 0000                485         JSR     (A1, D0) *JMP To index A1 + D0
0000149C  43F9 000017CC            486         LEA      INDR_RIGHT, A1
000014A2  103C 000E                487         MOVE.B   #14, D0
000014A6  4E4F                     488         TRAP     #15
000014A8  B23C 0003                489         CMP.B    #%0011, D1 * IF IT IS ()+
000014AC  6700 0040                490         BEQ      POST_INCREMENT_SRC
000014B0  4E75                     491         RTS * BRA DESTEAFINDER DELETED
000014B2                           492         
000014B2                           493  JMPTO_DEST_INDR_ADDR_REG:
000014B2  1600                     494         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
000014B4  B23C 0004                495         CMP.B    #%100, D1
000014B8  6700 0086                496         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
000014BC  43F9 000017CA            497         LEA      INDR_LEFT, A1
000014C2  103C 000E                498         MOVE.B   #14, D0
000014C6  4E4F                     499         TRAP     #15
000014C8  1003                     500         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
000014CA  43F9 000015A6            501         LEA     AddrREGTABLE, A1
000014D0  C0FC 0006                502         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000014D4  4EB1 0000                503         JSR     (A1, D0) *JMP To index A1 + D0
000014D8  43F9 000017CC            504         LEA      INDR_RIGHT, A1
000014DE  103C 000E                505         MOVE.B   #14, D0
000014E2  4E4F                     506         TRAP     #15
000014E4  B23C 0003                507         CMP.B    #%0011, D1  // IF IT IS ()+
000014E8  6700 0048                508         BEQ      POST_INCREMENT_DEST
000014EC  4E75                     509         RTS      * Goes Back to DestEAFinder
000014EE                           510         
000014EE                           511  POST_INCREMENT_SRC:
000014EE  43F9 000017CE            512         LEA      POST_INCRE, A1
000014F4  103C 000E                513         MOVE.B   #14, D0
000014F8  4E4F                     514         TRAP     #15
000014FA  4E75                     515         RTS * BRA DESTEAFINDER DELETED
000014FC                           516         
000014FC                           517  PRE_DECREMENT_SRC:
000014FC  43F9 000017D0            518         LEA      PRE_DECRE, A1
00001502  103C 000E                519         MOVE.B   #14, D0
00001506  4E4F                     520         TRAP     #15
00001508  43F9 000017CA            521         LEA      INDR_LEFT, A1
0000150E  103C 000E                522         MOVE.B   #14, D0
00001512  4E4F                     523         TRAP     #15
00001514  1005                     524         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001516  43F9 000015A6            525         LEA     AddrREGTABLE, A1
0000151C  C0FC 0006                526         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001520  4EB1 0000                527         JSR     (A1, D0) *JMP To index A1 + D0
00001524  43F9 000017CC            528         LEA      INDR_RIGHT, A1
0000152A  103C 000E                529         MOVE.B   #14, D0
0000152E  4E4F                     530         TRAP     #15
00001530  4E75                     531         RTS * BRA DESTEAFINDER DELETED
00001532                           532  
00001532                           533  POST_INCREMENT_DEST
00001532  43F9 000017CE            534         LEA      POST_INCRE, A1
00001538  103C 000E                535         MOVE.B   #14, D0
0000153C  4E4F                     536         TRAP     #15
0000153E  4E75                     537         RTS      * Goes Back to DestEAFinder
00001540                           538         
00001540                           539  PRE_DECREMENT_DEST:
00001540  43F9 000017D0            540         LEA      PRE_DECRE, A1
00001546  103C 000E                541         MOVE.B   #14, D0
0000154A  4E4F                     542         TRAP     #15
0000154C  43F9 000017CA            543         LEA      INDR_LEFT, A1
00001552  103C 000E                544         MOVE.B   #14, D0
00001556  4E4F                     545         TRAP     #15
00001558  1005                     546         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
0000155A  43F9 000015A6            547         LEA     AddrREGTABLE, A1
00001560  C0FC 0006                548         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001564  4EB1 0000                549         JSR     (A1, D0) *JMP To index A1 + D0
00001568  43F9 000017CC            550         LEA      INDR_RIGHT, A1
0000156E  103C 000E                551         MOVE.B   #14, D0
00001572  4E4F                     552         TRAP     #15
00001574  4E75                     553         RTS      * Goes Back to DestEAFinder
00001576                           554         
00001576                           555  
00001576                           556  
00001576                           557  *=================================================================
00001576                           558  *---------Data Register Table used for printing out Registers----
00001576                           559  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
00001576                           560  DataRegTable
00001576  4EF9 000015D6            561          JMP REG_D0
0000157C  4EF9 000015EA            562          JMP REG_D1
00001582  4EF9 000015F8            563          JMP REG_D2
00001588  4EF9 00001606            564          JMP REG_D3
0000158E  4EF9 00001614            565          JMP REG_D4
00001594  4EF9 00001622            566          JMP REG_D5
0000159A  4EF9 00001630            567          JMP REG_D6
000015A0  4EF9 0000163E            568          JMP REG_D7
000015A6                           569  
000015A6                           570  AddrRegTable:
000015A6                           571          
000015A6  4EF9 0000164C            572          JMP REG_A0
000015AC  4EF9 00001660            573          JMP REG_A1
000015B2  4EF9 0000166E            574          JMP REG_A2
000015B8  4EF9 0000167C            575          JMP REG_A3
000015BE  4EF9 0000168A            576          JMP REG_A4
000015C4  4EF9 00001698            577          JMP REG_A5
000015CA  4EF9 000016A6            578          JMP REG_A6
000015D0  4EF9 000016B4            579          JMP REG_A7
000015D6                           580  
000015D6                           581  * Data Registers Printing        
000015D6                           582  REG_D0:
000015D6  227C 00000000            583          MOVEA.L #$0, A1
000015DC  43F9 0000179A            584          LEA     DREG0, A1
000015E2  103C 000E                585          MOVE.B  #14, D0
000015E6  4E4F                     586          TRAP    #15
000015E8  4E75                     587          RTS
000015EA                           588          
000015EA                           589  REG_D1:
000015EA  43F9 0000179D            590          LEA     DREG1, A1
000015F0  103C 000E                591          MOVE.B  #14, D0
000015F4  4E4F                     592          TRAP    #15
000015F6  4E75                     593          RTS
000015F8                           594  REG_D2:
000015F8  43F9 000017A0            595          LEA     DREG2, A1
000015FE  103C 000E                596          MOVE.B  #14, D0
00001602  4E4F                     597          TRAP    #15
00001604  4E75                     598          RTS
00001606                           599  REG_D3:
00001606  43F9 000017A3            600          LEA     DREG3, A1
0000160C  103C 000E                601          MOVE.B  #14, D0
00001610  4E4F                     602          TRAP    #15
00001612  4E75                     603          RTS
00001614                           604  REG_D4:
00001614  43F9 000017A6            605          LEA     DREG4, A1
0000161A  103C 000E                606          MOVE.B  #14, D0
0000161E  4E4F                     607          TRAP    #15
00001620  4E75                     608          RTS
00001622                           609  REG_D5:
00001622  43F9 000017A9            610          LEA     DREG5, A1
00001628  103C 000E                611          MOVE.B  #14, D0
0000162C  4E4F                     612          TRAP    #15
0000162E  4E75                     613          RTS
00001630                           614  REG_D6:
00001630  43F9 000017AC            615          LEA     DREG6, A1
00001636  103C 000E                616          MOVE.B  #14, D0
0000163A  4E4F                     617          TRAP    #15
0000163C  4E75                     618          RTS
0000163E                           619  REG_D7:
0000163E  43F9 000017AF            620          LEA     DREG7, A1
00001644  103C 000E                621          MOVE.B  #14, D0
00001648  4E4F                     622          TRAP    #15
0000164A  4E75                     623          RTS
0000164C                           624          
0000164C                           625  *--------------------Addr Reigster printing ------------------------*        
0000164C                           626  REG_A0:
0000164C  227C 00000000            627          MOVEA.L #$0, A1
00001652  43F9 000017B2            628          LEA     AREG0, A1
00001658  103C 000E                629          MOVE.B  #14, D0
0000165C  4E4F                     630          TRAP    #15
0000165E  4E75                     631          RTS
00001660                           632          
00001660                           633  REG_A1:
00001660  43F9 000017B5            634          LEA     AREG1, A1
00001666  103C 000E                635          MOVE.B  #14, D0
0000166A  4E4F                     636          TRAP    #15
0000166C  4E75                     637          RTS
0000166E                           638  REG_A2:
0000166E  43F9 000017B8            639          LEA     AREG2, A1
00001674  103C 000E                640          MOVE.B  #14, D0
00001678  4E4F                     641          TRAP    #15
0000167A  4E75                     642          RTS
0000167C                           643  REG_A3:
0000167C  43F9 000017BB            644          LEA     AREG3, A1
00001682  103C 000E                645          MOVE.B  #14, D0
00001686  4E4F                     646          TRAP    #15
00001688  4E75                     647          RTS
0000168A                           648  REG_A4:
0000168A  43F9 000017BE            649          LEA     AREG4, A1
00001690  103C 000E                650          MOVE.B  #14, D0
00001694  4E4F                     651          TRAP    #15
00001696  4E75                     652          RTS
00001698                           653  REG_A5:
00001698  43F9 000017C1            654          LEA     AREG5, A1
0000169E  103C 000E                655          MOVE.B  #14, D0
000016A2  4E4F                     656          TRAP    #15
000016A4  4E75                     657          RTS
000016A6                           658  REG_A6:
000016A6  43F9 000017C4            659          LEA     AREG6, A1
000016AC  103C 000E                660          MOVE.B  #14, D0
000016B0  4E4F                     661          TRAP    #15
000016B2  4E75                     662          RTS
000016B4                           663  REG_A7:
000016B4  43F9 000017C7            664          LEA     AREG7, A1
000016BA  103C 000E                665          MOVE.B  #14, D0
000016BE  4E4F                     666          TRAP    #15
000016C0  4E75                     667          RTS
000016C2                           668          
000016C2                           669  *====================================================PRinting/ ERROR method comes down here=========================================
000016C2                           670  PRINTCOMMA: * Prints comma between two operrands
000016C2  43F9 00001774            671          LEA     COMMA, A1
000016C8  103C 000E                672          MOVE.B  #14, D0
000016CC  4E4F                     673          TRAP    #15
000016CE  4E75                     674          RTS
000016D0                           675          
000016D0                           676  PrintInvalidEA:
000016D0  43F9 00001740            677          LEA     Invalid_EA_Addr, A1
000016D6  103C 000E                678          MOVE.B  #14, D0
000016DA  4E4F                     679          TRAP    #15
000016DC  4EF8 1072                680          JMP     AddrLoop
000016E0                           681          
000016E0                           682  PrintInvalidSUB:
000016E0  43F9 00001756            683          LEA     Invalid_EA_SUB, A1
000016E6  103C 000E                684          MOVE.B  #14, D0
000016EA  4E4F                     685          TRAP    #15
000016EC  4EF8 1072                686          JMP     AddrLoop
000016F0                           687          
000016F0                           688          
000016F0                           689          
000016F0                           690           
000016F0                           691  * Clear all registers    
000016F0                           692  CLRREG:
000016F0  4241                     693      CLR D1
000016F2  4242                     694      CLR D2
000016F4  4243                     695      CLR D3
000016F6  4244                     696      CLR D4
000016F8  4245                     697      CLR D5
000016FA  4246                     698      CLR D6
000016FC  4E75                     699      RTS
000016FE                           700      
000016FE                           701      
000016FE                           702          
000016FE                           703  * Put program code here
000016FE                           704  
000016FE  FFFF FFFF                705      SIMHALT             ; halt simulator
00001702                           706  
00001702                           707  * Put variables and constants here
00001702  =0000000D                708  CR  EQU $0D
00001702  =0000000A                709  LF  EQU $0A
00001702= 50 6C 65 61 73 65 ...    710  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
00001722= 50 6C 65 61 73 65 ...    711  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
00001740= 49 6E 76 61 6C 69 ...    712  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
00001756= 49 6E 76 61 6C 69 ...    713  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00001774                           714  
00001774= 2C 20 00                 715  COMMA       DC.B    ', ', 0
00001777                           716  
00001777                           717  *DATASIZE
00001777= 2E 42 20 00              718  SIZE_BYTE       DC.B    '.B ', 0
0000177B= 2E 57 20 00              719  SIZE_WORD       DC.B    '.W ', 0
0000177F= 2E 4C 20 00              720  SIZE_LONG       DC.B    '.L ', 0
00001783                           721  
00001783                           722  *MOVE OPCODES
00001783= 4D 4F 56 45 00           723  MOVE_PRINT  DC.B    'MOVE', 0
00001788= 4D 4F 56 45 2E 42 ...    724  MOVEB       DC.B    'MOVE.B ', 0
00001790= 2E 57 20 00              725  MOVEW       DC.B    '.W ', 0
00001794= 2E 4C 20 00              726  MOVEL       DC.B    '.L ', 0
00001798= 41 00                    727  MOVEA       DC.B    'A', 0
0000179A                           728  
0000179A                           729  
0000179A                           730  *DATA REGISTERS PRINTOUT
0000179A= 44 30 00                 731  DREG0       DC.B    'D0', 0
0000179D= 44 31 00                 732  DREG1       DC.B    'D1', 0
000017A0= 44 32 00                 733  DREG2       DC.B    'D2', 0
000017A3= 44 33 00                 734  DREG3       DC.B    'D3', 0
000017A6= 44 34 00                 735  DREG4       DC.B    'D4', 0
000017A9= 44 35 00                 736  DREG5       DC.B    'D5', 0
000017AC= 44 36 00                 737  DREG6       DC.B    'D6', 0
000017AF= 44 37 00                 738  DREG7       DC.B    'D7', 0 
000017B2                           739  
000017B2                           740  *ADDR REGISTERS PRINTOUT
000017B2= 41 30 00                 741  AREG0       DC.B    'A0', 0
000017B5= 41 31 00                 742  AREG1       DC.B    'A1', 0
000017B8= 41 32 00                 743  AREG2       DC.B    'A2', 0
000017BB= 41 33 00                 744  AREG3       DC.B    'A3', 0
000017BE= 41 34 00                 745  AREG4       DC.B    'A4', 0
000017C1= 41 35 00                 746  AREG5       DC.B    'A5', 0
000017C4= 41 36 00                 747  AREG6       DC.B    'A6', 0
000017C7= 41 37 00                 748  AREG7       DC.B    'A7', 0 
000017CA                           749  
000017CA                           750  *INDR_ADDR REGISTERS PRINTOUT
000017CA= 28 00                    751  INDR_LEFT   DC.B    '(', 0
000017CC= 29 00                    752  INDR_RIGHT  DC.B    ')', 0
000017CE= 2B 00                    753  POST_INCRE   DC.B    '+', 0
000017D0= 2D 00                    754  PRE_DECRE   DC.B    '-', 0
000017D2                           755  
000017D2                           756  *SUB
000017D2= 53 55 42 00              757  SUBTRACT    DC.B    'SUB', 0
000017D6= 41 44 44 00              758  ADDITION    DC.B    'ADD', 0
000017DA                           759  
000017DA= 00000001                 760  addrStart   DC.L    1   // Starting address
000017DE= 00000001                 761  addrEnd     DC.L    1   // ending address
000017E2                           762      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   10CE
ADDITION            17D6
ADDREND             17DE
ADDRLOOP            1072
ADDRREGTABLE        15A6
ADDRSTART           17DA
ADDVAL              10C8
AREG0               17B2
AREG1               17B5
AREG2               17B8
AREG3               17BB
AREG4               17BE
AREG5               17C1
AREG6               17C4
AREG7               17C7
B                   10D4
C                   10DA
CHAR                1098
CHECK_MOVEA         136A
CLRREG              16F0
COMMA               1774
CONVERT             107E
CR                  D
D                   10E0
DATAREGTABLE        1576
DESTEACHECKER       13E8
DESTEAFINDER        1416
DREG0               179A
DREG1               179D
DREG2               17A0
DREG3               17A3
DREG4               17A6
DREG5               17A9
DREG6               17AC
DREG7               17AF
E                   10E6
EA                  139C
EACHECKER           13BA
END                 106C
F                   10EC
GETINPUT            1006
INDR_LEFT           17CA
INDR_RIGHT          17CC
INVALID_EA_ADDR     1740
INVALID_EA_SUB      1756
JMPTABLE            1112
JMPTODESTREG        1446
JMPTOSRCREG         1436
JMPTO_DEST_ADDR_REG  1466
JMPTO_DEST_INDR_ADDR_REG  14B2
JMPTO_SRC_ADDR_REG  1456
JMPTO_SRC_INDR_ADDR_REG  1476
LF                  A
LOOP                1074
MOVEA               1798
MOVEB               1788
MOVEL               1794
MOVEW               1790
MOVE_PRINT          1783
OP0000              1166
OP0001              1166
OP0010              117C
OP0011              11A4
OP0100              11CC
OP0101              11CC
OP0110              11CC
OP0111              11CC
OP1000              1208
OP1001              11CC
OP1010              1208
OP1011              1208
OP1100              1208
OP1101              1208
OPCODE              10F2
OPMODE000           1274
OPMODE001           1286
OPMODE010           1298
OPMODE011           12AA
OPMODE100           12C8
OPMODE101           12DA
OPMODE110           12EC
OPMODE111           12FE
POST_INCRE          17CE
POST_INCREMENT_DEST  1532
POST_INCREMENT_SRC  14EE
PRE_DECRE           17D0
PRE_DECREMENT_DEST  1540
PRE_DECREMENT_SRC   14FC
PRINTA              138C
PRINTCOMMA          16C2
PRINTINVALIDEA      16D0
PRINTINVALIDSUB     16E0
REG_A0              164C
REG_A1              1660
REG_A2              166E
REG_A3              167C
REG_A4              168A
REG_A5              1698
REG_A6              16A6
REG_A7              16B4
REG_D0              15D6
REG_D1              15EA
REG_D2              15F8
REG_D3              1606
REG_D4              1614
REG_D5              1622
REG_D6              1630
REG_D7              163E
SIZE_BYTE           1777
SIZE_LONG           177F
SIZE_WORD           177B
START               1000
SUBTABLE            1244
SUBTRACT            17D2
SUB_OPMODE_ADDA     1348
SUB_OPMODE_FIRST    1304
SUB_OPMODE_SECOND   1322
WELCOME             1702
WELCOME2            1722
