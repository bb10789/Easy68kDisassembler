00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/11/2020 8:25:27 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00005000                            12      ORG     $5000
00005000                            13  SPECIALTEST:
00005000  5A41                      14          ADDQ    #5, D1
00005002                            15  
00006000                            16      ORG    $6000
00006000                            17  ROLTEST:
00006000                            18  
00006000                            19  
00006000                            20  
00006000                            21  
00006000                            22  
00009000                            23      ORG    $9000
00009000                            24  TESTER:
00009000  4611                      25          NOT.B       (A1)
00009002  4659                      26          NOT.W       (A1)+
00009004  4693                      27          NOT.L       (A3)
00009006  1200                      28          MOVE.B    D0,D1
00009008  1200                      29          MOVE.B    D0,D1
0000900A                            30  
0000900A                            31    
0000900A                            32  
00001000                            33      ORG    $1000
00001000                            34  *=================================================================
00001000                            35  *                     THIS IS OUR MAIN METHOD
00001000                            36  *               Don't throw random stuff in it, keep it to a minimum
00001000                            37  
00001000                            38  START:                  ; first instruction of program
00001000  4EB9 00001006             39          JSR     GETINPUT
00001006                            40  *=================================================================
00001006                            41  *---------------Get starting and ending addresss------- Kelvin
00001006                            42  *--------------- PRE: will be using D0, D5, A1
00001006                            43  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            44  GETINPUT:
00001006  4EB9 00001D1A             45          JSR     CLRREG    *clean registers to restart program
0000100C  4EB9 00001D2C             46          JSR     CLRAREG
00001012  23FC 00000000 00001ED4    47          MOVE.L  #0, ScreenCounter * initalize screenCounter
0000101C  43F9 00001D56             48          LEA     WELCOME, A1
00001022  103C 000E                 49          MOVE.B  #14,    D0
00001026  4E4F                      50          TRAP    #15
00001028  327C 0000                 51          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000102C  103C 0002                 52          MOVE.B  #2,D0
00001030  4E4F                      53          TRAP    #15
00001032  2801                      54          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001034  7000                      55          MOVE.L  #$0, d0  // intitiate counter
00001036  4EB9 00001188             56          JSR     LOOP    // Convert starting address into hex
0000103C  23C5 00001EC8             57          MOVE.L  D5, addrStart
00001042  43F9 00001D76             58          LEA     WELCOME2, A1
00001048  103C 000E                 59          MOVE.B  #14,    D0
0000104C  4E4F                      60          TRAP    #15
0000104E  327C 0000                 61          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001052  103C 0002                 62          MOVE.B  #2,D0
00001056  4E4F                      63          TRAP    #15
00001058  4245                      64          CLR     D5       // Clear D5 for exit address
0000105A  1801                      65          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000105C  103C 0000                 66          MOVE.B  #$0, d0  // intitiate counter
00001060  4EB9 00001188             67          JSR     LOOP    // Convert Ending address int Hex
00001066  23C5 00001ECC             68          MOVE.L  D5, addrEnd
0000106C  4EB9 00001086             69          JSR     CheckRange
00001072  2039 00001EC8             70          MOVE.L  addrStart, D0
00001078  2C40                      71          MOVEA.L D0, A6
0000107A  4EB9 00001206             72          JSR     OPCODE
00001080  4EF9 000010E0             73          JMP     END
00001086                            74  
00001086                            75  *==================================================================
00001086                            76  *-----------------Check if the range is above or under the limit
00001086                            77  *------------------Pre: addrStart and addrEnd has begin and end values
00001086                            78          
00001086                            79  CheckRange:
00001086  2C79 00001EC8             80          MOVE.L  AddrStart, A6
0000108C  203C 00003000             81          MOVE.L  #LowerLimit, D0
00001092  B08E                      82          CMP.L   A6, D0
00001094  6E00 0C58                 83          BGT     PRINTINVALIDADDRESS
00001098  203C 00FFFFFE             84          MOVE.L  #UpperLimit, D0
0000109E  B08E                      85          CMP.L   A6, D0
000010A0  6D00 0C4C                 86          BLT     PRINTINVALIDADDRESS
000010A4  2039 00001EC8             87          MOVE.L  AddrStart, D0
000010AA  0800 0000                 88          BTST    #0, D0
000010AE  6600 0C3E                 89          BNE     PRINTInvalidAddress
000010B2  2C79 00001ECC             90          MOVE.L  AddrEnd, A6
000010B8  203C 00003000             91          MOVE.L  #LowerLimit, D0
000010BE  B08E                      92          CMP.L   A6, D0
000010C0  6E00 0C2C                 93          BGT     PRINTINVALIDADDRESS
000010C4  203C 00FFFFFE             94          MOVE.L  #UpperLimit, D0
000010CA  B08E                      95          CMP.L   A6, D0
000010CC  6D00 0C20                 96          BLT     PRINTINVALIDADDRESS
000010D0  2039 00001ECC             97          MOVE.L  AddrEnd, D0
000010D6  0800 0000                 98          BTST    #0, D0
000010DA  6600 0C12                 99          BNE     PrintInvalidAddress
000010DE  4E75                     100          RTS
000010E0                           101  
000010E0                           102  END:
000010E0  43F9 00001E15            103          LEA     TY_Message, A1
000010E6  103C 000E                104          MOVE.B  #14, D0
000010EA  4E4F                     105          TRAP    #15
000010EC  103C 0009                106          MOVE.B  #9, D0
000010F0  4E4F                     107          TRAP    #15
000010F2                           108          
000010F2                           109  *Please start from here Annabelle
000010F2                           110  AddrLoop:
000010F2  4EB9 00001D1A            111          JSR     CLRREG    *clean registers to restart program
000010F8  4EB9 00001D2C            112          JSR     CLRAREG
000010FE  43F9 00001E12            113          LEA     PRINT_NEXTLINE, A1
00001104  103C 000E                114          MOVE.B  #14, D0
00001108  4E4F                     115          TRAP    #15
0000110A  2879 00001ECC            116          MOVE.L  addrEnd, A4
00001110  B9CE                     117          CMP.L   A6, A4
00001112  6F00 0018                118          BLE     CHECK_CONT
00001116  5239 00001ED4            119          ADD.B   #1, ScreenCounter
0000111C  0C39 001E 00001ED4       120          CMP.B   #30, ScreenCounter
00001124  6700 0030                121          BEQ     Next_Screen
00001128  6000 00DC                122          BRA     OPCODE
0000112C                           123          
0000112C                           124  *===========Check if user wants to continue
0000112C                           125  CHECK_CONT:
0000112C  43F9 00001DE3            126          LEA     Continue_Program, A1
00001132  103C 000E                127          MOVE.B  #14, D0
00001136  4E4F                     128          TRAP    #15
00001138  43F8 0050                129          LEA     YesNoStorage, A1
0000113C  103C 0002                130          MOVE.B  #2, D0
00001140  4E4F                     131          TRAP    #15
00001142  0C11 0059                132          CMP.B   #$59, (A1) * Yes
00001146  6700 FEBE                133          BEQ     GETINPUT
0000114A  0C11 0079                134          CMP.B   #$79, (A1)
0000114E  6700 FEB6                135          BEQ     GETINPUT
00001152  4EF8 10E0                136          JMP     END
00001156                           137          
00001156                           138  NEXT_SCREEN:
00001156  13FC 0000 00001ED4       139          MOVE.B  #0, ScreenCounter
0000115E  43F9 00001DFB            140          LEA     Continue_Screen, A1
00001164  103C 000E                141          MOVE.B  #14, D0
00001168  4E4F                     142          TRAP    #15
0000116A  43F8 0050                143          LEA     YesNoStorage, A1
0000116E  103C 0002                144          MOVE.B  #2, D0
00001172  4E4F                     145          TRAP    #15
00001174  0C11 0059                146          CMP.B   #$59, (A1) * Yes
00001178  6700 FF78                147          BEQ     AddrLoop
0000117C  0C11 0079                148          CMP.B   #$79, (A1)
00001180  6700 FF70                149          BEQ     AddrLoop
00001184  4EF8 10E0                150          JMP     END
00001188                           151          
00001188                           152  LOOP
00001188                           153  
00001188  B880                     154          CMP.L   D0, D4  // Loop until length of word reached
0000118A  6E00 0006                155          BGT     CONVERT
0000118E  5480                     156          ADD.L   #$2, D0 
00001190  4E75                     157          RTS 
00001192                           158  
00001192                           159  *=================================================================
00001192                           160  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
00001192                           161  *PRE      D4 must contain input length, d0 must be 0
00001192                           162  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
00001192                           163  CONVERT:
00001192  5280                     164          ADDQ.L  #$1, D0 // increment counter
00001194  1211                     165          move.b  (A1),D1    // Get next bit from Input
00001196  5289                     166          adda.L  #1, A1      // Increment Input
00001198  0401 0030                167          sub.b   #$30,D1     //
0000119C  B23C 0010                168          cmp.b   #$10,D1   // Check if value is larger than 10
000011A0  6E00 000A                169          bgt     CHAR      // Find Hex
000011A4  1401                     170          move.b  D1, D2    // IF it is less than 10
000011A6  4EF9 000011DC            171          JMP     ADDVAL        
000011AC                           172  CHAR:
000011AC  B23C 0011                173          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
000011B0  6700 0030                174          BEQ     A
000011B4  B23C 0012                175          CMP.B   #$12, D1
000011B8  6700 002E                176          BEQ     B
000011BC  B23C 0013                177          CMP.B   #$13, D1
000011C0  6700 002C                178          BEQ     C
000011C4  B23C 0014                179          CMP.B   #$14, D1
000011C8  6700 002A                180          BEQ     D
000011CC  B23C 0015                181          CMP.B   #$15, D1
000011D0  6700 0028                182          BEQ     E
000011D4  B23C 0016                183          CMP.B   #$16, D1
000011D8  6700 0026                184          BEQ     F
000011DC                           185  
000011DC                           186  ADDVAL:
000011DC  E98D                     187          lsl.l    #$4, D5 // Shift based on position
000011DE  DA82                     188          add.l    D2, D5 //Add value into Input
000011E0  60A6                     189          BRA      LOOP
000011E2                           190      
000011E2                           191  A:
000011E2  740A                     192          MOVE.L  #$A, D2 
000011E4  4EF8 11DC                193          jmp ADDVAL
000011E8                           194  B:
000011E8  740B                     195          MOVE.L  #$B, D2
000011EA  4EF8 11DC                196          jmp ADDVAL
000011EE                           197  C:
000011EE  740C                     198          MOVE.L  #$C, D2
000011F0  4EF8 11DC                199          jmp ADDVAL
000011F4                           200  D:
000011F4  740D                     201          MOVE.L  #$D, D2
000011F6  4EF8 11DC                202          jmp ADDVAL
000011FA                           203  E:
000011FA  740E                     204          MOVE.L  #$E, D2
000011FC  4EF8 11DC                205          jmp ADDVAL
00001200                           206  F:
00001200  740F                     207          MOVE.L  #$F, D2
00001202  4EF8 11DC                208          jmp ADDVAL
00001206                           209          
00001206                           210  *=======================================================================
00001206                           211  *---------Find the first 4 of instruction and determines the instruction
00001206                           212  OPCODE:
00001206  4280                     213          CLR.L   D0
00001208  4281                     214          CLR.L   D1
0000120A  4282                     215          CLR.L   D2
0000120C  220E                     216          MOVE.L  A6, D1  * PRINT ADDRESS PER LINE
0000120E  143C 0010                217          MOVE.B  #16, D2
00001212  103C 000F                218          MOVE.B  #15, D0
00001216  4E4F                     219          TRAP    #15
00001218  227C 00000000            220          MOVE.L  #$00000000, A1
0000121E  43F9 00001E3A            221          LEA     SPACER, A1
00001224  103C 000E                222          MOVE.B  #14, D0
00001228  4E4F                     223          TRAP    #15
0000122A  4280                     224          CLR.L     D0
0000122C  4281                     225          CLR.L     D1
0000122E  4282                     226          CLR.L     D2
00001230  321E                     227          MOVE.W  (A6)+,D1
00001232  2401                     228          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
00001234  E849                     229          LSR.W   #4, D1
00001236  E849                     230          LSR.W   #4, D1
00001238  E849                     231          LSR.W   #4, D1  //Right Shift 3 times
0000123A  1001                     232          MOVE.B  D1, D0  // OPCODE FOUND
0000123C  B03C 000E                233          CMP.B   #%1110, D0
00001240  6E00 0ABC                234          BGT     PRINTDATA
00001244  C0FC 0006                235          MULU    #6, D0
00001248                           236          *MOVE.B  D0, OpCodeSize
00001248  45F9 00001252            237          LEA     JMPTABLE, A2
0000124E  4EF2 0000                238          JMP     (A2, D0)
00001252                           239          
00001252                           240  *========================================================================
00001252                           241  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001252                           242  *------- Add your instructions here
00001252                           243  JMPTABLE
00001252  4EF9 000012AC            244          JMP     OP0000
00001258  4EF9 000012AC            245          JMP     OP0001 *MOVEB
0000125E  4EF9 000012CA            246          JMP     OP0010 *MOVEL
00001264  4EF9 000012FA            247          JMP     OP0011 *MOVEW
0000126A  4EF9 00001322            248          JMP     OP0100 *NOT
00001270  4EF9 000013C6            249          JMP     OP0101
00001276  4EF9 00001476            250          JMP     OP0110
0000127C  4EF9 00001476            251          JMP     OP0111
00001282  4EF9 000014B2            252          JMP     OP1000 *OR
00001288  4EF9 00001476            253          JMP     OP1001 *SUB
0000128E  4EF9 000014F6            254          JMP     OP1010
00001294  4EF9 000014F6            255          JMP     OP1011
0000129A  4EF9 000014F6            256          JMP     OP1100 *AND
000012A0  4EF9 00001532            257          JMP     OP1101 *ADD
000012A6  4EF9 0000156E            258          JMP     OP1110 *ROR ROL
000012AC                           259  
000012AC                           260  *=====================================================================    
000012AC                           261  *--------------D2 must contain Entire opcode for everything below
000012AC                           262  OP0000:
000012AC                           263  *-> MOVE.B
000012AC                           264  OP0001:
000012AC  13FC 0000 00001ED8       265          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012B4  43F9 00001E4F            266          LEA     MOVEB, A1
000012BA  103C 000E                267          MOVE.B  #14, D0
000012BE  4E4F                     268          TRAP    #15
000012C0  4EB9 000018A8            269          JSR     EA * Find SRC EA
000012C6  6000 066A                270          BRA     DESTEAFINDER * FIND DEST EA
000012CA                           271  * -> MOVE.L
000012CA                           272  * Printed using MOVEL String as a variable on the very bottom
000012CA                           273  OP0010:
000012CA  13FC 0002 00001ED8       274          MOVE.B  #%10, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012D2  43F9 00001E4A            275          LEA     MOVE_PRINT, A1
000012D8  103C 000E                276          MOVE.B  #14, D0
000012DC  4E4F                     277          TRAP    #15
000012DE  4EB9 00001876            278          JSR     CHECK_MOVEA
000012E4  43F9 00001E5F            279          LEA     MOVEL, A1
000012EA  103C 000E                280          MOVE.B  #14, D0
000012EE  4E4F                     281          TRAP    #15
000012F0  4EB9 000018A8            282          JSR     EA *Find SRC EA
000012F6  6000 063A                283          BRA     DESTEAFINDER *FIND DEST EA
000012FA                           284  * -> MOVE.W
000012FA                           285  OP0011:
000012FA  43F9 00001E4A            286          LEA     MOVE_PRINT, A1
00001300  103C 000E                287          MOVE.B  #14, D0
00001304  4E4F                     288          TRAP    #15
00001306  4EB9 00001876            289          JSR     CHECK_MOVEA
0000130C  43F9 00001E5B            290          LEA     MOVEW, A1
00001312  103C 000E                291          MOVE.B  #14, D0
00001316  4E4F                     292          TRAP    #15
00001318  4EB9 000018A8            293          JSR     EA * FIND SRC EA
0000131E  6000 0612                294          BRA     DESTEAFINDER *FIND DEST EA
00001322                           295          
00001322                           296  *-> NOT
00001322                           297  OP0100:
00001322  43F9 00001EBC            298          LEA     NOT_OP, A1
00001328  103C 000E                299          MOVE.B  #14, D0
0000132C  4E4F                     300          TRAP    #15
0000132E  E14A                     301          LSL.W   #8, D2
00001330  3602                     302          MOVE.W  D2, D3 * D3 = SIZE OF INSTRUCTION
00001332  E04B                     303          LSR.W   #8, D3
00001334  EC4B                     304          LSR.W   #6, D3
00001336  3202                     305          MOVE.W  D2, D1 * D1 = EA OPMODE
00001338  E549                     306          LSL.W   #2, D1
0000133A  E049                     307          LSR.W   #8, D1
0000133C  EA49                     308          LSR.W   #5, D1
0000133E  3002                     309          MOVE.W  D2, D0 * D0 = EA REGISTER
00001340  EB48                     310          LSL.W   #5, D0
00001342  E048                     311          LSR.W   #8, D0
00001344  EA48                     312          LSR.W   #5, D0
00001346  C6FC 0006                313          MULU    #6, D3 * Multiply for JMPTABLE
0000134A  45F9 00001354            314          LEA     NOT_JMPTable, A2
00001350  4EB2 3000                315          JSR     (A2, D3)
00001354                           316          
00001354                           317  NOT_JMPTable
00001354  4EF9 0000136C            318          JMP     NOT_SIZE00
0000135A  4EF9 0000138E            319          JMP     NOT_SIZE01
00001360  4EF9 000013A8            320          JMP     NOT_SIZE10
00001366  4EF9 000013C2            321          JMP     NOT_SIZE11
0000136C                           322  *NOT.B
0000136C                           323  NOT_SIZE00:
0000136C  13FC 0000 00001ED8       324          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001374  1A00                     325          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
00001376  43F9 00001E57            326          LEA     SIZE_B, A1
0000137C  103C 000E                327          MOVE.B  #14, D0
00001380  4E4F                     328          TRAP    #15
00001382  1005                     329          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001384  4EB9 000018C6            330          JSR     EACHECKER
0000138A  6000 FD66                331          BRA     AddrLoop
0000138E                           332  * NOT.W
0000138E                           333  NOT_SIZE01: 
0000138E  1A00                     334          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001390  43F9 00001E42            335          LEA     SIZE_WORD, A1
00001396  103C 000E                336          MOVE.B  #14, D0
0000139A  4E4F                     337          TRAP    #15
0000139C  1005                     338          MOVE.B  D5, D0 * RETURN TEMP STORAGE
0000139E  4EB9 000018C6            339          JSR     EACHECKER
000013A4  6000 FD4C                340          BRA     AddrLoop
000013A8                           341  * NOT.L
000013A8                           342  NOT_SIZE10:
000013A8  1A00                     343          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
000013AA  43F9 00001E46            344          LEA     SIZE_LONG, A1
000013B0  103C 000E                345          MOVE.B  #14, D0
000013B4  4E4F                     346          TRAP    #15
000013B6  1005                     347          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013B8  4EB9 000018C6            348          JSR     EACHECKER
000013BE  6000 FD32                349          BRA     AddrLoop
000013C2                           350  NOT_SIZE11:
000013C2  6000 090A                351          BRA     PRINTINVALIDEA
000013C6                           352  
000013C6                           353  
000013C6                           354  *-> ADDQ            
000013C6                           355  OP0101:
000013C6  43F9 00001E6C            356          LEA     ADDQ, A1
000013CC  103C 000E                357          MOVE.B  #14, D0
000013D0  4E4F                     358          TRAP    #15
000013D2  E94A                     359          LSL.W   #4, D2
000013D4  3C02                     360          MOVE.W  D2, D6 *D1 Immediate DATA
000013D6  E04E                     361          LSR.W   #8, D6
000013D8  EA4E                     362          LSR.W   #5, D6
000013DA  3802                     363          MOVE.W  D2, D4 * D4 OPCode Size
000013DC  E94C                     364          LSL.W   #4, D4
000013DE  E04C                     365          LSR.W   #8, D4
000013E0  EC4C                     366          LSR.W   #6, D4
000013E2  3202                     367          MOVE.W  D2, D1 * D1 EA Mode
000013E4  ED49                     368          LSL.W   #6, D1
000013E6  E049                     369          LSR.W   #8, D1
000013E8  EA49                     370          LSR.W   #5, D1
000013EA  3A02                     371          MOVE.W  D2, D5 * D5 EA REgister
000013EC  E14D                     372          LSL.W   #8, D5
000013EE  E34D                     373          LSL.W   #1, D5
000013F0  E04D                     374          LSR.W   #8, D5
000013F2  EA4D                     375          LSR.W   #5, D5
000013F4                           376          
000013F4                           377          
000013F4                           378  ADDQ_Size_TABLE:
000013F4  B83C 0000                379          CMP.B   #%000, D4
000013F8  6700 0012                380          BEQ     ADDQ_B
000013FC  B83C 0001                381          CMP.B   #%001, D4
00001400  6700 001C                382          BEQ     ADDQ_W
00001404  B83C 0002                383          CMP.B   #%010, D4
00001408  6700 002A                384          BEQ     ADDQ_L
0000140C                           385          
0000140C                           386  ADDQ_B
0000140C  43F9 00001E3E            387          LEA     SIZE_BYTE,A1
00001412  103C 000E                388          MOVE.B  #14, D0
00001416  4E4F                     389          TRAP    #15
00001418  4EF9 00001446            390          JMP     ADDQ_Print_immediate
0000141E                           391          
0000141E                           392  ADDQ_W
0000141E  43F9 00001E42            393          LEA     SIZE_WORD,A1
00001424  103C 000E                394          MOVE.B  #14, D0
00001428  4E4F                     395          TRAP    #15
0000142A  B23C 0000                396          CMP.B   #%0, D1
0000142E  4EF9 00001446            397          JMP     ADDQ_Print_immediate
00001434                           398  
00001434                           399  ADDQ_L
00001434  43F9 00001E46            400          LEA     SIZE_LONG,A1
0000143A  103C 000E                401          MOVE.B  #14, D0
0000143E  4E4F                     402          TRAP    #15
00001440  4EF9 00001446            403          JMP     ADDQ_Print_immediate
00001446                           404          
00001446                           405          
00001446                           406  ADDQ_Print_immediate
00001446  43F9 00001EAB            407          LEA     POUND_SIGN, A1
0000144C  103C 000E                408          MOVE.B  #14, D0
00001450  4E4F                     409          TRAP    #15
00001452  BC3C 0000                410          CMP.B   #%0000, D6
00001456  6700 0284                411          BEQ     PRINT8
0000145A                           412          
0000145A  103C 000F                413          MOVE.B  #15, D0
0000145E  4E4F                     414          TRAP    #15
00001460                           415          
00001460                           416  ADDQ_Print_ImmediateCONT:
00001460  4EB9 00001CC0            417          JSR     PRINTCOMMA
00001466  1005                     418          MOVE.B  D5, D0
00001468  123C 0000                419          MOVE.B  #%000, D1
0000146C  4EB9 000018FC            420          JSR     DESTEACHECKER
00001472  4EF8 10F2                421          JMP     AddrLoop
00001476                           422  
00001476                           423  
00001476                           424         
00001476                           425          
00001476                           426  OP0110:
00001476                           427  OP0111:
00001476                           428          
00001476                           429  
00001476                           430  
00001476                           431  
00001476                           432  * -> SUB
00001476                           433  * Splitting Sub into OPMODE and Register value
00001476                           434  OP1001:
00001476  43F9 00001EAD            435          LEA     SUBTRACT, A1
0000147C  103C 000E                436          MOVE.B  #14, D0
00001480  4E4F                     437          TRAP    #15
00001482  E94A                     438          LSL.W   #4, D2
00001484  3602                     439          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001486  E04B                     440          LSR.W   #8, D3 * D3 = D register
00001488  EA4B                     441          LSR.W   #5, D3
0000148A  3802                     442          MOVE.W  D2, D4 *D4 = SubOPMODE
0000148C  E74C                     443          LSL.W   #3, D4
0000148E  E04C                     444          LSR.W   #8, D4
00001490  EA4C                     445          LSR.W   #5, D4
00001492  3202                     446          MOVE.W  D2, D1 * D1 = EA Mode
00001494  ED49                     447          LSL.W   #6, D1
00001496  E049                     448          LSR.W   #8, D1
00001498  EA49                     449          LSR.W   #5, D1
0000149A  3002                     450          MOVE.W  D2, D0 * D0 = EA register
0000149C  E148                     451          LSL.W   #8, D0
0000149E  E348                     452          LSL.W   #1, D0
000014A0  E048                     453          LSR.W   #8, D0
000014A2  EA48                     454          LSR.W   #5, D0
000014A4  45F9 000016EC            455          LEA     SubTable, A2
000014AA  C8FC 0006                456          MULU    #6, D4
000014AE  4EB2 4000                457          JSR     (A2, D4)
000014B2                           458  * -> OR
000014B2                           459  * Splitting AND into OPMODE and Register value       
000014B2                           460  OP1000:
000014B2  43F9 00001EB9            461          LEA     OR, A1
000014B8  103C 000E                462          MOVE.B  #14, D0
000014BC  4E4F                     463          TRAP    #15
000014BE  E94A                     464          LSL.W   #4, D2
000014C0  3602                     465          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000014C2  E04B                     466          LSR.W   #8, D3 * D3 = D register
000014C4  EA4B                     467          LSR.W   #5, D3
000014C6  3802                     468          MOVE.W  D2, D4 *D4 = SubOPMODE
000014C8  E74C                     469          LSL.W   #3, D4
000014CA  E04C                     470          LSR.W   #8, D4
000014CC  EA4C                     471          LSR.W   #5, D4
000014CE  3202                     472          MOVE.W  D2, D1 * D1 = EA Mode
000014D0  ED49                     473          LSL.W   #6, D1
000014D2  E049                     474          LSR.W   #8, D1
000014D4  EA49                     475          LSR.W   #5, D1
000014D6  B23C 0001                476          CMP.B   #%0001, D1
000014DA  6700 07F2                477          BEQ     PRINTINVALIDEA
000014DE  3002                     478          MOVE.W  D2, D0 * D0 = EA register
000014E0  E148                     479          LSL.W   #8, D0
000014E2  E348                     480          LSL.W   #1, D0
000014E4  E048                     481          LSR.W   #8, D0
000014E6  EA48                     482          LSR.W   #5, D0
000014E8  45F9 000016EC            483          LEA     SubTable, A2
000014EE  C8FC 0006                484          MULU    #6, D4
000014F2  4EB2 4000                485          JSR     (A2, D4)
000014F6                           486  OP1010
000014F6                           487  OP1011
000014F6                           488  * -> AND
000014F6                           489  * Splitting AND into OPMODE and Register value
000014F6                           490  OP1100
000014F6  43F9 00001EB5            491          LEA     AND, A1
000014FC  103C 000E                492          MOVE.B  #14, D0
00001500  4E4F                     493          TRAP    #15
00001502  E94A                     494          LSL.W   #4, D2
00001504  3602                     495          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001506  E04B                     496          LSR.W   #8, D3 * D3 = D register
00001508  EA4B                     497          LSR.W   #5, D3
0000150A  3802                     498          MOVE.W  D2, D4 *D4 = SubOPMODE
0000150C  E74C                     499          LSL.W   #3, D4
0000150E  E04C                     500          LSR.W   #8, D4
00001510  EA4C                     501          LSR.W   #5, D4
00001512  3202                     502          MOVE.W  D2, D1 * D1 = EA Mode
00001514  ED49                     503          LSL.W   #6, D1
00001516  E049                     504          LSR.W   #8, D1
00001518  EA49                     505          LSR.W   #5, D1
0000151A  3002                     506          MOVE.W  D2, D0 * D0 = EA register
0000151C  E148                     507          LSL.W   #8, D0
0000151E  E348                     508          LSL.W   #1, D0
00001520  E048                     509          LSR.W   #8, D0
00001522  EA48                     510          LSR.W   #5, D0
00001524  45F9 000016EC            511          LEA     SubTable, A2
0000152A  C8FC 0006                512          MULU    #6, D4
0000152E  4EB2 4000                513          JSR     (A2, D4)
00001532                           514          
00001532                           515  * -> ADD
00001532                           516  * Spltting Add into OPMODE and Register Value
00001532                           517  OP1101:
00001532  43F9 00001EB1            518          LEA     ADDITION, A1
00001538  103C 000E                519          MOVE.B  #14, D0
0000153C  4E4F                     520          TRAP    #15
0000153E  E94A                     521          LSL.W   #4, D2
00001540  3602                     522          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001542  E04B                     523          LSR.W   #8, D3 * D3 = D register
00001544  EA4B                     524          LSR.W   #5, D3
00001546  3802                     525          MOVE.W  D2, D4 *D4 = SubOPMODE
00001548  E74C                     526          LSL.W   #3, D4
0000154A  E04C                     527          LSR.W   #8, D4
0000154C  EA4C                     528          LSR.W   #5, D4
0000154E  3202                     529          MOVE.W  D2, D1 * D1 = EA Mode
00001550  ED49                     530          LSL.W   #6, D1
00001552  E049                     531          LSR.W   #8, D1
00001554  EA49                     532          LSR.W   #5, D1
00001556  3002                     533          MOVE.W  D2, D0 * D0 = EA register
00001558  E148                     534          LSL.W   #8, D0
0000155A  E348                     535          LSL.W   #1, D0
0000155C  E048                     536          LSR.W   #8, D0
0000155E  EA48                     537          LSR.W   #5, D0
00001560  45F9 000016EC            538          LEA     SubTable, A2
00001566  C8FC 0006                539          MULU    #6, D4
0000156A  4EB2 4000                540          JSR     (A2, D4)
0000156E                           541  
0000156E                           542  *-> ROL, ROR        
0000156E                           543  OP1110:
0000156E  E94A                     544          LSL.W   #4, D2
00001570  3C02                     545          MOVE.W  D2, D6 * Shift size
00001572  E04E                     546          LSR.W   #8, D6
00001574  EA4E                     547          LSR.W   #5, D6
00001576  3602                     548          MOVE.W  D2, D3 * L/R
00001578  E74B                     549          LSL.W   #3, D3
0000157A  E04B                     550          LSR.W   #8, D3
0000157C  EE4B                     551          LSR.W   #7, D3
0000157E  3802                     552          MOVE.W  D2, D4 * Size field
00001580  E94C                     553          LSL.W   #4, D4
00001582  E04C                     554          LSR.W   #8, D4
00001584  EC4C                     555          LSR.W   #6, D4
00001586  3202                     556          MOVE.W  D2, D1 *immediate/register
00001588  ED49                     557          LSL.W   #6, D1
0000158A  E049                     558          LSR.W   #8, D1
0000158C  EE49                     559          LSR.W   #7, D1
0000158E  3A02                     560          MOVE.W  D2, D5 * Shift Register
00001590  E14D                     561          LSL.W   #8, D5
00001592  E34D                     562          LSL.W   #1, D5
00001594  E04D                     563          LSR.W   #8, D5
00001596  EA4D                     564          LSR.W   #5, D5
00001598  C6FC 0006                565          MULU    #6, D3
0000159C  43F9 000015A6            566          LEA     RotateTable, A1
000015A2  4EB1 3000                567          JSR     (A1, D3)
000015A6                           568          
000015A6                           569  RotateTable:
000015A6  4EF9 000015B2            570          JMP     Rotate_RIGHT
000015AC  4EF9 000015C4            571          JMP     Rotate_LEFT
000015B2                           572          
000015B2                           573  Rotate_Right
000015B2  43F9 00001EC4            574          LEA     ROR, A1
000015B8  103C 000E                575          MOVE.B  #14, D0
000015BC  4E4F                     576          TRAP    #15
000015BE  4EF9 000015D6            577          JMP     Rotate_Size_Table
000015C4                           578          
000015C4                           579  Rotate_Left
000015C4  43F9 00001EC0            580          LEA     ROL, A1
000015CA  103C 000E                581          MOVE.B  #14, D0
000015CE  4E4F                     582          TRAP    #15
000015D0  4EF9 000015D6            583          JMP     Rotate_Size_Table
000015D6                           584          
000015D6                           585  Rotate_Size_TABLE:
000015D6  B83C 0000                586          CMP.B   #%000, D4
000015DA  6700 001A                587          BEQ     Rotate_B
000015DE  B83C 0001                588          CMP.B   #%001, D4
000015E2  6700 002E                589          BEQ     Rotate_W
000015E6  B83C 0002                590          CMP.B   #%010, D4
000015EA  6700 0042                591          BEQ     Rotate_L
000015EE  B83C 0003                592          CMP.B   #%11, D4
000015F2  6700 0056                593          BEQ     Rotate_EA
000015F6                           594          
000015F6                           595  Rotate_B
000015F6  43F9 00001E3E            596          LEA     SIZE_BYTE,A1
000015FC  103C 000E                597          MOVE.B  #14, D0
00001600  4E4F                     598          TRAP    #15
00001602  B23C 0000                599          CMP.B   #%0, D1
00001606  6700 00A0                600          BEQ     Rotate_Print_immediate
0000160A  B23C 0001                601          CMP.B   #%1, D1
0000160E  6700 007E                602          BEQ     Rotate_Print_Register
00001612                           603          
00001612                           604  Rotate_W
00001612  43F9 00001E42            605          LEA     SIZE_WORD,A1
00001618  103C 000E                606          MOVE.B  #14, D0
0000161C  4E4F                     607          TRAP    #15
0000161E  B23C 0000                608          CMP.B   #%0, D1
00001622  6700 0084                609          BEQ     Rotate_Print_immediate
00001626  B23C 0001                610          CMP.B   #%1, D1
0000162A  6700 0062                611          BEQ     Rotate_Print_Register
0000162E                           612  
0000162E                           613  Rotate_L
0000162E  43F9 00001E46            614          LEA     SIZE_LONG,A1
00001634  103C 000E                615          MOVE.B  #14, D0
00001638  4E4F                     616          TRAP    #15
0000163A  B23C 0000                617          CMP.B   #%0, D1
0000163E  6700 0068                618          BEQ     Rotate_Print_immediate
00001642  B23C 0001                619          CMP.B   #%1, D1
00001646  6700 0046                620          BEQ     Rotate_Print_Register
0000164A                           621          
0000164A                           622  Rotate_EA
0000164A  13FC 0001 00001ED8       623          MOVE.B  #%01, OpCodeSize
00001652  43F9 00001E3A            624          LEA     SPACER, A1
00001658  103C 000E                625          MOVE.B  #14, D0
0000165C  4E4F                     626          TRAP    #15
0000165E  1005                     627          MOVE.B  D5, D0
00001660  1202                     628          MOVE.B  D2, D1
00001662  ED49                     629          LSL.W   #6, D1
00001664  E049                     630          LSR.W   #8, D1
00001666  EA49                     631          LSR.W   #5, D1
00001668                           632          
00001668                           633  ROTATE_EACHECKER:
00001668  B23C 0002                634          CMP.B   #%0010, D1
0000166C  6700 0360                635          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001670  B23C 0003                636          CMP.B   #%0011, D1
00001674  6700 0358                637          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001678  B23C 0004                638          CMP.B   #%0100, D1
0000167C  6700 0350                639          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001680  4EF9 00001CCE            640          JMP     PRINTINVALIDEA
00001686  B23C 0007                641          CMP.B   #%0111, D1
0000168A  6700 0424                642          BEQ     JMPTO_DEST_IMMEDIATE
0000168E                           643          
0000168E                           644  Rotate_Print_REGISTER
0000168E  1006                     645          MOVE.B  D6, D0
00001690  123C 0000                646          MOVE.B  #%000, D1
00001694  4EB9 000018C6            647          JSR     EACHECKER
0000169A  1005                     648          MOVE.B  D5, D0
0000169C  4241                     649          CLR     D1
0000169E  4EB9 000018FC            650          JSR     DESTEACHECKER
000016A4  4EF8 10F2                651          JMP     AddrLoop
000016A8                           652          
000016A8                           653  Rotate_Print_immediate
000016A8  43F9 00001EAB            654          LEA     POUND_SIGN, A1
000016AE  103C 000E                655          MOVE.B  #14, D0
000016B2  4E4F                     656          TRAP    #15
000016B4  BC3C 0000                657          CMP.B   #%0000, D6
000016B8  6700 0022                658          BEQ     PRINT8
000016BC  1206                     659          MOVE.B  D6, D1
000016BE  143C 000A                660          MOVE.B  #10, D2
000016C2  103C 000F                661          MOVE.B  #15, D0
000016C6  4E4F                     662          TRAP    #15
000016C8                           663          
000016C8                           664  Rotate_Print_ImmediateCONT:
000016C8  4EB9 00001CC0            665          JSR     PRINTCOMMA
000016CE  1005                     666          MOVE.B  D5, D0
000016D0  123C 0000                667          MOVE.B  #%000, D1
000016D4  4EB8 1668                668          JSR     ROTATE_EACHECKER
000016D8  4EF8 10F2                669          JMP     AddrLoop
000016DC                           670  
000016DC                           671  PRINT8:
000016DC  1204                     672          MOVE.B  D4, D1
000016DE  143C 000A                673          MOVE.B  #10, D2
000016E2  103C 000F                674          MOVE.B  #15, D0
000016E6  4E4F                     675          TRAP    #15
000016E8  4EF8 16C8                676          JMP     Rotate_Print_ImmediateCONT
000016EC                           677          
000016EC                           678  * End of ROR, ROL, (Kelvin)                
000016EC                           679          
000016EC                           680  * =============================================
000016EC                           681  * JMP Table for SUB OPMODES
000016EC                           682  SubTable:
000016EC  4EF9 0000171C            683          JMP     OPMODE000 * BYTE  EA->DN
000016F2  4EF9 00001736            684          JMP     OPMODE001 * WORD  RA->DN  
000016F8  4EF9 00001748            685          JMP     OPMODE010 * LONG  EA->DN 
000016FE  4EF9 0000175A            686          JMP     OPMODE011 * ADDA  WORD
00001704  4EF9 00001788            687          JMP     OPMODE100 * BYTE  DN->EA
0000170A  4EF9 000017A0            688          JMP     OPMODE101 * BYTE  DN->EA
00001710  4EF9 000017B8            689          JMP     OPMODE110 * BYTE  DN->EA
00001716  4EF9 000017D0            690          JMP     OPMODE111 * ADDA  LONG
0000171C                           691          
0000171C                           692  OPMODE000:
0000171C  13FC 0000 00001ED8       693          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001724  1A00                     694          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001726  43F9 00001E3E            695          LEA     SIZE_BYTE, A1
0000172C  103C 000E                696          MOVE.B  #14, D0
00001730  4E4F                     697          TRAP    #15
00001732  6000 00DC                698          BRA     Sub_OPMODE_FIRST
00001736                           699  OPMODE001
00001736  1A00                     700          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001738  43F9 00001E42            701          LEA     SIZE_Word, A1
0000173E  103C 000E                702          MOVE.B  #14, D0
00001742  4E4F                     703          TRAP    #15
00001744  6000 00CA                704          BRA     Sub_OPMODE_FIRST
00001748                           705  OPMODE010
00001748  1A00                     706          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000174A  43F9 00001E46            707          LEA     SIZE_Long, A1
00001750  103C 000E                708          MOVE.B  #14, D0
00001754  4E4F                     709          TRAP    #15
00001756  6000 00B8                710          BRA     Sub_OPMODE_FIRST
0000175A                           711  *===============================================
0000175A                           712  *Special OPMODE can only be used by ADD
0000175A                           713  OPMODE011
0000175A  0C38 000D 1206           714          CMP.B   #%1101, OpCode
00001760  6700 0008                715          BEQ     Special_OPMODE_USED
00001764  4EF9 00001CCE            716          JMP     PRINTINVALIDEA
0000176A                           717  Special_OPMODE_USED:
0000176A  1A00                     718          MOVE.B  D0, D5
0000176C  43F9 00001E63            719          LEA     MOVEA, A1
00001772  103C 000E                720          MOVE.B  #14, D0
00001776  4E4F                     721          TRAP    #15
00001778  43F9 00001E42            722          LEA     SIZE_WORD, A1
0000177E  103C 000E                723          MOVE.B  #14, D0
00001782  4E4F                     724          TRAP    #15
00001784  6000 00CE                725          BRA     Sub_OPMODE_ADDA
00001788                           726  OPMODE100
00001788  1A00                     727          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000178A  43F9 00001E3E            728          LEA     SIZE_BYTE, A1
00001790  103C 000E                729          MOVE.B  #14, D0
00001794  4E4F                     730          TRAP    #15
00001796  4EB9 000017FE            731          JSR     Memory_Alterable_Check
0000179C  6000 0090                732          BRA     Sub_OPMODE_SECOND
000017A0                           733  OPMODE101
000017A0  1A00                     734          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000017A2  43F9 00001E42            735          LEA     SIZE_Word, A1
000017A8  103C 000E                736          MOVE.B  #14, D0
000017AC  4E4F                     737          TRAP    #15
000017AE  4EB9 000017FE            738          JSR     Memory_Alterable_Check
000017B4  6000 0078                739          BRA     Sub_OPMODE_SECOND
000017B8                           740  OPMODE110
000017B8  1A00                     741          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000017BA  43F9 00001E46            742          LEA     SIZE_LONG, A1
000017C0  103C 000E                743          MOVE.B  #14, D0
000017C4  4E4F                     744          TRAP    #15
000017C6  4EB9 000017FE            745          JSR     Memory_Alterable_Check
000017CC  6000 0060                746          BRA     Sub_OPMODE_SECOND
000017D0                           747  OPMODE111:
000017D0  0C38 000D 1206           748          CMP.B   #%1101, OpCode
000017D6  6700 0008                749          BEQ     Special_OPMODE_USED2
000017DA  4EF9 00001CCE            750          JMP     PRINTINVALIDEA
000017E0                           751  Special_OPMODE_USED2:
000017E0  1A00                     752          MOVE.B  D0, D5
000017E2  43F9 00001E63            753          LEA     MOVEA, A1
000017E8  103C 000E                754          MOVE.B  #14, D0
000017EC  4E4F                     755          TRAP    #15
000017EE  43F9 00001E46            756          LEA     SIZE_LONG, A1
000017F4  103C 000E                757          MOVE.B  #14, D0
000017F8  4E4F                     758          TRAP    #15
000017FA  6000 0058                759          BRA     Sub_OPMODE_ADDA
000017FE                           760  *===================================================
000017FE                           761  * USED FOR SUB AND OR, check if dest EA is memory Alterable
000017FE                           762  
000017FE                           763  Memory_Alterable_Check:
000017FE  B23C 0000                764          CMP.B   #%000, D1
00001802  6700 04CA                765          BEQ     PRINTINVALIDEA
00001806  B23C 0001                766          CMP.B   #%001, D1
0000180A  6700 04C2                767          BEQ     PRINTINVALIDEA
0000180E  4E75                     768          RTS
00001810                           769          
00001810                           770  *===============================================
00001810                           771  * Used for Dn->EA for SUB
00001810                           772  * Called by 001, 010, 100, 
00001810                           773  Sub_OPMODE_FIRST:
00001810  1005                     774          MOVE.B  D5, D0   * TEMP RETURN D0
00001812  4EB9 000018C6            775          JSR     EACHECKER 
00001818  4280                     776          CLR.L     D0
0000181A  4281                     777          CLR.L     D1
0000181C  4EB9 00001CC0            778          JSR     PRINTCOMMA
00001822  1003                     779          MOVE.B  D3, D0
00001824  4EB9 000018FC            780          JSR     DestEAChecker 
0000182A  6000 F8C6                781          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
0000182E                           782  *===============================================
0000182E                           783  * Used for Dn->EA for SUB
0000182E                           784  * Called by 100, 101, 110 
0000182E                           785  Sub_OPMODE_SECOND:
0000182E  1801                     786          MOVE.B  D1, D4   *TEMP STORE D1
00001830  4280                     787          CLR.L     D0  *Clean D0
00001832  1003                     788          MOVE.B  D3, D0
00001834  4281                     789          CLR.L     D1
00001836  4EB9 000018C6            790          JSR     EACHECKER yeah
0000183C  4280                     791          CLR.L     D0
0000183E  4281                     792          CLR.L     D1
00001840  4EB9 00001CC0            793          JSR     PRINTCOMMA
00001846  1005                     794          MOVE.B  D5, D0   * TEMP RETURN D0
00001848  1204                     795          MOVE.B  D4, D1   * TEMP RETURN D1
0000184A  4EB9 000018FC            796          JSR     DestEAChecker 
00001850  6000 F8A0                797          BRA     addrloop *EA FINISHED-----
00001854                           798  *===============================================
00001854                           799  * Used for Dn->EA for SUB
00001854                           800  * Called by 011, 111
00001854                           801  Sub_OPMODE_ADDA:
00001854  1005                     802          MOVE.B  D5, D0   * TEMP RETURN D0
00001856  4EB9 000018C6            803          JSR     EACHECKER 
0000185C  4240                     804          CLR     D0
0000185E  4241                     805          CLR     D1
00001860  4EB9 00001CC0            806          JSR     PRINTCOMMA
00001866  1003                     807          MOVE.B  D3, D0
00001868  123C 0001                808          MOVE.B  #%001, D1
0000186C  4EB9 000018FC            809          JSR     DestEAChecker 
00001872  6000 F87E                810          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001876                           811          
00001876                           812  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
00001876                           813  CHECK_MOVEA
00001876  2602                     814          MOVE.L  D2, D3  * HOlding D2 in D3 temp
00001878  E18A                     815          LSL.L   #8, D2 // Remove first 20 bits to get opperand
0000187A  E18A                     816          LSL.L   #8, D2
0000187C  E98A                     817          LSL.L   #4, D2
0000187E  E08A                     818          LSR.L   #8, D2
00001880  E08A                     819          LSR.L   #8, D2
00001882  E88A                     820          LSR.L   #4, D2 // 12 bits of opperand found
00001884  EC8A                     821          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001886  1202                     822          MOVE.B  D2, D1 * Prepare D1 for Mode
00001888  EB09                     823          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
0000188A  EA09                     824          LSR.B   #5, D1
0000188C  B23C 0001                825          CMP.B   #%001, D1
00001890  6700 0006                826          BEQ     PRINTA
00001894  2403                     827          MOVE.L  D3, D2 
00001896  4E75                     828          RTS * Goes back to OP Value
00001898                           829          
00001898                           830  PRINTA
00001898  43F9 00001E63            831          LEA     MOVEA, A1
0000189E  103C 000E                832          MOVE.B  #14, D0
000018A2  4E4F                     833          TRAP    #15
000018A4  2403                     834          MOVE.L  D3, D2
000018A6  4E75                     835          RTS * Goes back to CHECK_MOVEA
000018A8                           836          
000018A8                           837          
000018A8                           838  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
000018A8                           839  *=================================================================
000018A8                           840  *-----------EA-- Calculate EA used for Data Registers
000018A8                           841  *----------Pre: D2, D0, D1 must be clear
000018A8                           842  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
000018A8                           843  EA:
000018A8  4280                     844          CLR.L     D0  * Clear D0 and D1 so they don't conflict
000018AA  4281                     845          CLR.L     D1
000018AC  4283                     846          CLR.L     D3
000018AE  E18A                     847          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000018B0  E18A                     848          LSL.L   #8, D2
000018B2  E98A                     849          LSL.L   #4, D2
000018B4  E08A                     850          LSR.L   #8, D2
000018B6  E08A                     851          LSR.L   #8, D2
000018B8  E88A                     852          LSR.L   #4, D2 // 12 bits of opperand found
000018BA  1002                     853          MOVE.B  D2, D0 Source Data Register
000018BC  EB08                     854          LSL.B   #5, D0
000018BE  EA08                     855          LSR.B   #5, D0
000018C0  1202                     856          MOVE.B  D2, D1 *Source Data Mode
000018C2  E509                     857          LSL.B   #2, D1
000018C4  EA09                     858          LSR.B   #5, D1
000018C6                           859          
000018C6                           860  *=================================================
000018C6                           861  *-----------EA CHECKER------Continues from EA
000018C6                           862  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
000018C6                           863  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
000018C6                           864  EACHECKER: 
000018C6  B23C 0000                865          CMP.B   #%0000, D1
000018CA  6700 0086                866          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
000018CE  B23C 0001                867          CMP.B   #%0001, D1
000018D2  6700 009E                868          BEQ     JMPTO_SRC_ADDR_REG
000018D6  B23C 0002                869          CMP.B   #%0010, D1
000018DA  6700 00B6                870          BEQ     JMPTO_SRC_INDR_ADDR_REG
000018DE  B23C 0003                871          CMP.B   #%0011, D1
000018E2  6700 00AE                872          BEQ     JMPTO_SRC_INDR_ADDR_REG
000018E6  B23C 0004                873          CMP.B   #%0100, D1
000018EA  6700 00A6                874          BEQ     JMPTO_SRC_INDR_ADDR_REG
000018EE  B23C 0007                875          CMP.B   #%0111, D1
000018F2  6700 019E                876          BEQ     JMPTO_SRC_IMMEDIATE
000018F6  4EF9 00001CCE            877          JMP     PRINTINVALIDEA
000018FC                           878          
000018FC                           879  *=================================================
000018FC                           880  *-----------DEST EA CHECKER------Continues from EA
000018FC                           881  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
000018FC                           882  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
000018FC                           883  DESTEACHECKER:
000018FC  B23C 0000                884          CMP.B   #%0000, D1
00001900  6700 0060                885          BEQ     JMPTODestREG *JUMPS TO Source D registers
00001904  B23C 0001                886          CMP.B   #%0001, D1
00001908  6700 0078                887          BEQ     JMPTO_DEST_ADDR_REG
0000190C  B23C 0002                888          CMP.B   #%0010, D1
00001910  6700 00BC                889          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001914  B23C 0003                890          CMP.B   #%0011, D1
00001918  6700 00B4                891          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000191C  B23C 0004                892          CMP.B   #%0100, D1
00001920  6700 00AC                893          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001924  B23C 0007                894          CMP.B   #%0111, D1
00001928  6700 0186                895          BEQ     JMPTO_DEST_IMMEDIATE
0000192C  4EF9 00001CCE            896          JMP     PRINTINVALIDEA
00001932                           897          
00001932                           898  *=================================================      
00001932                           899  * Dest EA Finder
00001932                           900  * PRE: ONLY USED FOR MOVE
00001932                           901  * POST: PRINTS DEST EA  
00001932                           902  DestEAFinder:
00001932  4EB9 00001CC0            903          JSR     PRINTCOMMA  * Prints comma between two operrands
00001938  EC8A                     904          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
0000193A  4241                     905          CLR     D1     * Clear D1 and D0 for opperand mode and register
0000193C  4240                     906          CLR     D0
0000193E  1202                     907          MOVE.B  D2, D1 * Prepare D1 for Mode
00001940  EB09                     908          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001942  EA09                     909          LSR.B   #5, D1
00001944  1002                     910          MOVE.B  D2, D0  *Prepare D0 for Register
00001946  E508                     911          LSL.B   #2, D0
00001948  EA08                     912          LSR.B   #5, D0
0000194A  4EB8 18FC                913          JSR     DESTEACHECKER
0000194E  4EF8 10F2                914          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00001952                           915  
00001952                           916          
00001952                           917  *===================================================
00001952                           918  *-------------Data Register checker------------------        
00001952                           919  JMPTOSRCREG:
00001952  43F9 00001B74            920          LEA     DATAREGTABLE, A1
00001958  C0FC 0006                921          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000195C  4EB1 0000                922          JSR     (A1, D0) *JMP To index A1 + D0
00001960                           923          * EA CONTINUES HERE
00001960  4E75                     924          RTS * BRA DESTEAFINDER DELETED
00001962                           925  JMPToDestReg: *PRINT OUT DEST Registers
00001962  43F9 00001B74            926          LEA     DATAREGTABLE, A1
00001968  C0FC 0006                927          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
0000196C  4EB1 0000                928          JSR     (A1, D0) *JMP to A1 + D0
00001970  4E75                     929          RTS    * Goes Back to DestEAFinder
00001972                           930          
00001972                           931  
00001972                           932  *===================================================
00001972                           933  *-------------Address Register checker------------------             
00001972                           934  JMPTO_SRC_ADDR_REG:
00001972  43F9 00001BA4            935          LEA     AddrREGTABLE, A1
00001978  C0FC 0006                936          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000197C  4EB1 0000                937          JSR     (A1, D0) *JMP To index A1 + D0
00001980                           938          * EA CONTINUES HERE
00001980  4E75                     939          RTS * BRA DESTEAFINDER DELETED
00001982                           940  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
00001982  43F9 00001BA4            941          LEA     AddrREGTABLE, A1
00001988  C0FC 0006                942          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
0000198C  4EB1 0000                943          JSR     (A1, D0) *JMP to A1 + D0
00001990  4E75                     944          RTS     * Goes Back to DESTEAFinder
00001992                           945          
00001992                           946  *===================================================
00001992                           947  *-------------Indirect Address Register checker------------------
00001992                           948  *Copied from Address Register checker, basically adding parenthesis () around Address register
00001992                           949  * Also Detects ()+ and -()
00001992                           950  * PRE: D1 stores mode, D0 stores register #
00001992                           951  * D1 to D5 are off limits
00001992                           952  JMPTO_SRC_INDR_ADDR_REG:
00001992  1A00                     953         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
00001994  B23C 0004                954         CMP.B    #%100, D1       * IF IT IS -()
00001998  6700 007E                955         BEQ      PRE_DECREMENT_SRC
0000199C  43F9 00001EA1            956         LEA      INDR_LEFT, A1
000019A2  103C 000E                957         MOVE.B   #14, D0
000019A6  4E4F                     958         TRAP     #15
000019A8  1005                     959         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000019AA  43F9 00001BA4            960         LEA     AddrREGTABLE, A1
000019B0  C0FC 0006                961         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000019B4  4EB1 0000                962         JSR     (A1, D0) *JMP To index A1 + D0
000019B8  43F9 00001EA3            963         LEA      INDR_RIGHT, A1
000019BE  103C 000E                964         MOVE.B   #14, D0
000019C2  4E4F                     965         TRAP     #15
000019C4  B23C 0003                966         CMP.B    #%0011, D1 * IF IT IS ()+
000019C8  6700 0040                967         BEQ      POST_INCREMENT_SRC
000019CC  4E75                     968         RTS * BRA DESTEAFINDER DELETED
000019CE                           969         
000019CE                           970  JMPTO_DEST_INDR_ADDR_REG:
000019CE  1A00                     971         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
000019D0  B23C 0004                972         CMP.B    #%100, D1
000019D4  6700 0086                973         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
000019D8  43F9 00001EA1            974         LEA      INDR_LEFT, A1
000019DE  103C 000E                975         MOVE.B   #14, D0
000019E2  4E4F                     976         TRAP     #15
000019E4  1003                     977         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
000019E6  43F9 00001BA4            978         LEA     AddrREGTABLE, A1
000019EC  C0FC 0006                979         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000019F0  4EB1 0000                980         JSR     (A1, D0) *JMP To index A1 + D0
000019F4  43F9 00001EA3            981         LEA      INDR_RIGHT, A1
000019FA  103C 000E                982         MOVE.B   #14, D0
000019FE  4E4F                     983         TRAP     #15
00001A00  B23C 0003                984         CMP.B    #%0011, D1  // IF IT IS ()+
00001A04  6700 0048                985         BEQ      POST_INCREMENT_DEST
00001A08  4E75                     986         RTS      * Goes Back to DestEAFinder
00001A0A                           987         
00001A0A                           988  POST_INCREMENT_SRC:
00001A0A  43F9 00001EA5            989         LEA      POST_INCRE, A1
00001A10  103C 000E                990         MOVE.B   #14, D0
00001A14  4E4F                     991         TRAP     #15
00001A16  4E75                     992         RTS * BRA DESTEAFINDER DELETED
00001A18                           993         
00001A18                           994  PRE_DECREMENT_SRC:
00001A18  43F9 00001EA7            995         LEA      PRE_DECRE, A1
00001A1E  103C 000E                996         MOVE.B   #14, D0
00001A22  4E4F                     997         TRAP     #15
00001A24  43F9 00001EA1            998         LEA      INDR_LEFT, A1
00001A2A  103C 000E                999         MOVE.B   #14, D0
00001A2E  4E4F                    1000         TRAP     #15
00001A30  1005                    1001         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001A32  43F9 00001BA4           1002         LEA     AddrREGTABLE, A1
00001A38  C0FC 0006               1003         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001A3C  4EB1 0000               1004         JSR     (A1, D0) *JMP To index A1 + D0
00001A40  43F9 00001EA3           1005         LEA      INDR_RIGHT, A1
00001A46  103C 000E               1006         MOVE.B   #14, D0
00001A4A  4E4F                    1007         TRAP     #15
00001A4C  4E75                    1008         RTS * BRA DESTEAFINDER DELETED
00001A4E                          1009  
00001A4E                          1010  POST_INCREMENT_DEST
00001A4E  43F9 00001EA5           1011         LEA      POST_INCRE, A1
00001A54  103C 000E               1012         MOVE.B   #14, D0
00001A58  4E4F                    1013         TRAP     #15
00001A5A  4E75                    1014         RTS      * Goes Back to DestEAFinder
00001A5C                          1015         
00001A5C                          1016  PRE_DECREMENT_DEST:
00001A5C  43F9 00001EA7           1017         LEA      PRE_DECRE, A1
00001A62  103C 000E               1018         MOVE.B   #14, D0
00001A66  4E4F                    1019         TRAP     #15
00001A68  43F9 00001EA1           1020         LEA      INDR_LEFT, A1
00001A6E  103C 000E               1021         MOVE.B   #14, D0
00001A72  4E4F                    1022         TRAP     #15
00001A74  1005                    1023         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001A76  43F9 00001BA4           1024         LEA     AddrREGTABLE, A1
00001A7C  C0FC 0006               1025         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001A80  4EB1 0000               1026         JSR     (A1, D0) *JMP To index A1 + D0
00001A84  43F9 00001EA3           1027         LEA      INDR_RIGHT, A1
00001A8A  103C 000E               1028         MOVE.B   #14, D0
00001A8E  4E4F                    1029         TRAP     #15
00001A90  4E75                    1030         RTS      * Goes Back to DestEAFinder
00001A92                          1031         
00001A92                          1032  JMPTO_SRC_IMMEDIATE:
00001A92  B03C 0000               1033         CMP.B    #%000, D0
00001A96  6700 002E               1034         BEQ      Address_W
00001A9A  B03C 0001               1035         CMP.B    #%001, D0
00001A9E  6700 0044               1036         BEQ      Address_L
00001AA2  B03C 0004               1037         CMP.B    #%100, D0
00001AA6  6700 005A               1038         BEQ      Address_Immediate
00001AAA  4EF9 00001CCE           1039         JMP      PRINTINVALIDEA
00001AB0                          1040  *===================================  
00001AB0                          1041  * Same as SRC but without Immediate address     
00001AB0                          1042  JMPTO_DEST_IMMEDIATE:
00001AB0  B03C 0000               1043         CMP.B    #%000, D0
00001AB4  6700 0010               1044         BEQ      Address_W
00001AB8  B03C 0001               1045         CMP.B    #%001, D0
00001ABC  6700 0026               1046         BEQ      Address_L
00001AC0  4EF9 00001CCE           1047         JMP      PRINTINVALIDEA
00001AC6                          1048         
00001AC6                          1049  Address_W:
00001AC6  43F9 00001EA9           1050          LEA     DOLLAR_SIGN, A1
00001ACC  103C 000E               1051          MOVE.B  #14, D0
00001AD0  4E4F                    1052          TRAP    #15
00001AD2  4241                    1053          CLR     D1
00001AD4  4240                    1054          CLR     D0
00001AD6  321E                    1055          MOVE.W  (A6)+, D1
00001AD8  143C 0010               1056          MOVE.B  #16, D2
00001ADC  103C 000F               1057          MOVE.B  #15, D0
00001AE0  4E4F                    1058          TRAP    #15 
00001AE2  4E75                    1059          RTS 
00001AE4                          1060  
00001AE4                          1061  Address_L
00001AE4  43F9 00001EA9           1062          LEA     DOLLAR_SIGN, A1
00001AEA  103C 000E               1063          MOVE.B  #14, D0
00001AEE  4E4F                    1064          TRAP    #15
00001AF0  4241                    1065          CLR     D1
00001AF2  4240                    1066          CLR     D0
00001AF4  221E                    1067          MOVE.L  (A6)+, D1
00001AF6  143C 0010               1068          MOVE.B  #16, D2
00001AFA  103C 000F               1069          MOVE.B  #15, D0
00001AFE  4E4F                    1070          TRAP    #15
00001B00  4E75                    1071          RTS  
00001B02                          1072          
00001B02                          1073  Address_Immediate:
00001B02  43F9 00001EAB           1074          LEA     POUND_SIGN, A1
00001B08  103C 000E               1075          MOVE.B  #14, D0
00001B0C  4E4F                    1076          TRAP    #15
00001B0E  43F9 00001EA9           1077          LEA     DOLLAR_SIGN, A1
00001B14  103C 000E               1078          MOVE.B  #14, D0
00001B18  4E4F                    1079          TRAP    #15
00001B1A  0C39 0001 00001ED8      1080          CMP.B   #%01, OpCodeSize *01 is used to mark invalid immediate for example ROR, ROL
00001B22  6700 01AA               1081          BEQ     PRINTINVALIDEA
00001B26  0C39 0000 00001ED8      1082          CMP.B   #%00, OpCodeSize
00001B2E  6700 001A               1083          BEQ     Immediate_B
00001B32  0C39 0003 00001ED8      1084          CMP.B   #%11, OpCodeSize
00001B3A  6700 001C               1085          BEQ     Immediate_W
00001B3E  0C39 0002 00001ED8      1086          CMP.B   #%10, OpCOdeSize
00001B46  6700 001E               1087          BEQ     Immediate_L
00001B4A                          1088          
00001B4A                          1089  Immediate_B:
00001B4A  121E                    1090          MOVE.B  (A6)+, D1
00001B4C  143C 0010               1091          MOVE.B  #16, D2
00001B50  103C 000F               1092          MOVE.B  #15, D0
00001B54  4E4F                    1093          TRAP    #15
00001B56  4E75                    1094          RTS
00001B58                          1095          
00001B58                          1096  Immediate_W:
00001B58  321E                    1097          MOVE.W  (A6)+, D1
00001B5A  143C 0010               1098          MOVE.B  #16, D2
00001B5E  103C 000F               1099          MOVE.B  #15, D0
00001B62  4E4F                    1100          TRAP    #15
00001B64  4E75                    1101          RTS
00001B66                          1102          
00001B66                          1103  Immediate_L:
00001B66  221E                    1104          MOVE.L  (A6)+, D1
00001B68  143C 0010               1105          MOVE.B  #16, D2
00001B6C  103C 000F               1106          MOVE.B  #15, D0
00001B70  4E4F                    1107          TRAP    #15
00001B72  4E75                    1108          RTS
00001B74                          1109  
00001B74                          1110          
00001B74                          1111  
00001B74                          1112  *=================================================================
00001B74                          1113  *---------Data Register Table used for printing out Registers----
00001B74                          1114  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
00001B74                          1115  DataRegTable
00001B74  4EF9 00001BD4           1116          JMP REG_D0
00001B7A  4EF9 00001BE8           1117          JMP REG_D1
00001B80  4EF9 00001BF6           1118          JMP REG_D2
00001B86  4EF9 00001C04           1119          JMP REG_D3
00001B8C  4EF9 00001C12           1120          JMP REG_D4
00001B92  4EF9 00001C20           1121          JMP REG_D5
00001B98  4EF9 00001C2E           1122          JMP REG_D6
00001B9E  4EF9 00001C3C           1123          JMP REG_D7
00001BA4                          1124  
00001BA4                          1125  AddrRegTable:
00001BA4                          1126          
00001BA4  4EF9 00001C4A           1127          JMP REG_A0
00001BAA  4EF9 00001C5E           1128          JMP REG_A1
00001BB0  4EF9 00001C6C           1129          JMP REG_A2
00001BB6  4EF9 00001C7A           1130          JMP REG_A3
00001BBC  4EF9 00001C88           1131          JMP REG_A4
00001BC2  4EF9 00001C96           1132          JMP REG_A5
00001BC8  4EF9 00001CA4           1133          JMP REG_A6
00001BCE  4EF9 00001CB2           1134          JMP REG_A7
00001BD4                          1135  
00001BD4                          1136  * Data Registers Printing        
00001BD4                          1137  REG_D0:
00001BD4  227C 00000000           1138          MOVEA.L #$0, A1
00001BDA  43F9 00001E71           1139          LEA     DREG0, A1
00001BE0  103C 000E               1140          MOVE.B  #14, D0
00001BE4  4E4F                    1141          TRAP    #15
00001BE6  4E75                    1142          RTS
00001BE8                          1143          
00001BE8                          1144  REG_D1:
00001BE8  43F9 00001E74           1145          LEA     DREG1, A1
00001BEE  103C 000E               1146          MOVE.B  #14, D0
00001BF2  4E4F                    1147          TRAP    #15
00001BF4  4E75                    1148          RTS
00001BF6                          1149  REG_D2:
00001BF6  43F9 00001E77           1150          LEA     DREG2, A1
00001BFC  103C 000E               1151          MOVE.B  #14, D0
00001C00  4E4F                    1152          TRAP    #15
00001C02  4E75                    1153          RTS
00001C04                          1154  REG_D3:
00001C04  43F9 00001E7A           1155          LEA     DREG3, A1
00001C0A  103C 000E               1156          MOVE.B  #14, D0
00001C0E  4E4F                    1157          TRAP    #15
00001C10  4E75                    1158          RTS
00001C12                          1159  REG_D4:
00001C12  43F9 00001E7D           1160          LEA     DREG4, A1
00001C18  103C 000E               1161          MOVE.B  #14, D0
00001C1C  4E4F                    1162          TRAP    #15
00001C1E  4E75                    1163          RTS
00001C20                          1164  REG_D5:
00001C20  43F9 00001E80           1165          LEA     DREG5, A1
00001C26  103C 000E               1166          MOVE.B  #14, D0
00001C2A  4E4F                    1167          TRAP    #15
00001C2C  4E75                    1168          RTS
00001C2E                          1169  REG_D6:
00001C2E  43F9 00001E83           1170          LEA     DREG6, A1
00001C34  103C 000E               1171          MOVE.B  #14, D0
00001C38  4E4F                    1172          TRAP    #15
00001C3A  4E75                    1173          RTS
00001C3C                          1174  REG_D7:
00001C3C  43F9 00001E86           1175          LEA     DREG7, A1
00001C42  103C 000E               1176          MOVE.B  #14, D0
00001C46  4E4F                    1177          TRAP    #15
00001C48  4E75                    1178          RTS
00001C4A                          1179          
00001C4A                          1180  *--------------------Addr Reigster printing ------------------------*        
00001C4A                          1181  REG_A0:
00001C4A  227C 00000000           1182          MOVEA.L #$0, A1
00001C50  43F9 00001E89           1183          LEA     AREG0, A1
00001C56  103C 000E               1184          MOVE.B  #14, D0
00001C5A  4E4F                    1185          TRAP    #15
00001C5C  4E75                    1186          RTS
00001C5E                          1187          
00001C5E                          1188  REG_A1:
00001C5E  43F9 00001E8C           1189          LEA     AREG1, A1
00001C64  103C 000E               1190          MOVE.B  #14, D0
00001C68  4E4F                    1191          TRAP    #15
00001C6A  4E75                    1192          RTS
00001C6C                          1193  REG_A2:
00001C6C  43F9 00001E8F           1194          LEA     AREG2, A1
00001C72  103C 000E               1195          MOVE.B  #14, D0
00001C76  4E4F                    1196          TRAP    #15
00001C78  4E75                    1197          RTS
00001C7A                          1198  REG_A3:
00001C7A  43F9 00001E92           1199          LEA     AREG3, A1
00001C80  103C 000E               1200          MOVE.B  #14, D0
00001C84  4E4F                    1201          TRAP    #15
00001C86  4E75                    1202          RTS
00001C88                          1203  REG_A4:
00001C88  43F9 00001E95           1204          LEA     AREG4, A1
00001C8E  103C 000E               1205          MOVE.B  #14, D0
00001C92  4E4F                    1206          TRAP    #15
00001C94  4E75                    1207          RTS
00001C96                          1208  REG_A5:
00001C96  43F9 00001E98           1209          LEA     AREG5, A1
00001C9C  103C 000E               1210          MOVE.B  #14, D0
00001CA0  4E4F                    1211          TRAP    #15
00001CA2  4E75                    1212          RTS
00001CA4                          1213  REG_A6:
00001CA4  43F9 00001E9B           1214          LEA     AREG6, A1
00001CAA  103C 000E               1215          MOVE.B  #14, D0
00001CAE  4E4F                    1216          TRAP    #15
00001CB0  4E75                    1217          RTS
00001CB2                          1218  REG_A7:
00001CB2  43F9 00001E9E           1219          LEA     AREG7, A1
00001CB8  103C 000E               1220          MOVE.B  #14, D0
00001CBC  4E4F                    1221          TRAP    #15
00001CBE  4E75                    1222          RTS
00001CC0                          1223          
00001CC0                          1224  *====================================================PRinting/ ERROR method comes down here=========================================
00001CC0                          1225  PRINTCOMMA: * Prints comma between two operrands
00001CC0  43F9 00001E37           1226          LEA     COMMA, A1
00001CC6  103C 000E               1227          MOVE.B  #14, D0
00001CCA  4E4F                    1228          TRAP    #15
00001CCC  4E75                    1229          RTS
00001CCE                          1230          
00001CCE                          1231  PrintInvalidEA:
00001CCE  43F9 00001D94           1232          LEA     Invalid_EA_Addr, A1
00001CD4  103C 000E               1233          MOVE.B  #14, D0
00001CD8  4E4F                    1234          TRAP    #15
00001CDA  4EF8 10F2               1235          JMP     AddrLoop
00001CDE                          1236          
00001CDE                          1237  PrintInvalidSUB:
00001CDE  43F9 00001DAA           1238          LEA     Invalid_EA_SUB, A1
00001CE4  103C 000E               1239          MOVE.B  #14, D0
00001CE8  4E4F                    1240          TRAP    #15
00001CEA  4EF8 10F2               1241          JMP     AddrLoop
00001CEE                          1242          
00001CEE                          1243  PrintInvalidAddress:
00001CEE  43F9 00001DC8           1244          LEA     Invalid_Address, A1
00001CF4  103C 000E               1245          MOVE.B  #14, D0
00001CF8  4E4F                    1246          TRAP    #15
00001CFA  4EF8 1006               1247          JMP     GETINPUT
00001CFE                          1248          
00001CFE                          1249  PrintDATA:
00001CFE  43F9 00001E65           1250          LEA     DATA, A1
00001D04  103C 000E               1251          MOVE.B  #14, D0
00001D08  4E4F                    1252          TRAP    #15
00001D0A  3202                    1253          MOVE.W  D2, D1
00001D0C  143C 0010               1254          MOVE.B  #16, D2
00001D10  103C 000F               1255          MOVE.B  #15, D0
00001D14  4E4F                    1256          TRAP    #15
00001D16  6000 F3DA               1257          BRA     AddrLoop
00001D1A                          1258           
00001D1A                          1259  * Clear all registers    
00001D1A                          1260  CLRREG:
00001D1A  7000                    1261      MOVE.L  #0, D0
00001D1C  7200                    1262      MOVE.L  #0, D1
00001D1E  7400                    1263      MOVE.L  #0, D2
00001D20  7600                    1264      MOVE.L  #0, D3
00001D22  7800                    1265      MOVE.L  #0, D4
00001D24  7A00                    1266      MOVE.L  #0, D5
00001D26  7C00                    1267      MOVE.L  #0, D6
00001D28  7E00                    1268      MOVE.L  #0, D7
00001D2A  4E75                    1269      RTS
00001D2C                          1270      
00001D2C                          1271  CLRAREG:
00001D2C  207C 00000000           1272      MOVE.L  #0, A0
00001D32  227C 00000000           1273      MOVE.L  #0, A1
00001D38  247C 00000000           1274      MOVE.L  #0, A2
00001D3E  267C 00000000           1275      MOVE.L  #0, A3
00001D44  287C 00000000           1276      MOVE.L  #0, A4
00001D4A  2A7C 00000000           1277      MOVE.L  #0, A5
00001D50  4E75                    1278      RTS
00001D52                          1279  
00001D52                          1280      
00001D52                          1281      
00001D52                          1282          
00001D52                          1283  * Put program code here
00001D52                          1284  
00001D52  FFFF FFFF               1285      SIMHALT             ; halt simulator
00001D56                          1286  
00001D56                          1287  * Put variables and constants here
00001D56  =0000000D               1288  CR  EQU $0D
00001D56  =0000000A               1289  LF  EQU $0A
00001D56= 50 6C 65 61 73 65 ...   1290  WELCOME     DC.B    'Please enter starting address', CR, LF, 0
00001D76= 50 6C 65 61 73 65 ...   1291  WELCOME2    DC.B    'Please enter ending address', CR, LF, 0
00001D94= 49 6E 76 61 6C 69 ...   1292  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
00001DAA= 49 6E 76 61 6C 69 ...   1293  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00001DC8= 47 69 76 65 6E 20 ...   1294  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00001DE3= 43 6F 6E 74 69 6E ...   1295  Continue_Program    DC.B    'Continue Program? Y/N', CR, LF, 0
00001DFB= 43 6F 6E 74 69 6E ...   1296  Continue_Screen DC.B    'Continue Screen? Y/N', CR, LF, 0
00001E12= 0D 0A 00                1297  Print_NextLine  DC.B    '', CR, LF, 0
00001E15= 54 68 61 6E 6B 20 ...   1298  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
00001E37                          1299  
00001E37= 2C 20 00                1300  COMMA       DC.B    ', ', 0
00001E3A= 20 20 20 00             1301  SPACER      DC.B    '   ', 0
00001E3E                          1302  *DATASIZE
00001E3E= 2E 42 20 00             1303  SIZE_BYTE       DC.B    '.B ', 0
00001E42= 2E 57 20 00             1304  SIZE_WORD       DC.B    '.W ', 0
00001E46= 2E 4C 20 00             1305  SIZE_LONG       DC.B    '.L ', 0
00001E4A                          1306  
00001E4A                          1307  *MOVE OPCODES
00001E4A= 4D 4F 56 45 00          1308  MOVE_PRINT  DC.B    'MOVE', 0
00001E4F= 4D 4F 56 45 2E 42 ...   1309  MOVEB       DC.B    'MOVE.B ', 0
00001E57= 2E 42 20 00             1310  SIZE_B       DC.B    '.B ', 0
00001E5B= 2E 57 20 00             1311  MOVEW       DC.B    '.W ', 0
00001E5F= 2E 4C 20 00             1312  MOVEL       DC.B    '.L ', 0
00001E63= 41 00                   1313  MOVEA       DC.B    'A', 0
00001E65= 44 41 54 41 3A 20 00    1314  DATA        DC.B    'DATA: ', 0
00001E6C= 41 44 44 51 00          1315  ADDQ        DC.B    'ADDQ', 0
00001E71                          1316  
00001E71                          1317  
00001E71                          1318  *DATA REGISTERS PRINTOUT
00001E71= 44 30 00                1319  DREG0       DC.B    'D0', 0
00001E74= 44 31 00                1320  DREG1       DC.B    'D1', 0
00001E77= 44 32 00                1321  DREG2       DC.B    'D2', 0
00001E7A= 44 33 00                1322  DREG3       DC.B    'D3', 0
00001E7D= 44 34 00                1323  DREG4       DC.B    'D4', 0
00001E80= 44 35 00                1324  DREG5       DC.B    'D5', 0
00001E83= 44 36 00                1325  DREG6       DC.B    'D6', 0
00001E86= 44 37 00                1326  DREG7       DC.B    'D7', 0 
00001E89                          1327  
00001E89                          1328  *ADDR REGISTERS PRINTOUT
00001E89= 41 30 00                1329  AREG0       DC.B    'A0', 0
00001E8C= 41 31 00                1330  AREG1       DC.B    'A1', 0
00001E8F= 41 32 00                1331  AREG2       DC.B    'A2', 0
00001E92= 41 33 00                1332  AREG3       DC.B    'A3', 0
00001E95= 41 34 00                1333  AREG4       DC.B    'A4', 0
00001E98= 41 35 00                1334  AREG5       DC.B    'A5', 0
00001E9B= 41 36 00                1335  AREG6       DC.B    'A6', 0
00001E9E= 41 37 00                1336  AREG7       DC.B    'A7', 0 
00001EA1                          1337  
00001EA1                          1338  *INDR_ADDR REGISTERS PRINTOUT
00001EA1= 28 00                   1339  INDR_LEFT   DC.B    '(', 0
00001EA3= 29 00                   1340  INDR_RIGHT  DC.B    ')', 0
00001EA5= 2B 00                   1341  POST_INCRE   DC.B    '+', 0
00001EA7= 2D 00                   1342  PRE_DECRE   DC.B    '-', 0
00001EA9= 24 00                   1343  DOLLAR_SIGN DC.B    '$', 0
00001EAB= 23 00                   1344  POUND_SIGN  DC.B    '#', 0
00001EAD                          1345  
00001EAD                          1346  *SUB
00001EAD= 53 55 42 00             1347  SUBTRACT    DC.B    'SUB', 0
00001EB1= 41 44 44 00             1348  ADDITION    DC.B    'ADD', 0
00001EB5= 41 4E 44 00             1349  AND         DC.B    'AND', 0
00001EB9= 4F 52 00                1350  OR          DC.B    'OR', 0
00001EBC= 4E 4F 54 00             1351  NOT_OP      DC.B    'NOT', 0
00001EC0= 52 4F 4C 00             1352  ROL         DC.B    'ROL', 0
00001EC4= 52 4F 52 00             1353  ROR         DC.B    'ROR', 0
00001EC8                          1354  
00001EC8= 00000001                1355  addrStart   DC.L    1   // Starting address
00001ECC= 00000001                1356  addrEnd     DC.L    1   // ending address
00001ED0= 00000001                1357  OpCodeStorage DC.L    1
00001ED4= 00000001                1358  ScreenCounter   DC.L    1
00001ED8= 00000001                1359  OpCodeSize  DC.L    1
00001EDC                          1360      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   11E2
ADDITION            1EB1
ADDQ                1E6C
ADDQ_B              140C
ADDQ_L              1434
ADDQ_PRINT_IMMEDIATE  1446
ADDQ_PRINT_IMMEDIATECONT  1460
ADDQ_SIZE_TABLE     13F4
ADDQ_W              141E
ADDREND             1ECC
ADDRESS_IMMEDIATE   1B02
ADDRESS_L           1AE4
ADDRESS_W           1AC6
ADDRLOOP            10F2
ADDRREGTABLE        1BA4
ADDRSTART           1EC8
ADDVAL              11DC
AND                 1EB5
AREG0               1E89
AREG1               1E8C
AREG2               1E8F
AREG3               1E92
AREG4               1E95
AREG5               1E98
AREG6               1E9B
AREG7               1E9E
B                   11E8
C                   11EE
CHAR                11AC
CHECKRANGE          1086
CHECK_CONT          112C
CHECK_MOVEA         1876
CLRAREG             1D2C
CLRREG              1D1A
COMMA               1E37
CONTINUE_PROGRAM    1DE3
CONTINUE_SCREEN     1DFB
CONVERT             1192
CR                  D
D                   11F4
DATA                1E65
DATAREGTABLE        1B74
DESTEACHECKER       18FC
DESTEAFINDER        1932
DOLLAR_SIGN         1EA9
DREG0               1E71
DREG1               1E74
DREG2               1E77
DREG3               1E7A
DREG4               1E7D
DREG5               1E80
DREG6               1E83
DREG7               1E86
E                   11FA
EA                  18A8
EACHECKER           18C6
END                 10E0
F                   1200
GETINPUT            1006
IMMEDIATE_B         1B4A
IMMEDIATE_L         1B66
IMMEDIATE_W         1B58
INDR_LEFT           1EA1
INDR_RIGHT          1EA3
INVALID_ADDRESS     1DC8
INVALID_EA_ADDR     1D94
INVALID_EA_SUB      1DAA
JMPTABLE            1252
JMPTODESTREG        1962
JMPTOSRCREG         1952
JMPTO_DEST_ADDR_REG  1982
JMPTO_DEST_IMMEDIATE  1AB0
JMPTO_DEST_INDR_ADDR_REG  19CE
JMPTO_SRC_ADDR_REG  1972
JMPTO_SRC_IMMEDIATE  1A92
JMPTO_SRC_INDR_ADDR_REG  1992
LF                  A
LOOP                1188
LOWERLIMIT          3000
MEMORY_ALTERABLE_CHECK  17FE
MOVEA               1E63
MOVEB               1E4F
MOVEL               1E5F
MOVEW               1E5B
MOVE_PRINT          1E4A
NEXT_SCREEN         1156
NOT_JMPTABLE        1354
NOT_OP              1EBC
NOT_SIZE00          136C
NOT_SIZE01          138E
NOT_SIZE10          13A8
NOT_SIZE11          13C2
OP0000              12AC
OP0001              12AC
OP0010              12CA
OP0011              12FA
OP0100              1322
OP0101              13C6
OP0110              1476
OP0111              1476
OP1000              14B2
OP1001              1476
OP1010              14F6
OP1011              14F6
OP1100              14F6
OP1101              1532
OP1110              156E
OPCODE              1206
OPCODESIZE          1ED8
OPCODESTORAGE       1ED0
OPMODE000           171C
OPMODE001           1736
OPMODE010           1748
OPMODE011           175A
OPMODE100           1788
OPMODE101           17A0
OPMODE110           17B8
OPMODE111           17D0
OR                  1EB9
POST_INCRE          1EA5
POST_INCREMENT_DEST  1A4E
POST_INCREMENT_SRC  1A0A
POUND_SIGN          1EAB
PRE_DECRE           1EA7
PRE_DECREMENT_DEST  1A5C
PRE_DECREMENT_SRC   1A18
PRINT8              16DC
PRINTA              1898
PRINTCOMMA          1CC0
PRINTDATA           1CFE
PRINTINVALIDADDRESS  1CEE
PRINTINVALIDEA      1CCE
PRINTINVALIDSUB     1CDE
PRINT_NEXTLINE      1E12
REG_A0              1C4A
REG_A1              1C5E
REG_A2              1C6C
REG_A3              1C7A
REG_A4              1C88
REG_A5              1C96
REG_A6              1CA4
REG_A7              1CB2
REG_D0              1BD4
REG_D1              1BE8
REG_D2              1BF6
REG_D3              1C04
REG_D4              1C12
REG_D5              1C20
REG_D6              1C2E
REG_D7              1C3C
ROL                 1EC0
ROLTEST             6000
ROR                 1EC4
ROTATETABLE         15A6
ROTATE_B            15F6
ROTATE_EA           164A
ROTATE_EACHECKER    1668
ROTATE_L            162E
ROTATE_LEFT         15C4
ROTATE_PRINT_IMMEDIATE  16A8
ROTATE_PRINT_IMMEDIATECONT  16C8
ROTATE_PRINT_REGISTER  168E
ROTATE_RIGHT        15B2
ROTATE_SIZE_TABLE   15D6
ROTATE_W            1612
SCREENCOUNTER       1ED4
SIZE_B              1E57
SIZE_BYTE           1E3E
SIZE_LONG           1E46
SIZE_WORD           1E42
SPACER              1E3A
SPECIALTEST         5000
SPECIAL_OPMODE_USED  176A
SPECIAL_OPMODE_USED2  17E0
START               1000
SUBTABLE            16EC
SUBTRACT            1EAD
SUB_OPMODE_ADDA     1854
SUB_OPMODE_FIRST    1810
SUB_OPMODE_SECOND   182E
TESTER              9000
TY_MESSAGE          1E15
UPPERLIMIT          FFFFFE
WELCOME             1D56
WELCOME2            1D76
YESNOSTORAGE        50
