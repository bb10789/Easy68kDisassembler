00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/7/2020 5:57:56 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *=================================================================
00001000                             9  *                     THIS IS OUR MAIN METHOD
00001000                            10  *               Don't throw random stuff in it, keep it to a minimum
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000  4EB9 00001006             13          JSR     GETINPUT
00001006                            14  *=================================================================
00001006                            15  *---------------Get starting and ending addresss------- Kelvin
00001006                            16  *--------------- PRE: will be using D0, D5, A1
00001006                            17  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            18  GETINPUT:
00001006  43F9 0000187E             19          LEA     WELCOME, A1
0000100C  103C 000E                 20          MOVE.B  #14,    D0
00001010  4E4F                      21          TRAP    #15
00001012  327C 0000                 22          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001016  103C 0002                 23          MOVE.B  #2,D0
0000101A  4E4F                      24          TRAP    #15
0000101C  2801                      25          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
0000101E  7000                      26          MOVE.L  #$0, d0  // intitiate counter
00001020  4EB9 00001074             27          JSR     LOOP    // Convert starting address into hex
00001026  23C5 00001966             28          MOVE.L  D5, addrStart
0000102C  43F9 0000189E             29          LEA     WELCOME2, A1
00001032  103C 000E                 30          MOVE.B  #14,    D0
00001036  4E4F                      31          TRAP    #15
00001038  327C 0000                 32          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000103C  103C 0002                 33          MOVE.B  #2,D0
00001040  4E4F                      34          TRAP    #15
00001042  23C5 0000196A             35          MOVE.L  D5, addrEnd
00001048  4245                      36          CLR     D5       // Clear D5 for exit address
0000104A  1801                      37          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 38          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001074             39          JSR     LOOP    // Convert Ending address int Hex
00001056                            40         * MOVEA.L  D0, A0   // Testing
00001056  31FC 4655 6000            41          MOVE.W  #$4655, $6000 // MOVE.L D0, D1, used for testing only
0000105C  45F8 6000                 42          LEA     $6000, A2 //testing
00001060  4EB9 000010F2             43          JSR     OPCODE
00001066  4EF9 0000106C             44          JMP     END
0000106C                            45  END:
0000106C  103C 0009                 46          MOVE.B  #9, D0
00001070  4E4F                      47          TRAP    #15
00001072                            48          
00001072                            49  *Please start from here Annabelle
00001072                            50  AddrLoop:
00001072  60F8                      51          BRA     END     // DELETE THIS WHEN UR WORKING ON IT ANNABELLE!!!!!!!
00001074                            52  LOOP
00001074                            53  
00001074  B880                      54          CMP.L   D0, D4  // Loop until length of word reached
00001076  6E00 0006                 55          BGT     CONVERT
0000107A  5480                      56          ADD.L   #$2, D0 
0000107C  4E75                      57          RTS 
0000107E                            58  
0000107E                            59  *=================================================================
0000107E                            60  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000107E                            61  *PRE      D4 must contain input length, d0 must be 0
0000107E                            62  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000107E                            63  CONVERT:
0000107E  5280                      64          ADDQ.L  #$1, D0 // increment counter
00001080  1211                      65          move.b  (A1),D1    // Get next bit from Input
00001082  5289                      66          adda.L  #1, A1      // Increment Input
00001084  0401 0030                 67          sub.b   #$30,D1     //
00001088  B23C 0010                 68          cmp.b   #$10,D1   // Check if value is larger than 10
0000108C  6E00 000A                 69          bgt     CHAR      // Find Hex
00001090  1401                      70          move.b  D1, D2    // IF it is less than 10
00001092  4EF9 000010C8             71          JMP     ADDVAL        
00001098                            72  CHAR:
00001098  B23C 0011                 73          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
0000109C  6700 0030                 74          BEQ     A
000010A0  B23C 0012                 75          CMP.B   #$12, D1
000010A4  6700 002E                 76          BEQ     B
000010A8  B23C 0013                 77          CMP.B   #$13, D1
000010AC  6700 002C                 78          BEQ     C
000010B0  B23C 0014                 79          CMP.B   #$14, D1
000010B4  6700 002A                 80          BEQ     D
000010B8  B23C 0015                 81          CMP.B   #$15, D1
000010BC  6700 0028                 82          BEQ     E
000010C0  B23C 0016                 83          CMP.B   #$16, D1
000010C4  6700 0026                 84          BEQ     F
000010C8                            85  
000010C8                            86  ADDVAL:
000010C8  E98D                      87          lsl.l    #$4, D5 // Shift based on position
000010CA  DA82                      88          add.l    D2, D5 //Add value into Input
000010CC  60A6                      89          BRA      LOOP
000010CE                            90      
000010CE                            91  A:
000010CE  740A                      92          MOVE.L  #$A, D2 
000010D0  4EF8 10C8                 93          jmp ADDVAL
000010D4                            94  B:
000010D4  740B                      95          MOVE.L  #$B, D2
000010D6  4EF8 10C8                 96          jmp ADDVAL
000010DA                            97  C:
000010DA  740C                      98          MOVE.L  #$C, D2
000010DC  4EF8 10C8                 99          jmp ADDVAL
000010E0                           100  D:
000010E0  740D                     101          MOVE.L  #$D, D2
000010E2  4EF8 10C8                102          jmp ADDVAL
000010E6                           103  E:
000010E6  740E                     104          MOVE.L  #$E, D2
000010E8  4EF8 10C8                105          jmp ADDVAL
000010EC                           106  F:
000010EC  740F                     107          MOVE.L  #$F, D2
000010EE  4EF8 10C8                108          jmp ADDVAL
000010F2                           109          
000010F2                           110  *=======================================================================
000010F2                           111  *---------Find the first 4 of instruction and determines the instruction
000010F2                           112  OPCODE:
000010F2  4EB9 0000186C            113          JSR     CLRREG
000010F8  3212                     114          MOVE.W  (A2),D1
000010FA  2401                     115          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
000010FC  E849                     116          LSR.W   #4, D1
000010FE  E849                     117          LSR.W   #4, D1
00001100  E849                     118          LSR.W   #4, D1  //Right Shift 3 times
00001102  1001                     119          MOVE.B  D1, D0  // OPCODE FOUND
00001104  C0FC 0006                120          MULU    #6, D0
00001108  11C0 10F2                121          MOVE.B  D0, OpCode
0000110C  45F9 00001116            122          LEA     JMPTABLE, A2
00001112  4EF2 0000                123          JMP     (A2, D0)
00001116                           124          
00001116                           125  *========================================================================
00001116                           126  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001116                           127  *------- Add your instructions here
00001116                           128  JMPTABLE
00001116  4EF9 0000116A            129          JMP     OP0000
0000111C  4EF9 0000116A            130          JMP     OP0001 *MOVEB
00001122  4EF9 00001180            131          JMP     OP0010 *MOVEL
00001128  4EF9 000011A8            132          JMP     OP0011 *MOVEW
0000112E  4EF9 000011D0            133          JMP     OP0100 *MOVEM
00001134  4EF9 0000126C            134          JMP     OP0101
0000113A  4EF9 0000126C            135          JMP     OP0110
00001140  4EF9 0000126C            136          JMP     OP0111
00001146  4EF9 000012A8            137          JMP     OP1000
0000114C  4EF9 0000126C            138          JMP     OP1001 *SUB
00001152  4EF9 000012EC            139          JMP     OP1010
00001158  4EF9 000012EC            140          JMP     OP1011
0000115E  4EF9 000012EC            141          JMP     OP1100
00001164  4EF9 00001328            142          JMP     OP1101 *ADD
0000116A                           143  
0000116A                           144  *=====================================================================    
0000116A                           145  *--------------D2 must contain Entire opcode for everything below
0000116A                           146  OP0000:
0000116A                           147  *-> MOVE.B
0000116A                           148  OP0001:
0000116A  43F9 00001904            149          LEA     MOVEB, A1
00001170  103C 000E                150          MOVE.B  #14, D0
00001174  4E4F                     151          TRAP    #15
00001176  4EB9 00001518            152          JSR     EA * Find SRC EA
0000117C  6000 0414                153          BRA     DESTEAFINDER * FIND DEST EA
00001180                           154  * -> MOVE.L
00001180                           155  * Printed using MOVEL String as a variable on the very bottom
00001180                           156  OP0010:
00001180  43F9 000018FF            157          LEA     MOVE_PRINT, A1
00001186  103C 000E                158          MOVE.B  #14, D0
0000118A  4E4F                     159          TRAP    #15
0000118C  4EB9 000014E6            160          JSR     CHECK_MOVEA
00001192  43F9 00001914            161          LEA     MOVEL, A1
00001198  103C 000E                162          MOVE.B  #14, D0
0000119C  4E4F                     163          TRAP    #15
0000119E  4EB9 00001518            164          JSR     EA *Find SRC EA
000011A4  6000 03EC                165          BRA     DESTEAFINDER *FIND DEST EA
000011A8                           166  * -> MOVE.W
000011A8                           167  OP0011:
000011A8  43F9 000018FF            168          LEA     MOVE_PRINT, A1
000011AE  103C 000E                169          MOVE.B  #14, D0
000011B2  4E4F                     170          TRAP    #15
000011B4  4EB9 000014E6            171          JSR     CHECK_MOVEA
000011BA  43F9 00001910            172          LEA     MOVEW, A1
000011C0  103C 000E                173          MOVE.B  #14, D0
000011C4  4E4F                     174          TRAP    #15
000011C6  4EB9 00001518            175          JSR     EA * FIND SRC EA
000011CC  6000 03C4                176          BRA     DESTEAFINDER *FIND DEST EA
000011D0                           177          
000011D0                           178  *-> NOT
000011D0                           179  OP0100:
000011D0  43F9 00001961            180          LEA     NOT_OP, A1
000011D6  103C 000E                181          MOVE.B  #14, D0
000011DA  4E4F                     182          TRAP    #15
000011DC  E14A                     183          LSL.W   #8, D2
000011DE  1602                     184          MOVE.B  D2, D3 * D3 = SIZE OF INSTRUCTION
000011E0  E04B                     185          LSR.W   #8, D3
000011E2  EC4B                     186          LSR.W   #6, D3
000011E4  3202                     187          MOVE.W  D2, D1 * D1 = EA OPMODE
000011E6  E549                     188          LSL.W   #2, D1
000011E8  E049                     189          LSR.W   #8, D1
000011EA  EA49                     190          LSR.W   #5, D1
000011EC  3002                     191          MOVE.W  D2, D0 * D0 = EA REGISTER
000011EE  EB48                     192          LSL.W   #5, D0
000011F0  E048                     193          LSR.W   #8, D0
000011F2  EA48                     194          LSR.W   #5, D0
000011F4  C6FC 0006                195          MULU    #6, D3 * Multiply for JMPTABLE
000011F8  45F9 00001202            196          LEA     NOT_JMPTable, A2
000011FE  4EB2 3000                197          JSR     (A2, D3)
00001202                           198          
00001202                           199  NOT_JMPTable
00001202  4EF9 0000121A            200          JMP     NOT_SIZE00
00001208  4EF9 00001234            201          JMP     NOT_SIZE01
0000120E  4EF9 0000124E            202          JMP     NOT_SIZE10
00001214  4EF9 00001268            203          JMP     NOT_SIZE11
0000121A                           204  
0000121A                           205  NOT_SIZE00:
0000121A  1A00                     206          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
0000121C  43F9 0000190C            207          LEA     SIZE_B, A1
00001222  103C 000E                208          MOVE.B  #14, D0
00001226  4E4F                     209          TRAP    #15
00001228  1005                     210          MOVE.B  D5, D0 * RETURN TEMP STORAGE
0000122A  4EB9 00001536            211          JSR     EACHECKER
00001230  6000 FE40                212          BRA     AddrLoop
00001234                           213  NOT_SIZE01:
00001234  1A00                     214          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001236  43F9 0000190C            215          LEA     SIZE_B, A1
0000123C  103C 000E                216          MOVE.B  #14, D0
00001240  4E4F                     217          TRAP    #15
00001242  1005                     218          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001244  4EB9 00001536            219          JSR     EACHECKER
0000124A  6000 FE26                220          BRA     AddrLoop
0000124E                           221  NOT_SIZE10:
0000124E  1A00                     222          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001250  43F9 0000190C            223          LEA     SIZE_B, A1
00001256  103C 000E                224          MOVE.B  #14, D0
0000125A  4E4F                     225          TRAP    #15
0000125C  1005                     226          MOVE.B  D5, D0 * RETURN TEMP STORAGE
0000125E  4EB9 00001536            227          JSR     EACHECKER
00001264  6000 FE0C                228          BRA     AddrLoop
00001268                           229  NOT_SIZE11:
00001268  6000 05E2                230          BRA     PRINTINVALIDEA
0000126C                           231  
0000126C                           232              
0000126C                           233  OP0101:
0000126C                           234          
0000126C                           235  OP0110:
0000126C                           236  OP0111:
0000126C                           237          
0000126C                           238  
0000126C                           239  
0000126C                           240  
0000126C                           241  * -> SUB
0000126C                           242  * Splitting Sub into OPMODE and Register value
0000126C                           243  OP1001:
0000126C  43F9 00001952            244          LEA     SUBTRACT, A1
00001272  103C 000E                245          MOVE.B  #14, D0
00001276  4E4F                     246          TRAP    #15
00001278  E94A                     247          LSL.W   #4, D2
0000127A  3602                     248          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000127C  E04B                     249          LSR.W   #8, D3 * D3 = D register
0000127E  EA4B                     250          LSR.W   #5, D3
00001280  3802                     251          MOVE.W  D2, D4 *D4 = SubOPMODE
00001282  E74C                     252          LSL.W   #3, D4
00001284  E04C                     253          LSR.W   #8, D4
00001286  EA4C                     254          LSR.W   #5, D4
00001288  3202                     255          MOVE.W  D2, D1 * D1 = EA Mode
0000128A  ED49                     256          LSL.W   #6, D1
0000128C  E049                     257          LSR.W   #8, D1
0000128E  EA49                     258          LSR.W   #5, D1
00001290  3002                     259          MOVE.W  D2, D0 * D0 = EA register
00001292  E148                     260          LSL.W   #8, D0
00001294  E348                     261          LSL.W   #1, D0
00001296  E048                     262          LSR.W   #8, D0
00001298  EA48                     263          LSR.W   #5, D0
0000129A  45F9 00001364            264          LEA     SubTable, A2
000012A0  C8FC 0006                265          MULU    #6, D4
000012A4  4EB2 4000                266          JSR     (A2, D4)
000012A8                           267  * -> OR
000012A8                           268  * Splitting AND into OPMODE and Register value       
000012A8                           269  OP1000:
000012A8  43F9 0000195E            270          LEA     OR, A1
000012AE  103C 000E                271          MOVE.B  #14, D0
000012B2  4E4F                     272          TRAP    #15
000012B4  E94A                     273          LSL.W   #4, D2
000012B6  3602                     274          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000012B8  E04B                     275          LSR.W   #8, D3 * D3 = D register
000012BA  EA4B                     276          LSR.W   #5, D3
000012BC  3802                     277          MOVE.W  D2, D4 *D4 = SubOPMODE
000012BE  E74C                     278          LSL.W   #3, D4
000012C0  E04C                     279          LSR.W   #8, D4
000012C2  EA4C                     280          LSR.W   #5, D4
000012C4  3202                     281          MOVE.W  D2, D1 * D1 = EA Mode
000012C6  ED49                     282          LSL.W   #6, D1
000012C8  E049                     283          LSR.W   #8, D1
000012CA  EA49                     284          LSR.W   #5, D1
000012CC  B23C 0001                285          CMP.B   #%0001, D1
000012D0  6700 057A                286          BEQ     PRINTINVALIDEA
000012D4  3002                     287          MOVE.W  D2, D0 * D0 = EA register
000012D6  E148                     288          LSL.W   #8, D0
000012D8  E348                     289          LSL.W   #1, D0
000012DA  E048                     290          LSR.W   #8, D0
000012DC  EA48                     291          LSR.W   #5, D0
000012DE  45F9 00001364            292          LEA     SubTable, A2
000012E4  C8FC 0006                293          MULU    #6, D4
000012E8  4EB2 4000                294          JSR     (A2, D4)
000012EC                           295  OP1010
000012EC                           296  OP1011
000012EC                           297  * -> AND
000012EC                           298  * Splitting AND into OPMODE and Register value
000012EC                           299  OP1100
000012EC  43F9 0000195A            300          LEA     AND, A1
000012F2  103C 000E                301          MOVE.B  #14, D0
000012F6  4E4F                     302          TRAP    #15
000012F8  E94A                     303          LSL.W   #4, D2
000012FA  3602                     304          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000012FC  E04B                     305          LSR.W   #8, D3 * D3 = D register
000012FE  EA4B                     306          LSR.W   #5, D3
00001300  3802                     307          MOVE.W  D2, D4 *D4 = SubOPMODE
00001302  E74C                     308          LSL.W   #3, D4
00001304  E04C                     309          LSR.W   #8, D4
00001306  EA4C                     310          LSR.W   #5, D4
00001308  3202                     311          MOVE.W  D2, D1 * D1 = EA Mode
0000130A  ED49                     312          LSL.W   #6, D1
0000130C  E049                     313          LSR.W   #8, D1
0000130E  EA49                     314          LSR.W   #5, D1
00001310  3002                     315          MOVE.W  D2, D0 * D0 = EA register
00001312  E148                     316          LSL.W   #8, D0
00001314  E348                     317          LSL.W   #1, D0
00001316  E048                     318          LSR.W   #8, D0
00001318  EA48                     319          LSR.W   #5, D0
0000131A  45F9 00001364            320          LEA     SubTable, A2
00001320  C8FC 0006                321          MULU    #6, D4
00001324  4EB2 4000                322          JSR     (A2, D4)
00001328                           323          
00001328                           324  * -> ADD
00001328                           325  * Spltting Add into OPMODE and Register Value
00001328                           326  OP1101:
00001328  43F9 00001956            327          LEA     ADDITION, A1
0000132E  103C 000E                328          MOVE.B  #14, D0
00001332  4E4F                     329          TRAP    #15
00001334  E94A                     330          LSL.W   #4, D2
00001336  3602                     331          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001338  E04B                     332          LSR.W   #8, D3 * D3 = D register
0000133A  EA4B                     333          LSR.W   #5, D3
0000133C  3802                     334          MOVE.W  D2, D4 *D4 = SubOPMODE
0000133E  E74C                     335          LSL.W   #3, D4
00001340  E04C                     336          LSR.W   #8, D4
00001342  EA4C                     337          LSR.W   #5, D4
00001344  3202                     338          MOVE.W  D2, D1 * D1 = EA Mode
00001346  ED49                     339          LSL.W   #6, D1
00001348  E049                     340          LSR.W   #8, D1
0000134A  EA49                     341          LSR.W   #5, D1
0000134C  3002                     342          MOVE.W  D2, D0 * D0 = EA register
0000134E  E148                     343          LSL.W   #8, D0
00001350  E348                     344          LSL.W   #1, D0
00001352  E048                     345          LSR.W   #8, D0
00001354  EA48                     346          LSR.W   #5, D0
00001356  45F9 00001364            347          LEA     SubTable, A2
0000135C  C8FC 0006                348          MULU    #6, D4
00001360  4EB2 4000                349          JSR     (A2, D4)
00001364                           350          
00001364                           351  * =============================================
00001364                           352  * JMP Table for SUB OPMODES
00001364                           353  SubTable:
00001364  4EF9 00001394            354          JMP     OPMODE000 * BYTE  EA->DN
0000136A  4EF9 000013A6            355          JMP     OPMODE001 * WORD  RA->DN  
00001370  4EF9 000013B8            356          JMP     OPMODE010 * LONG  EA->DN 
00001376  4EF9 000013CA            357          JMP     OPMODE011 * ADDA  WORD
0000137C  4EF9 000013F8            358          JMP     OPMODE100 * BYTE  DN->EA
00001382  4EF9 00001410            359          JMP     OPMODE101 * BYTE  DN->EA
00001388  4EF9 00001428            360          JMP     OPMODE110 * BYTE  DN->EA
0000138E  4EF9 00001440            361          JMP     OPMODE111 * ADDA  LONG
00001394                           362          
00001394                           363  OPMODE000:
00001394  1A00                     364          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001396  43F9 000018F3            365          LEA     SIZE_BYTE, A1
0000139C  103C 000E                366          MOVE.B  #14, D0
000013A0  4E4F                     367          TRAP    #15
000013A2  6000 00DC                368          BRA     Sub_OPMODE_FIRST
000013A6                           369  OPMODE001
000013A6  1A00                     370          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000013A8  43F9 000018F7            371          LEA     SIZE_Word, A1
000013AE  103C 000E                372          MOVE.B  #14, D0
000013B2  4E4F                     373          TRAP    #15
000013B4  6000 00CA                374          BRA     Sub_OPMODE_FIRST
000013B8                           375  OPMODE010
000013B8  1A00                     376          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000013BA  43F9 000018FB            377          LEA     SIZE_Long, A1
000013C0  103C 000E                378          MOVE.B  #14, D0
000013C4  4E4F                     379          TRAP    #15
000013C6  6000 00B8                380          BRA     Sub_OPMODE_FIRST
000013CA                           381  *===============================================
000013CA                           382  *Special OPMODE can only be used by ADD
000013CA                           383  OPMODE011
000013CA  0C38 000D 10F2           384          CMP.B   #%1101, OpCode
000013D0  6700 0008                385          BEQ     Special_OPMODE_USED
000013D4  4EF9 0000184C            386          JMP     PRINTINVALIDEA
000013DA                           387  Special_OPMODE_USED:
000013DA  1A00                     388          MOVE.B  D0, D5
000013DC  43F9 00001918            389          LEA     MOVEA, A1
000013E2  103C 000E                390          MOVE.B  #14, D0
000013E6  4E4F                     391          TRAP    #15
000013E8  43F9 000018F7            392          LEA     SIZE_WORD, A1
000013EE  103C 000E                393          MOVE.B  #14, D0
000013F2  4E4F                     394          TRAP    #15
000013F4  6000 00CE                395          BRA     Sub_OPMODE_ADDA
000013F8                           396  OPMODE100
000013F8  1A00                     397          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000013FA  43F9 000018F3            398          LEA     SIZE_BYTE, A1
00001400  103C 000E                399          MOVE.B  #14, D0
00001404  4E4F                     400          TRAP    #15
00001406  4EB9 0000146E            401          JSR     Memory_Alterable_Check
0000140C  6000 0090                402          BRA     Sub_OPMODE_SECOND
00001410                           403  OPMODE101
00001410  1A00                     404          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001412  43F9 000018F7            405          LEA     SIZE_Word, A1
00001418  103C 000E                406          MOVE.B  #14, D0
0000141C  4E4F                     407          TRAP    #15
0000141E  4EB9 0000146E            408          JSR     Memory_Alterable_Check
00001424  6000 0078                409          BRA     Sub_OPMODE_SECOND
00001428                           410  OPMODE110
00001428  1A00                     411          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000142A  43F9 000018FB            412          LEA     SIZE_LONG, A1
00001430  103C 000E                413          MOVE.B  #14, D0
00001434  4E4F                     414          TRAP    #15
00001436  4EB9 0000146E            415          JSR     Memory_Alterable_Check
0000143C  6000 0060                416          BRA     Sub_OPMODE_SECOND
00001440                           417  OPMODE111:
00001440  0C38 000D 10F2           418          CMP.B   #%1101, OpCode
00001446  6700 0008                419          BEQ     Special_OPMODE_USED2
0000144A  4EF9 0000184C            420          JMP     PRINTINVALIDEA
00001450                           421  Special_OPMODE_USED2:
00001450  1A00                     422          MOVE.B  D0, D5
00001452  43F9 00001918            423          LEA     MOVEA, A1
00001458  103C 000E                424          MOVE.B  #14, D0
0000145C  4E4F                     425          TRAP    #15
0000145E  43F9 000018FB            426          LEA     SIZE_LONG, A1
00001464  103C 000E                427          MOVE.B  #14, D0
00001468  4E4F                     428          TRAP    #15
0000146A  6000 0058                429          BRA     Sub_OPMODE_ADDA
0000146E                           430  *===================================================
0000146E                           431  * USED FOR SUB AND OR, check if dest EA is memory Alterable
0000146E                           432  
0000146E                           433  Memory_Alterable_Check:
0000146E  B23C 0000                434          CMP.B   #%000, D1
00001472  6700 03D8                435          BEQ     PRINTINVALIDEA
00001476  B23C 0001                436          CMP.B   #%001, D1
0000147A  6700 03D0                437          BEQ     PRINTINVALIDEA
0000147E  4E75                     438          RTS
00001480                           439          
00001480                           440  *===============================================
00001480                           441  * Used for Dn->EA for SUB
00001480                           442  * Called by 001, 010, 100, 
00001480                           443  Sub_OPMODE_FIRST:
00001480  1005                     444          MOVE.B  D5, D0   * TEMP RETURN D0
00001482  4EB9 00001536            445          JSR     EACHECKER 
00001488  4240                     446          CLR     D0
0000148A  4241                     447          CLR     D1
0000148C  4EB9 0000183E            448          JSR     PRINTCOMMA
00001492  1003                     449          MOVE.B  D3, D0
00001494  4EB9 00001564            450          JSR     DestEAChecker 
0000149A  6000 FBD6                451          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
0000149E                           452  *===============================================
0000149E                           453  * Used for Dn->EA for SUB
0000149E                           454  * Called by 100, 101, 110 
0000149E                           455  Sub_OPMODE_SECOND:
0000149E  1801                     456          MOVE.B  D1, D4   *TEMP STORE D1
000014A0  4240                     457          CLR     D0  *Clean D0
000014A2  1003                     458          MOVE.B  D3, D0
000014A4  4241                     459          CLR     D1
000014A6  4EB9 00001536            460          JSR     EACHECKER 
000014AC  4240                     461          CLR     D0
000014AE  4241                     462          CLR     D1
000014B0  4EB9 0000183E            463          JSR     PRINTCOMMA
000014B6  1005                     464          MOVE.B  D5, D0   * TEMP RETURN D0
000014B8  1204                     465          MOVE.B  D4, D1   * TEMP RETURN D1
000014BA  4EB9 00001564            466          JSR     DestEAChecker 
000014C0  6000 FBB0                467          BRA     addrloop *EA FINISHED-----
000014C4                           468  *===============================================
000014C4                           469  * Used for Dn->EA for SUB
000014C4                           470  * Called by 011, 111
000014C4                           471  Sub_OPMODE_ADDA:
000014C4  1005                     472          MOVE.B  D5, D0   * TEMP RETURN D0
000014C6  4EB9 00001536            473          JSR     EACHECKER 
000014CC  4240                     474          CLR     D0
000014CE  4241                     475          CLR     D1
000014D0  4EB9 0000183E            476          JSR     PRINTCOMMA
000014D6  1003                     477          MOVE.B  D3, D0
000014D8  123C 0001                478          MOVE.B  #%001, D1
000014DC  4EB9 00001564            479          JSR     DestEAChecker 
000014E2  6000 FB8E                480          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
000014E6                           481          
000014E6                           482  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
000014E6                           483  CHECK_MOVEA
000014E6  2602                     484          MOVE.L  D2, D3  * HOlding D2 in D3 temp
000014E8  E18A                     485          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000014EA  E18A                     486          LSL.L   #8, D2
000014EC  E98A                     487          LSL.L   #4, D2
000014EE  E08A                     488          LSR.L   #8, D2
000014F0  E08A                     489          LSR.L   #8, D2
000014F2  E88A                     490          LSR.L   #4, D2 // 12 bits of opperand found
000014F4  EC8A                     491          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
000014F6  1202                     492          MOVE.B  D2, D1 * Prepare D1 for Mode
000014F8  EB09                     493          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000014FA  EA09                     494          LSR.B   #5, D1
000014FC  B23C 0001                495          CMP.B   #%001, D1
00001500  6700 0006                496          BEQ     PRINTA
00001504  2403                     497          MOVE.L  D3, D2 
00001506  4E75                     498          RTS * Goes back to OP Value
00001508                           499          
00001508                           500  PRINTA
00001508  43F9 00001918            501          LEA     MOVEA, A1
0000150E  103C 000E                502          MOVE.B  #14, D0
00001512  4E4F                     503          TRAP    #15
00001514  2403                     504          MOVE.L  D3, D2
00001516  4E75                     505          RTS * Goes back to CHECK_MOVEA
00001518                           506          
00001518                           507          
00001518                           508  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
00001518                           509  *=================================================================
00001518                           510  *-----------EA-- Calculate EA used for Data Registers
00001518                           511  *----------Pre: D2, D0, D1 must be clear
00001518                           512  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
00001518                           513  EA:
00001518  4240                     514          CLR     D0  * Clear D0 and D1 so they don't conflict
0000151A  4241                     515          CLR     D1
0000151C  4243                     516          CLR     D3
0000151E  E18A                     517          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001520  E18A                     518          LSL.L   #8, D2
00001522  E98A                     519          LSL.L   #4, D2
00001524  E08A                     520          LSR.L   #8, D2
00001526  E08A                     521          LSR.L   #8, D2
00001528  E88A                     522          LSR.L   #4, D2 // 12 bits of opperand found
0000152A  1002                     523          MOVE.B  D2, D0 Source Data Register
0000152C  EB08                     524          LSL.B   #5, D0
0000152E  EA08                     525          LSR.B   #5, D0
00001530  1202                     526          MOVE.B  D2, D1 *Source Data Mode
00001532  E509                     527          LSL.B   #2, D1
00001534  EA09                     528          LSR.B   #5, D1
00001536                           529          
00001536                           530  *=================================================
00001536                           531  *-----------EA CHECKER------Continues from EA
00001536                           532  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001536                           533  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
00001536                           534  EACHECKER: 
00001536  B23C 0000                535          CMP.B   #%0000, D1
0000153A  6700 0076                536          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
0000153E  B23C 0001                537          CMP.B   #%0001, D1
00001542  6700 008E                538          BEQ     JMPTO_SRC_ADDR_REG
00001546  B23C 0002                539          CMP.B   #%0010, D1
0000154A  6700 00A6                540          BEQ     JMPTO_SRC_INDR_ADDR_REG
0000154E  B23C 0003                541          CMP.B   #%0011, D1
00001552  6700 009E                542          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001556  B23C 0004                543          CMP.B   #%0100, D1
0000155A  6700 0096                544          BEQ     JMPTO_SRC_INDR_ADDR_REG
0000155E  4EF9 0000184C            545          JMP     PRINTINVALIDEA
00001564                           546          
00001564                           547  *=================================================
00001564                           548  *-----------DEST EA CHECKER------Continues from EA
00001564                           549  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001564                           550  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
00001564                           551  DESTEACHECKER:
00001564  B23C 0000                552          CMP.B   #%0000, D1
00001568  6700 0058                553          BEQ     JMPTODestREG *JUMPS TO Source D registers
0000156C  B23C 0001                554          CMP.B   #%0001, D1
00001570  6700 0070                555          BEQ     JMPTO_DEST_ADDR_REG
00001574  B23C 0002                556          CMP.B   #%0010, D1
00001578  6700 00B4                557          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000157C  B23C 0003                558          CMP.B   #%0011, D1
00001580  6700 00AC                559          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001584  B23C 0004                560          CMP.B   #%0100, D1
00001588  6700 00A4                561          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000158C  4EF9 0000184C            562          JMP     PRINTINVALIDEA
00001592                           563          
00001592                           564  *=================================================      
00001592                           565  * Dest EA Finder
00001592                           566  * PRE: ONLY USED FOR MOVE
00001592                           567  * POST: PRINTS DEST EA  
00001592                           568  DestEAFinder:
00001592  4EB9 0000183E            569          JSR     PRINTCOMMA  * Prints comma between two operrands
00001598  EC8A                     570          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
0000159A  4241                     571          CLR     D1     * Clear D1 and D0 for opperand mode and register
0000159C  4240                     572          CLR     D0
0000159E  1202                     573          MOVE.B  D2, D1 * Prepare D1 for Mode
000015A0  EB09                     574          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000015A2  EA09                     575          LSR.B   #5, D1
000015A4  1002                     576          MOVE.B  D2, D0  *Prepare D0 for Register
000015A6  E508                     577          LSL.B   #2, D0
000015A8  EA08                     578          LSR.B   #5, D0
000015AA  4EB8 1564                579          JSR     DESTEACHECKER
000015AE  4EF8 106C                580          JMP     END     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
000015B2                           581  
000015B2                           582          
000015B2                           583  *===================================================
000015B2                           584  *-------------Data Register checker------------------        
000015B2                           585  JMPTOSRCREG:
000015B2  43F9 000016F2            586          LEA     DATAREGTABLE, A1
000015B8  C0FC 0006                587          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000015BC  4EB1 0000                588          JSR     (A1, D0) *JMP To index A1 + D0
000015C0                           589          * EA CONTINUES HERE
000015C0  4E75                     590          RTS * BRA DESTEAFINDER DELETED
000015C2                           591  JMPToDestReg: *PRINT OUT DEST Registers
000015C2  43F9 000016F2            592          LEA     DATAREGTABLE, A1
000015C8  C0FC 0006                593          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000015CC  4EB1 0000                594          JSR     (A1, D0) *JMP to A1 + D0
000015D0  4E75                     595          RTS    * Goes Back to DestEAFinder
000015D2                           596          
000015D2                           597  
000015D2                           598  *===================================================
000015D2                           599  *-------------Address Register checker------------------             
000015D2                           600  JMPTO_SRC_ADDR_REG:
000015D2  43F9 00001722            601          LEA     AddrREGTABLE, A1
000015D8  C0FC 0006                602          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000015DC  4EB1 0000                603          JSR     (A1, D0) *JMP To index A1 + D0
000015E0                           604          * EA CONTINUES HERE
000015E0  4E75                     605          RTS * BRA DESTEAFINDER DELETED
000015E2                           606  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
000015E2  43F9 00001722            607          LEA     AddrREGTABLE, A1
000015E8  C0FC 0006                608          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000015EC  4EB1 0000                609          JSR     (A1, D0) *JMP to A1 + D0
000015F0  4E75                     610          RTS     * Goes Back to DESTEAFinder
000015F2                           611          
000015F2                           612  *===================================================
000015F2                           613  *-------------Indirect Address Register checker------------------
000015F2                           614  *Copied from Address Register checker, basically adding parenthesis () around Address register
000015F2                           615  * Also Detects ()+ and -()
000015F2                           616  * PRE: D1 stores mode, D0 stores register #
000015F2                           617  * D1 to D5 are off limits
000015F2                           618  JMPTO_SRC_INDR_ADDR_REG:
000015F2  1A00                     619         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
000015F4  B23C 0004                620         CMP.B    #%100, D1       * IF IT IS -()
000015F8  6700 007E                621         BEQ      PRE_DECREMENT_SRC
000015FC  43F9 0000194A            622         LEA      INDR_LEFT, A1
00001602  103C 000E                623         MOVE.B   #14, D0
00001606  4E4F                     624         TRAP     #15
00001608  1005                     625         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
0000160A  43F9 00001722            626         LEA     AddrREGTABLE, A1
00001610  C0FC 0006                627         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001614  4EB1 0000                628         JSR     (A1, D0) *JMP To index A1 + D0
00001618  43F9 0000194C            629         LEA      INDR_RIGHT, A1
0000161E  103C 000E                630         MOVE.B   #14, D0
00001622  4E4F                     631         TRAP     #15
00001624  B23C 0003                632         CMP.B    #%0011, D1 * IF IT IS ()+
00001628  6700 0040                633         BEQ      POST_INCREMENT_SRC
0000162C  4E75                     634         RTS * BRA DESTEAFINDER DELETED
0000162E                           635         
0000162E                           636  JMPTO_DEST_INDR_ADDR_REG:
0000162E  1600                     637         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
00001630  B23C 0004                638         CMP.B    #%100, D1
00001634  6700 0086                639         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00001638  43F9 0000194A            640         LEA      INDR_LEFT, A1
0000163E  103C 000E                641         MOVE.B   #14, D0
00001642  4E4F                     642         TRAP     #15
00001644  1003                     643         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001646  43F9 00001722            644         LEA     AddrREGTABLE, A1
0000164C  C0FC 0006                645         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001650  4EB1 0000                646         JSR     (A1, D0) *JMP To index A1 + D0
00001654  43F9 0000194C            647         LEA      INDR_RIGHT, A1
0000165A  103C 000E                648         MOVE.B   #14, D0
0000165E  4E4F                     649         TRAP     #15
00001660  B23C 0003                650         CMP.B    #%0011, D1  // IF IT IS ()+
00001664  6700 0048                651         BEQ      POST_INCREMENT_DEST
00001668  4E75                     652         RTS      * Goes Back to DestEAFinder
0000166A                           653         
0000166A                           654  POST_INCREMENT_SRC:
0000166A  43F9 0000194E            655         LEA      POST_INCRE, A1
00001670  103C 000E                656         MOVE.B   #14, D0
00001674  4E4F                     657         TRAP     #15
00001676  4E75                     658         RTS * BRA DESTEAFINDER DELETED
00001678                           659         
00001678                           660  PRE_DECREMENT_SRC:
00001678  43F9 00001950            661         LEA      PRE_DECRE, A1
0000167E  103C 000E                662         MOVE.B   #14, D0
00001682  4E4F                     663         TRAP     #15
00001684  43F9 0000194A            664         LEA      INDR_LEFT, A1
0000168A  103C 000E                665         MOVE.B   #14, D0
0000168E  4E4F                     666         TRAP     #15
00001690  1005                     667         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001692  43F9 00001722            668         LEA     AddrREGTABLE, A1
00001698  C0FC 0006                669         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000169C  4EB1 0000                670         JSR     (A1, D0) *JMP To index A1 + D0
000016A0  43F9 0000194C            671         LEA      INDR_RIGHT, A1
000016A6  103C 000E                672         MOVE.B   #14, D0
000016AA  4E4F                     673         TRAP     #15
000016AC  4E75                     674         RTS * BRA DESTEAFINDER DELETED
000016AE                           675  
000016AE                           676  POST_INCREMENT_DEST
000016AE  43F9 0000194E            677         LEA      POST_INCRE, A1
000016B4  103C 000E                678         MOVE.B   #14, D0
000016B8  4E4F                     679         TRAP     #15
000016BA  4E75                     680         RTS      * Goes Back to DestEAFinder
000016BC                           681         
000016BC                           682  PRE_DECREMENT_DEST:
000016BC  43F9 00001950            683         LEA      PRE_DECRE, A1
000016C2  103C 000E                684         MOVE.B   #14, D0
000016C6  4E4F                     685         TRAP     #15
000016C8  43F9 0000194A            686         LEA      INDR_LEFT, A1
000016CE  103C 000E                687         MOVE.B   #14, D0
000016D2  4E4F                     688         TRAP     #15
000016D4  1005                     689         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000016D6  43F9 00001722            690         LEA     AddrREGTABLE, A1
000016DC  C0FC 0006                691         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000016E0  4EB1 0000                692         JSR     (A1, D0) *JMP To index A1 + D0
000016E4  43F9 0000194C            693         LEA      INDR_RIGHT, A1
000016EA  103C 000E                694         MOVE.B   #14, D0
000016EE  4E4F                     695         TRAP     #15
000016F0  4E75                     696         RTS      * Goes Back to DestEAFinder
000016F2                           697         
000016F2                           698  
000016F2                           699  
000016F2                           700  *=================================================================
000016F2                           701  *---------Data Register Table used for printing out Registers----
000016F2                           702  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
000016F2                           703  DataRegTable
000016F2  4EF9 00001752            704          JMP REG_D0
000016F8  4EF9 00001766            705          JMP REG_D1
000016FE  4EF9 00001774            706          JMP REG_D2
00001704  4EF9 00001782            707          JMP REG_D3
0000170A  4EF9 00001790            708          JMP REG_D4
00001710  4EF9 0000179E            709          JMP REG_D5
00001716  4EF9 000017AC            710          JMP REG_D6
0000171C  4EF9 000017BA            711          JMP REG_D7
00001722                           712  
00001722                           713  AddrRegTable:
00001722                           714          
00001722  4EF9 000017C8            715          JMP REG_A0
00001728  4EF9 000017DC            716          JMP REG_A1
0000172E  4EF9 000017EA            717          JMP REG_A2
00001734  4EF9 000017F8            718          JMP REG_A3
0000173A  4EF9 00001806            719          JMP REG_A4
00001740  4EF9 00001814            720          JMP REG_A5
00001746  4EF9 00001822            721          JMP REG_A6
0000174C  4EF9 00001830            722          JMP REG_A7
00001752                           723  
00001752                           724  * Data Registers Printing        
00001752                           725  REG_D0:
00001752  227C 00000000            726          MOVEA.L #$0, A1
00001758  43F9 0000191A            727          LEA     DREG0, A1
0000175E  103C 000E                728          MOVE.B  #14, D0
00001762  4E4F                     729          TRAP    #15
00001764  4E75                     730          RTS
00001766                           731          
00001766                           732  REG_D1:
00001766  43F9 0000191D            733          LEA     DREG1, A1
0000176C  103C 000E                734          MOVE.B  #14, D0
00001770  4E4F                     735          TRAP    #15
00001772  4E75                     736          RTS
00001774                           737  REG_D2:
00001774  43F9 00001920            738          LEA     DREG2, A1
0000177A  103C 000E                739          MOVE.B  #14, D0
0000177E  4E4F                     740          TRAP    #15
00001780  4E75                     741          RTS
00001782                           742  REG_D3:
00001782  43F9 00001923            743          LEA     DREG3, A1
00001788  103C 000E                744          MOVE.B  #14, D0
0000178C  4E4F                     745          TRAP    #15
0000178E  4E75                     746          RTS
00001790                           747  REG_D4:
00001790  43F9 00001926            748          LEA     DREG4, A1
00001796  103C 000E                749          MOVE.B  #14, D0
0000179A  4E4F                     750          TRAP    #15
0000179C  4E75                     751          RTS
0000179E                           752  REG_D5:
0000179E  43F9 00001929            753          LEA     DREG5, A1
000017A4  103C 000E                754          MOVE.B  #14, D0
000017A8  4E4F                     755          TRAP    #15
000017AA  4E75                     756          RTS
000017AC                           757  REG_D6:
000017AC  43F9 0000192C            758          LEA     DREG6, A1
000017B2  103C 000E                759          MOVE.B  #14, D0
000017B6  4E4F                     760          TRAP    #15
000017B8  4E75                     761          RTS
000017BA                           762  REG_D7:
000017BA  43F9 0000192F            763          LEA     DREG7, A1
000017C0  103C 000E                764          MOVE.B  #14, D0
000017C4  4E4F                     765          TRAP    #15
000017C6  4E75                     766          RTS
000017C8                           767          
000017C8                           768  *--------------------Addr Reigster printing ------------------------*        
000017C8                           769  REG_A0:
000017C8  227C 00000000            770          MOVEA.L #$0, A1
000017CE  43F9 00001932            771          LEA     AREG0, A1
000017D4  103C 000E                772          MOVE.B  #14, D0
000017D8  4E4F                     773          TRAP    #15
000017DA  4E75                     774          RTS
000017DC                           775          
000017DC                           776  REG_A1:
000017DC  43F9 00001935            777          LEA     AREG1, A1
000017E2  103C 000E                778          MOVE.B  #14, D0
000017E6  4E4F                     779          TRAP    #15
000017E8  4E75                     780          RTS
000017EA                           781  REG_A2:
000017EA  43F9 00001938            782          LEA     AREG2, A1
000017F0  103C 000E                783          MOVE.B  #14, D0
000017F4  4E4F                     784          TRAP    #15
000017F6  4E75                     785          RTS
000017F8                           786  REG_A3:
000017F8  43F9 0000193B            787          LEA     AREG3, A1
000017FE  103C 000E                788          MOVE.B  #14, D0
00001802  4E4F                     789          TRAP    #15
00001804  4E75                     790          RTS
00001806                           791  REG_A4:
00001806  43F9 0000193E            792          LEA     AREG4, A1
0000180C  103C 000E                793          MOVE.B  #14, D0
00001810  4E4F                     794          TRAP    #15
00001812  4E75                     795          RTS
00001814                           796  REG_A5:
00001814  43F9 00001941            797          LEA     AREG5, A1
0000181A  103C 000E                798          MOVE.B  #14, D0
0000181E  4E4F                     799          TRAP    #15
00001820  4E75                     800          RTS
00001822                           801  REG_A6:
00001822  43F9 00001944            802          LEA     AREG6, A1
00001828  103C 000E                803          MOVE.B  #14, D0
0000182C  4E4F                     804          TRAP    #15
0000182E  4E75                     805          RTS
00001830                           806  REG_A7:
00001830  43F9 00001947            807          LEA     AREG7, A1
00001836  103C 000E                808          MOVE.B  #14, D0
0000183A  4E4F                     809          TRAP    #15
0000183C  4E75                     810          RTS
0000183E                           811          
0000183E                           812  *====================================================PRinting/ ERROR method comes down here=========================================
0000183E                           813  PRINTCOMMA: * Prints comma between two operrands
0000183E  43F9 000018F0            814          LEA     COMMA, A1
00001844  103C 000E                815          MOVE.B  #14, D0
00001848  4E4F                     816          TRAP    #15
0000184A  4E75                     817          RTS
0000184C                           818          
0000184C                           819  PrintInvalidEA:
0000184C  43F9 000018BC            820          LEA     Invalid_EA_Addr, A1
00001852  103C 000E                821          MOVE.B  #14, D0
00001856  4E4F                     822          TRAP    #15
00001858  4EF8 1072                823          JMP     AddrLoop
0000185C                           824          
0000185C                           825  PrintInvalidSUB:
0000185C  43F9 000018D2            826          LEA     Invalid_EA_SUB, A1
00001862  103C 000E                827          MOVE.B  #14, D0
00001866  4E4F                     828          TRAP    #15
00001868  4EF8 1072                829          JMP     AddrLoop
0000186C                           830          
0000186C                           831          
0000186C                           832          
0000186C                           833           
0000186C                           834  * Clear all registers    
0000186C                           835  CLRREG:
0000186C  4241                     836      CLR D1
0000186E  4242                     837      CLR D2
00001870  4243                     838      CLR D3
00001872  4244                     839      CLR D4
00001874  4245                     840      CLR D5
00001876  4246                     841      CLR D6
00001878  4E75                     842      RTS
0000187A                           843      
0000187A                           844      
0000187A                           845          
0000187A                           846  * Put program code here
0000187A                           847  
0000187A  FFFF FFFF                848      SIMHALT             ; halt simulator
0000187E                           849  
0000187E                           850  * Put variables and constants here
0000187E  =0000000D                851  CR  EQU $0D
0000187E  =0000000A                852  LF  EQU $0A
0000187E= 50 6C 65 61 73 65 ...    853  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
0000189E= 50 6C 65 61 73 65 ...    854  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
000018BC= 49 6E 76 61 6C 69 ...    855  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
000018D2= 49 6E 76 61 6C 69 ...    856  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
000018F0                           857  
000018F0= 2C 20 00                 858  COMMA       DC.B    ', ', 0
000018F3                           859  
000018F3                           860  *DATASIZE
000018F3= 2E 42 20 00              861  SIZE_BYTE       DC.B    '.B ', 0
000018F7= 2E 57 20 00              862  SIZE_WORD       DC.B    '.W ', 0
000018FB= 2E 4C 20 00              863  SIZE_LONG       DC.B    '.L ', 0
000018FF                           864  
000018FF                           865  *MOVE OPCODES
000018FF= 4D 4F 56 45 00           866  MOVE_PRINT  DC.B    'MOVE', 0
00001904= 4D 4F 56 45 2E 42 ...    867  MOVEB       DC.B    'MOVE.B ', 0
0000190C= 2E 42 20 00              868  SIZE_B       DC.B    '.B ', 0
00001910= 2E 57 20 00              869  MOVEW       DC.B    '.W ', 0
00001914= 2E 4C 20 00              870  MOVEL       DC.B    '.L ', 0
00001918= 41 00                    871  MOVEA       DC.B    'A', 0
0000191A                           872  
0000191A                           873  
0000191A                           874  *DATA REGISTERS PRINTOUT
0000191A= 44 30 00                 875  DREG0       DC.B    'D0', 0
0000191D= 44 31 00                 876  DREG1       DC.B    'D1', 0
00001920= 44 32 00                 877  DREG2       DC.B    'D2', 0
00001923= 44 33 00                 878  DREG3       DC.B    'D3', 0
00001926= 44 34 00                 879  DREG4       DC.B    'D4', 0
00001929= 44 35 00                 880  DREG5       DC.B    'D5', 0
0000192C= 44 36 00                 881  DREG6       DC.B    'D6', 0
0000192F= 44 37 00                 882  DREG7       DC.B    'D7', 0 
00001932                           883  
00001932                           884  *ADDR REGISTERS PRINTOUT
00001932= 41 30 00                 885  AREG0       DC.B    'A0', 0
00001935= 41 31 00                 886  AREG1       DC.B    'A1', 0
00001938= 41 32 00                 887  AREG2       DC.B    'A2', 0
0000193B= 41 33 00                 888  AREG3       DC.B    'A3', 0
0000193E= 41 34 00                 889  AREG4       DC.B    'A4', 0
00001941= 41 35 00                 890  AREG5       DC.B    'A5', 0
00001944= 41 36 00                 891  AREG6       DC.B    'A6', 0
00001947= 41 37 00                 892  AREG7       DC.B    'A7', 0 
0000194A                           893  
0000194A                           894  *INDR_ADDR REGISTERS PRINTOUT
0000194A= 28 00                    895  INDR_LEFT   DC.B    '(', 0
0000194C= 29 00                    896  INDR_RIGHT  DC.B    ')', 0
0000194E= 2B 00                    897  POST_INCRE   DC.B    '+', 0
00001950= 2D 00                    898  PRE_DECRE   DC.B    '-', 0
00001952                           899  
00001952                           900  *SUB
00001952= 53 55 42 00              901  SUBTRACT    DC.B    'SUB', 0
00001956= 41 44 44 00              902  ADDITION    DC.B    'ADD', 0
0000195A= 41 4E 44 00              903  AND         DC.B    'AND', 0
0000195E= 4F 52 00                 904  OR          DC.B    'OR', 0
00001961= 4E 4F 54 00              905  NOT_OP      DC.B    'NOT', 0
00001965                           906  
00001966= 00000001                 907  addrStart   DC.L    1   // Starting address
0000196A= 00000001                 908  addrEnd     DC.L    1   // ending address
0000196E= 00000001                 909  OpCodeStorage DC.L    1
00001972                           910      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   10CE
ADDITION            1956
ADDREND             196A
ADDRLOOP            1072
ADDRREGTABLE        1722
ADDRSTART           1966
ADDVAL              10C8
AND                 195A
AREG0               1932
AREG1               1935
AREG2               1938
AREG3               193B
AREG4               193E
AREG5               1941
AREG6               1944
AREG7               1947
B                   10D4
C                   10DA
CHAR                1098
CHECK_MOVEA         14E6
CLRREG              186C
COMMA               18F0
CONVERT             107E
CR                  D
D                   10E0
DATAREGTABLE        16F2
DESTEACHECKER       1564
DESTEAFINDER        1592
DREG0               191A
DREG1               191D
DREG2               1920
DREG3               1923
DREG4               1926
DREG5               1929
DREG6               192C
DREG7               192F
E                   10E6
EA                  1518
EACHECKER           1536
END                 106C
F                   10EC
GETINPUT            1006
INDR_LEFT           194A
INDR_RIGHT          194C
INVALID_EA_ADDR     18BC
INVALID_EA_SUB      18D2
JMPTABLE            1116
JMPTODESTREG        15C2
JMPTOSRCREG         15B2
JMPTO_DEST_ADDR_REG  15E2
JMPTO_DEST_INDR_ADDR_REG  162E
JMPTO_SRC_ADDR_REG  15D2
JMPTO_SRC_INDR_ADDR_REG  15F2
LF                  A
LOOP                1074
MEMORY_ALTERABLE_CHECK  146E
MOVEA               1918
MOVEB               1904
MOVEL               1914
MOVEW               1910
MOVE_PRINT          18FF
NOT_JMPTABLE        1202
NOT_OP              1961
NOT_SIZE00          121A
NOT_SIZE01          1234
NOT_SIZE10          124E
NOT_SIZE11          1268
OP0000              116A
OP0001              116A
OP0010              1180
OP0011              11A8
OP0100              11D0
OP0101              126C
OP0110              126C
OP0111              126C
OP1000              12A8
OP1001              126C
OP1010              12EC
OP1011              12EC
OP1100              12EC
OP1101              1328
OPCODE              10F2
OPCODESTORAGE       196E
OPMODE000           1394
OPMODE001           13A6
OPMODE010           13B8
OPMODE011           13CA
OPMODE100           13F8
OPMODE101           1410
OPMODE110           1428
OPMODE111           1440
OR                  195E
POST_INCRE          194E
POST_INCREMENT_DEST  16AE
POST_INCREMENT_SRC  166A
PRE_DECRE           1950
PRE_DECREMENT_DEST  16BC
PRE_DECREMENT_SRC   1678
PRINTA              1508
PRINTCOMMA          183E
PRINTINVALIDEA      184C
PRINTINVALIDSUB     185C
REG_A0              17C8
REG_A1              17DC
REG_A2              17EA
REG_A3              17F8
REG_A4              1806
REG_A5              1814
REG_A6              1822
REG_A7              1830
REG_D0              1752
REG_D1              1766
REG_D2              1774
REG_D3              1782
REG_D4              1790
REG_D5              179E
REG_D6              17AC
REG_D7              17BA
SIZE_B              190C
SIZE_BYTE           18F3
SIZE_LONG           18FB
SIZE_WORD           18F7
SPECIAL_OPMODE_USED  13DA
SPECIAL_OPMODE_USED2  1450
START               1000
SUBTABLE            1364
SUBTRACT            1952
SUB_OPMODE_ADDA     14C4
SUB_OPMODE_FIRST    1480
SUB_OPMODE_SECOND   149E
WELCOME             187E
WELCOME2            189E
