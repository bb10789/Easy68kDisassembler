00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/10/2020 8:20:10 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00009000                            12      ORG    $9000
00009000                            13  TESTER:
00009000  4611                      14          NOT.B       (A1)
00009002  4659                      15          NOT.W       (A1)+
00009004  4693                      16          NOT.L       (A3)
00009006  1200                      17          MOVE.B      D0, D1
00009008  E6D1                      18          ROR         (A1)
0000900A                            19  
00001000                            20      ORG    $1000
00001000                            21  *=================================================================
00001000                            22  *                     THIS IS OUR MAIN METHOD
00001000                            23  *               Don't throw random stuff in it, keep it to a minimum
00001000                            24  
00001000                            25  START:                  ; first instruction of program
00001000  4EB9 00001006             26          JSR     GETINPUT
00001006                            27  *=================================================================
00001006                            28  *---------------Get starting and ending addresss------- Kelvin
00001006                            29  *--------------- PRE: will be using D0, D5, A1
00001006                            30  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            31  GETINPUT:
00001006  4EB9 00001A3E             32          JSR     CLRREG    *clean registers to restart program
0000100C  43F9 00001A52             33          LEA     WELCOME, A1
00001012  103C 000E                 34          MOVE.B  #14,    D0
00001016  4E4F                      35          TRAP    #15
00001018  327C 0000                 36          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000101C  103C 0002                 37          MOVE.B  #2,D0
00001020  4E4F                      38          TRAP    #15
00001022  2801                      39          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001024  7000                      40          MOVE.L  #$0, d0  // intitiate counter
00001026  4EB9 00001102             41          JSR     LOOP    // Convert starting address into hex
0000102C  23C5 00001B9A             42          MOVE.L  D5, addrStart
00001032  43F9 00001A72             43          LEA     WELCOME2, A1
00001038  103C 000E                 44          MOVE.B  #14,    D0
0000103C  4E4F                      45          TRAP    #15
0000103E  327C 0000                 46          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001042  103C 0002                 47          MOVE.B  #2,D0
00001046  4E4F                      48          TRAP    #15
00001048  4245                      49          CLR     D5       // Clear D5 for exit address
0000104A  1801                      50          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 51          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001102             52          JSR     LOOP    // Convert Ending address int Hex
00001056  23C5 00001B9E             53          MOVE.L  D5, addrEnd
0000105C  4EB9 00001076             54          JSR     CheckRange
00001062                            55          *MOVE.W  #$4655, $6000 // MOVE.L D0, D1, used for testing only
00001062                            56          *LEA     $6000, A6 //testing
00001062  2039 00001B9A             57          MOVE.L  addrStart, D0
00001068  2C40                      58          MOVEA.L D0, A6
0000106A  4EB9 00001180             59          JSR     OPCODE
00001070  4EF9 000010B4             60          JMP     END
00001076                            61  
00001076                            62  *==================================================================
00001076                            63  *-----------------Check if the range is above or under the limit
00001076                            64  *------------------Pre: addrStart and addrEnd has begin and end values
00001076                            65          
00001076                            66  CheckRange:
00001076  2C79 00001B9A             67          MOVE.L  AddrStart, A6
0000107C  203C 00003000             68          MOVE.L  #LowerLimit, D0
00001082  B08E                      69          CMP.L   A6, D0
00001084  6E00 09A8                 70          BGT     PRINTINVALIDADDRESS
00001088  203C 00FFFFFE             71          MOVE.L  #UpperLimit, D0
0000108E  B08E                      72          CMP.L   A6, D0
00001090  6D00 099C                 73          BLT     PRINTINVALIDADDRESS
00001094  2C79 00001B9E             74          MOVE.L  AddrEnd, A6
0000109A  203C 00003000             75          MOVE.L  #LowerLimit, D0
000010A0  B08E                      76          CMP.L   A6, D0
000010A2  6E00 098A                 77          BGT     PRINTINVALIDADDRESS
000010A6  203C 00FFFFFE             78          MOVE.L  #UpperLimit, D0
000010AC  B08E                      79          CMP.L   A6, D0
000010AE  6D00 097E                 80          BLT     PRINTINVALIDADDRESS
000010B2  4E75                      81          RTS
000010B4                            82  
000010B4                            83  END:
000010B4  43F9 00001AFA             84          LEA     TY_Message, A1
000010BA  103C 000E                 85          MOVE.B  #14, D0
000010BE  4E4F                      86          TRAP    #15
000010C0  103C 0009                 87          MOVE.B  #9, D0
000010C4  4E4F                      88          TRAP    #15
000010C6                            89          
000010C6                            90  *Please start from here Annabelle
000010C6                            91  AddrLoop:
000010C6  43F9 00001AF7             92          LEA     PRINT_NEXTLINE, A1
000010CC  103C 000E                 93          MOVE.B  #14, D0
000010D0  4E4F                      94          TRAP    #15
000010D2  2879 00001B9E             95          MOVE.L  addrEnd, A4
000010D8  B9CE                      96          CMP.L   A6, A4
000010DA  6FD8                      97          BLE     END
000010DC  6000 00A2                 98          BRA     OPCODE
000010E0                            99          
000010E0                           100  *===========Check if user wants to continue
000010E0                           101  CHECK_CONT:
000010E0  43F9 00001ADF            102          LEA     Continue_Program, A1
000010E6  103C 000E                103          MOVE.B  #14, D0
000010EA  4E4F                     104          TRAP    #15
000010EC  43F8 0050                105          LEA     YesNoStorage, A1
000010F0  103C 0002                106          MOVE.B  #2, D0
000010F4  4E4F                     107          TRAP    #15
000010F6  0C11 0059                108          CMP.B   #$59, (A1) * Yes
000010FA  6700 FF0A                109          BEQ     GETINPUT
000010FE  4EF8 10B4                110          JMP     END
00001102                           111  LOOP
00001102                           112  
00001102  B880                     113          CMP.L   D0, D4  // Loop until length of word reached
00001104  6E00 0006                114          BGT     CONVERT
00001108  5480                     115          ADD.L   #$2, D0 
0000110A  4E75                     116          RTS 
0000110C                           117  
0000110C                           118  *=================================================================
0000110C                           119  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000110C                           120  *PRE      D4 must contain input length, d0 must be 0
0000110C                           121  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000110C                           122  CONVERT:
0000110C  5280                     123          ADDQ.L  #$1, D0 // increment counter
0000110E  1211                     124          move.b  (A1),D1    // Get next bit from Input
00001110  5289                     125          adda.L  #1, A1      // Increment Input
00001112  0401 0030                126          sub.b   #$30,D1     //
00001116  B23C 0010                127          cmp.b   #$10,D1   // Check if value is larger than 10
0000111A  6E00 000A                128          bgt     CHAR      // Find Hex
0000111E  1401                     129          move.b  D1, D2    // IF it is less than 10
00001120  4EF9 00001156            130          JMP     ADDVAL        
00001126                           131  CHAR:
00001126  B23C 0011                132          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
0000112A  6700 0030                133          BEQ     A
0000112E  B23C 0012                134          CMP.B   #$12, D1
00001132  6700 002E                135          BEQ     B
00001136  B23C 0013                136          CMP.B   #$13, D1
0000113A  6700 002C                137          BEQ     C
0000113E  B23C 0014                138          CMP.B   #$14, D1
00001142  6700 002A                139          BEQ     D
00001146  B23C 0015                140          CMP.B   #$15, D1
0000114A  6700 0028                141          BEQ     E
0000114E  B23C 0016                142          CMP.B   #$16, D1
00001152  6700 0026                143          BEQ     F
00001156                           144  
00001156                           145  ADDVAL:
00001156  E98D                     146          lsl.l    #$4, D5 // Shift based on position
00001158  DA82                     147          add.l    D2, D5 //Add value into Input
0000115A  60A6                     148          BRA      LOOP
0000115C                           149      
0000115C                           150  A:
0000115C  740A                     151          MOVE.L  #$A, D2 
0000115E  4EF8 1156                152          jmp ADDVAL
00001162                           153  B:
00001162  740B                     154          MOVE.L  #$B, D2
00001164  4EF8 1156                155          jmp ADDVAL
00001168                           156  C:
00001168  740C                     157          MOVE.L  #$C, D2
0000116A  4EF8 1156                158          jmp ADDVAL
0000116E                           159  D:
0000116E  740D                     160          MOVE.L  #$D, D2
00001170  4EF8 1156                161          jmp ADDVAL
00001174                           162  E:
00001174  740E                     163          MOVE.L  #$E, D2
00001176  4EF8 1156                164          jmp ADDVAL
0000117A                           165  F:
0000117A  740F                     166          MOVE.L  #$F, D2
0000117C  4EF8 1156                167          jmp ADDVAL
00001180                           168          
00001180                           169  *=======================================================================
00001180                           170  *---------Find the first 4 of instruction and determines the instruction
00001180                           171  OPCODE:
00001180  4280                     172          CLR.L     D0
00001182  4281                     173          CLR.L     D1
00001184  4282                     174          CLR.L     D2
00001186  320E                     175          MOVE.W  A6, D1  * PRINT ADDRESS PER LINE
00001188  143C 0010                176          MOVE.B  #16, D2
0000118C  103C 000F                177          MOVE.B  #15, D0
00001190  4E4F                     178          TRAP    #15
00001192  227C 00000000            179          MOVE.L  #$00000000, A1
00001198  43F9 00001B1F            180          LEA     SPACER, A1
0000119E  103C 000E                181          MOVE.B  #14, D0
000011A2  4E4F                     182          TRAP    #15
000011A4  4280                     183          CLR.L     D0
000011A6  4281                     184          CLR.L     D1
000011A8  4282                     185          CLR.L     D2
000011AA  321E                     186          MOVE.W  (A6)+,D1
000011AC  2401                     187          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
000011AE  E849                     188          LSR.W   #4, D1
000011B0  E849                     189          LSR.W   #4, D1
000011B2  E849                     190          LSR.W   #4, D1  //Right Shift 3 times
000011B4  1001                     191          MOVE.B  D1, D0  // OPCODE FOUND
000011B6  C0FC 0006                192          MULU    #6, D0
000011BA  11C0 1180                193          MOVE.B  D0, OpCode
000011BE  45F9 000011C8            194          LEA     JMPTABLE, A2
000011C4  4EF2 0000                195          JMP     (A2, D0)
000011C8                           196          
000011C8                           197  *========================================================================
000011C8                           198  *--------Jump table used for different opcode!!! Please orgainze well using decimal
000011C8                           199  *------- Add your instructions here
000011C8                           200  JMPTABLE
000011C8  4EF9 00001222            201          JMP     OP0000
000011CE  4EF9 00001222            202          JMP     OP0001 *MOVEB
000011D4  4EF9 00001240            203          JMP     OP0010 *MOVEL
000011DA  4EF9 00001270            204          JMP     OP0011 *MOVEW
000011E0  4EF9 00001298            205          JMP     OP0100 *NOT
000011E6  4EF9 0000133C            206          JMP     OP0101
000011EC  4EF9 0000133C            207          JMP     OP0110
000011F2  4EF9 0000133C            208          JMP     OP0111
000011F8  4EF9 00001378            209          JMP     OP1000 *OR
000011FE  4EF9 0000133C            210          JMP     OP1001 *SUB
00001204  4EF9 000013BC            211          JMP     OP1010
0000120A  4EF9 000013BC            212          JMP     OP1011
00001210  4EF9 000013BC            213          JMP     OP1100 *AND
00001216  4EF9 000013F8            214          JMP     OP1101 *ADD
0000121C  4EF9 00001434            215          JMP     OP1110 *ROR ROL
00001222                           216  
00001222                           217  *=====================================================================    
00001222                           218  *--------------D2 must contain Entire opcode for everything below
00001222                           219  OP0000:
00001222                           220  *-> MOVE.B
00001222                           221  OP0001:
00001222  13FC 0000 00001BA6       222          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
0000122A  43F9 00001B34            223          LEA     MOVEB, A1
00001230  103C 000E                224          MOVE.B  #14, D0
00001234  4E4F                     225          TRAP    #15
00001236  4EB9 000015F0            226          JSR     EA * Find SRC EA
0000123C  6000 0434                227          BRA     DESTEAFINDER * FIND DEST EA
00001240                           228  * -> MOVE.L
00001240                           229  * Printed using MOVEL String as a variable on the very bottom
00001240                           230  OP0010:
00001240  13FC 0002 00001BA6       231          MOVE.B  #%10, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001248  43F9 00001B2F            232          LEA     MOVE_PRINT, A1
0000124E  103C 000E                233          MOVE.B  #14, D0
00001252  4E4F                     234          TRAP    #15
00001254  4EB9 000015BE            235          JSR     CHECK_MOVEA
0000125A  43F9 00001B44            236          LEA     MOVEL, A1
00001260  103C 000E                237          MOVE.B  #14, D0
00001264  4E4F                     238          TRAP    #15
00001266  4EB9 000015F0            239          JSR     EA *Find SRC EA
0000126C  6000 0404                240          BRA     DESTEAFINDER *FIND DEST EA
00001270                           241  * -> MOVE.W
00001270                           242  OP0011:
00001270  43F9 00001B2F            243          LEA     MOVE_PRINT, A1
00001276  103C 000E                244          MOVE.B  #14, D0
0000127A  4E4F                     245          TRAP    #15
0000127C  4EB9 000015BE            246          JSR     CHECK_MOVEA
00001282  43F9 00001B40            247          LEA     MOVEW, A1
00001288  103C 000E                248          MOVE.B  #14, D0
0000128C  4E4F                     249          TRAP    #15
0000128E  4EB9 000015F0            250          JSR     EA * FIND SRC EA
00001294  6000 03DC                251          BRA     DESTEAFINDER *FIND DEST EA
00001298                           252          
00001298                           253  *-> NOT
00001298                           254  OP0100:
00001298  43F9 00001B95            255          LEA     NOT_OP, A1
0000129E  103C 000E                256          MOVE.B  #14, D0
000012A2  4E4F                     257          TRAP    #15
000012A4  E14A                     258          LSL.W   #8, D2
000012A6  3602                     259          MOVE.W  D2, D3 * D3 = SIZE OF INSTRUCTION
000012A8  E04B                     260          LSR.W   #8, D3
000012AA  EC4B                     261          LSR.W   #6, D3
000012AC  3202                     262          MOVE.W  D2, D1 * D1 = EA OPMODE
000012AE  E549                     263          LSL.W   #2, D1
000012B0  E049                     264          LSR.W   #8, D1
000012B2  EA49                     265          LSR.W   #5, D1
000012B4  3002                     266          MOVE.W  D2, D0 * D0 = EA REGISTER
000012B6  EB48                     267          LSL.W   #5, D0
000012B8  E048                     268          LSR.W   #8, D0
000012BA  EA48                     269          LSR.W   #5, D0
000012BC  C6FC 0006                270          MULU    #6, D3 * Multiply for JMPTABLE
000012C0  45F9 000012CA            271          LEA     NOT_JMPTable, A2
000012C6  4EB2 3000                272          JSR     (A2, D3)
000012CA                           273          
000012CA                           274  NOT_JMPTable
000012CA  4EF9 000012E2            275          JMP     NOT_SIZE00
000012D0  4EF9 00001304            276          JMP     NOT_SIZE01
000012D6  4EF9 0000131E            277          JMP     NOT_SIZE10
000012DC  4EF9 00001338            278          JMP     NOT_SIZE11
000012E2                           279  *NOT.B
000012E2                           280  NOT_SIZE00:
000012E2  13FC 0000 00001BA6       281          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012EA  1A00                     282          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
000012EC  43F9 00001B3C            283          LEA     SIZE_B, A1
000012F2  103C 000E                284          MOVE.B  #14, D0
000012F6  4E4F                     285          TRAP    #15
000012F8  1005                     286          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000012FA  4EB9 0000160E            287          JSR     EACHECKER
00001300  6000 FDC4                288          BRA     AddrLoop
00001304                           289  * NOT.W
00001304                           290  NOT_SIZE01: 
00001304  1A00                     291          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001306  43F9 00001B27            292          LEA     SIZE_WORD, A1
0000130C  103C 000E                293          MOVE.B  #14, D0
00001310  4E4F                     294          TRAP    #15
00001312  1005                     295          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001314  4EB9 0000160E            296          JSR     EACHECKER
0000131A  6000 FDAA                297          BRA     AddrLoop
0000131E                           298  * NOT.L
0000131E                           299  NOT_SIZE10:
0000131E  1A00                     300          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001320  43F9 00001B2B            301          LEA     SIZE_LONG, A1
00001326  103C 000E                302          MOVE.B  #14, D0
0000132A  4E4F                     303          TRAP    #15
0000132C  1005                     304          MOVE.B  D5, D0 * RETURN TEMP STORAGE
0000132E  4EB9 0000160E            305          JSR     EACHECKER
00001334  6000 FD90                306          BRA     AddrLoop
00001338                           307  NOT_SIZE11:
00001338  6000 06D4                308          BRA     PRINTINVALIDEA
0000133C                           309  
0000133C                           310              
0000133C                           311  OP0101:
0000133C                           312          
0000133C                           313  OP0110:
0000133C                           314  OP0111:
0000133C                           315          
0000133C                           316  
0000133C                           317  
0000133C                           318  
0000133C                           319  * -> SUB
0000133C                           320  * Splitting Sub into OPMODE and Register value
0000133C                           321  OP1001:
0000133C  43F9 00001B86            322          LEA     SUBTRACT, A1
00001342  103C 000E                323          MOVE.B  #14, D0
00001346  4E4F                     324          TRAP    #15
00001348  E94A                     325          LSL.W   #4, D2
0000134A  3602                     326          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000134C  E04B                     327          LSR.W   #8, D3 * D3 = D register
0000134E  EA4B                     328          LSR.W   #5, D3
00001350  3802                     329          MOVE.W  D2, D4 *D4 = SubOPMODE
00001352  E74C                     330          LSL.W   #3, D4
00001354  E04C                     331          LSR.W   #8, D4
00001356  EA4C                     332          LSR.W   #5, D4
00001358  3202                     333          MOVE.W  D2, D1 * D1 = EA Mode
0000135A  ED49                     334          LSL.W   #6, D1
0000135C  E049                     335          LSR.W   #8, D1
0000135E  EA49                     336          LSR.W   #5, D1
00001360  3002                     337          MOVE.W  D2, D0 * D0 = EA register
00001362  E148                     338          LSL.W   #8, D0
00001364  E348                     339          LSL.W   #1, D0
00001366  E048                     340          LSR.W   #8, D0
00001368  EA48                     341          LSR.W   #5, D0
0000136A  45F9 00001434            342          LEA     SubTable, A2
00001370  C8FC 0006                343          MULU    #6, D4
00001374  4EB2 4000                344          JSR     (A2, D4)
00001378                           345  * -> OR
00001378                           346  * Splitting AND into OPMODE and Register value       
00001378                           347  OP1000:
00001378  43F9 00001B92            348          LEA     OR, A1
0000137E  103C 000E                349          MOVE.B  #14, D0
00001382  4E4F                     350          TRAP    #15
00001384  E94A                     351          LSL.W   #4, D2
00001386  3602                     352          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001388  E04B                     353          LSR.W   #8, D3 * D3 = D register
0000138A  EA4B                     354          LSR.W   #5, D3
0000138C  3802                     355          MOVE.W  D2, D4 *D4 = SubOPMODE
0000138E  E74C                     356          LSL.W   #3, D4
00001390  E04C                     357          LSR.W   #8, D4
00001392  EA4C                     358          LSR.W   #5, D4
00001394  3202                     359          MOVE.W  D2, D1 * D1 = EA Mode
00001396  ED49                     360          LSL.W   #6, D1
00001398  E049                     361          LSR.W   #8, D1
0000139A  EA49                     362          LSR.W   #5, D1
0000139C  B23C 0001                363          CMP.B   #%0001, D1
000013A0  6700 066C                364          BEQ     PRINTINVALIDEA
000013A4  3002                     365          MOVE.W  D2, D0 * D0 = EA register
000013A6  E148                     366          LSL.W   #8, D0
000013A8  E348                     367          LSL.W   #1, D0
000013AA  E048                     368          LSR.W   #8, D0
000013AC  EA48                     369          LSR.W   #5, D0
000013AE  45F9 00001434            370          LEA     SubTable, A2
000013B4  C8FC 0006                371          MULU    #6, D4
000013B8  4EB2 4000                372          JSR     (A2, D4)
000013BC                           373  OP1010
000013BC                           374  OP1011
000013BC                           375  * -> AND
000013BC                           376  * Splitting AND into OPMODE and Register value
000013BC                           377  OP1100
000013BC  43F9 00001B8E            378          LEA     AND, A1
000013C2  103C 000E                379          MOVE.B  #14, D0
000013C6  4E4F                     380          TRAP    #15
000013C8  E94A                     381          LSL.W   #4, D2
000013CA  3602                     382          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000013CC  E04B                     383          LSR.W   #8, D3 * D3 = D register
000013CE  EA4B                     384          LSR.W   #5, D3
000013D0  3802                     385          MOVE.W  D2, D4 *D4 = SubOPMODE
000013D2  E74C                     386          LSL.W   #3, D4
000013D4  E04C                     387          LSR.W   #8, D4
000013D6  EA4C                     388          LSR.W   #5, D4
000013D8  3202                     389          MOVE.W  D2, D1 * D1 = EA Mode
000013DA  ED49                     390          LSL.W   #6, D1
000013DC  E049                     391          LSR.W   #8, D1
000013DE  EA49                     392          LSR.W   #5, D1
000013E0  3002                     393          MOVE.W  D2, D0 * D0 = EA register
000013E2  E148                     394          LSL.W   #8, D0
000013E4  E348                     395          LSL.W   #1, D0
000013E6  E048                     396          LSR.W   #8, D0
000013E8  EA48                     397          LSR.W   #5, D0
000013EA  45F9 00001434            398          LEA     SubTable, A2
000013F0  C8FC 0006                399          MULU    #6, D4
000013F4  4EB2 4000                400          JSR     (A2, D4)
000013F8                           401          
000013F8                           402  * -> ADD
000013F8                           403  * Spltting Add into OPMODE and Register Value
000013F8                           404  OP1101:
000013F8  43F9 00001B8A            405          LEA     ADDITION, A1
000013FE  103C 000E                406          MOVE.B  #14, D0
00001402  4E4F                     407          TRAP    #15
00001404  E94A                     408          LSL.W   #4, D2
00001406  3602                     409          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001408  E04B                     410          LSR.W   #8, D3 * D3 = D register
0000140A  EA4B                     411          LSR.W   #5, D3
0000140C  3802                     412          MOVE.W  D2, D4 *D4 = SubOPMODE
0000140E  E74C                     413          LSL.W   #3, D4
00001410  E04C                     414          LSR.W   #8, D4
00001412  EA4C                     415          LSR.W   #5, D4
00001414  3202                     416          MOVE.W  D2, D1 * D1 = EA Mode
00001416  ED49                     417          LSL.W   #6, D1
00001418  E049                     418          LSR.W   #8, D1
0000141A  EA49                     419          LSR.W   #5, D1
0000141C  3002                     420          MOVE.W  D2, D0 * D0 = EA register
0000141E  E148                     421          LSL.W   #8, D0
00001420  E348                     422          LSL.W   #1, D0
00001422  E048                     423          LSR.W   #8, D0
00001424  EA48                     424          LSR.W   #5, D0
00001426  45F9 00001434            425          LEA     SubTable, A2
0000142C  C8FC 0006                426          MULU    #6, D4
00001430  4EB2 4000                427          JSR     (A2, D4)
00001434                           428  
00001434                           429  *-> ROL, ROR        
00001434                           430  OP1110:
00001434                           431          
00001434                           432          
00001434                           433  * =============================================
00001434                           434  * JMP Table for SUB OPMODES
00001434                           435  SubTable:
00001434  4EF9 00001464            436          JMP     OPMODE000 * BYTE  EA->DN
0000143A  4EF9 0000147E            437          JMP     OPMODE001 * WORD  RA->DN  
00001440  4EF9 00001490            438          JMP     OPMODE010 * LONG  EA->DN 
00001446  4EF9 000014A2            439          JMP     OPMODE011 * ADDA  WORD
0000144C  4EF9 000014D0            440          JMP     OPMODE100 * BYTE  DN->EA
00001452  4EF9 000014E8            441          JMP     OPMODE101 * BYTE  DN->EA
00001458  4EF9 00001500            442          JMP     OPMODE110 * BYTE  DN->EA
0000145E  4EF9 00001518            443          JMP     OPMODE111 * ADDA  LONG
00001464                           444          
00001464                           445  OPMODE000:
00001464  13FC 0000 00001BA6       446          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
0000146C  1A00                     447          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000146E  43F9 00001B23            448          LEA     SIZE_BYTE, A1
00001474  103C 000E                449          MOVE.B  #14, D0
00001478  4E4F                     450          TRAP    #15
0000147A  6000 00DC                451          BRA     Sub_OPMODE_FIRST
0000147E                           452  OPMODE001
0000147E  1A00                     453          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001480  43F9 00001B27            454          LEA     SIZE_Word, A1
00001486  103C 000E                455          MOVE.B  #14, D0
0000148A  4E4F                     456          TRAP    #15
0000148C  6000 00CA                457          BRA     Sub_OPMODE_FIRST
00001490                           458  OPMODE010
00001490  1A00                     459          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001492  43F9 00001B2B            460          LEA     SIZE_Long, A1
00001498  103C 000E                461          MOVE.B  #14, D0
0000149C  4E4F                     462          TRAP    #15
0000149E  6000 00B8                463          BRA     Sub_OPMODE_FIRST
000014A2                           464  *===============================================
000014A2                           465  *Special OPMODE can only be used by ADD
000014A2                           466  OPMODE011
000014A2  0C38 000D 1180           467          CMP.B   #%1101, OpCode
000014A8  6700 0008                468          BEQ     Special_OPMODE_USED
000014AC  4EF9 00001A0E            469          JMP     PRINTINVALIDEA
000014B2                           470  Special_OPMODE_USED:
000014B2  1A00                     471          MOVE.B  D0, D5
000014B4  43F9 00001B48            472          LEA     MOVEA, A1
000014BA  103C 000E                473          MOVE.B  #14, D0
000014BE  4E4F                     474          TRAP    #15
000014C0  43F9 00001B27            475          LEA     SIZE_WORD, A1
000014C6  103C 000E                476          MOVE.B  #14, D0
000014CA  4E4F                     477          TRAP    #15
000014CC  6000 00CE                478          BRA     Sub_OPMODE_ADDA
000014D0                           479  OPMODE100
000014D0  1A00                     480          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014D2  43F9 00001B23            481          LEA     SIZE_BYTE, A1
000014D8  103C 000E                482          MOVE.B  #14, D0
000014DC  4E4F                     483          TRAP    #15
000014DE  4EB9 00001546            484          JSR     Memory_Alterable_Check
000014E4  6000 0090                485          BRA     Sub_OPMODE_SECOND
000014E8                           486  OPMODE101
000014E8  1A00                     487          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000014EA  43F9 00001B27            488          LEA     SIZE_Word, A1
000014F0  103C 000E                489          MOVE.B  #14, D0
000014F4  4E4F                     490          TRAP    #15
000014F6  4EB9 00001546            491          JSR     Memory_Alterable_Check
000014FC  6000 0078                492          BRA     Sub_OPMODE_SECOND
00001500                           493  OPMODE110
00001500  1A00                     494          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001502  43F9 00001B2B            495          LEA     SIZE_LONG, A1
00001508  103C 000E                496          MOVE.B  #14, D0
0000150C  4E4F                     497          TRAP    #15
0000150E  4EB9 00001546            498          JSR     Memory_Alterable_Check
00001514  6000 0060                499          BRA     Sub_OPMODE_SECOND
00001518                           500  OPMODE111:
00001518  0C38 000D 1180           501          CMP.B   #%1101, OpCode
0000151E  6700 0008                502          BEQ     Special_OPMODE_USED2
00001522  4EF9 00001A0E            503          JMP     PRINTINVALIDEA
00001528                           504  Special_OPMODE_USED2:
00001528  1A00                     505          MOVE.B  D0, D5
0000152A  43F9 00001B48            506          LEA     MOVEA, A1
00001530  103C 000E                507          MOVE.B  #14, D0
00001534  4E4F                     508          TRAP    #15
00001536  43F9 00001B2B            509          LEA     SIZE_LONG, A1
0000153C  103C 000E                510          MOVE.B  #14, D0
00001540  4E4F                     511          TRAP    #15
00001542  6000 0058                512          BRA     Sub_OPMODE_ADDA
00001546                           513  *===================================================
00001546                           514  * USED FOR SUB AND OR, check if dest EA is memory Alterable
00001546                           515  
00001546                           516  Memory_Alterable_Check:
00001546  B23C 0000                517          CMP.B   #%000, D1
0000154A  6700 04C2                518          BEQ     PRINTINVALIDEA
0000154E  B23C 0001                519          CMP.B   #%001, D1
00001552  6700 04BA                520          BEQ     PRINTINVALIDEA
00001556  4E75                     521          RTS
00001558                           522          
00001558                           523  *===============================================
00001558                           524  * Used for Dn->EA for SUB
00001558                           525  * Called by 001, 010, 100, 
00001558                           526  Sub_OPMODE_FIRST:
00001558  1005                     527          MOVE.B  D5, D0   * TEMP RETURN D0
0000155A  4EB9 0000160E            528          JSR     EACHECKER 
00001560  4280                     529          CLR.L     D0
00001562  4281                     530          CLR.L     D1
00001564  4EB9 00001A00            531          JSR     PRINTCOMMA
0000156A  1003                     532          MOVE.B  D3, D0
0000156C  4EB9 00001644            533          JSR     DestEAChecker 
00001572  6000 FB52                534          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001576                           535  *===============================================
00001576                           536  * Used for Dn->EA for SUB
00001576                           537  * Called by 100, 101, 110 
00001576                           538  Sub_OPMODE_SECOND:
00001576  1801                     539          MOVE.B  D1, D4   *TEMP STORE D1
00001578  4280                     540          CLR.L     D0  *Clean D0
0000157A  1003                     541          MOVE.B  D3, D0
0000157C  4281                     542          CLR.L     D1
0000157E  4EB9 0000160E            543          JSR     EACHECKER 
00001584  4280                     544          CLR.L     D0
00001586  4281                     545          CLR.L     D1
00001588  4EB9 00001A00            546          JSR     PRINTCOMMA
0000158E  1005                     547          MOVE.B  D5, D0   * TEMP RETURN D0
00001590  1204                     548          MOVE.B  D4, D1   * TEMP RETURN D1
00001592  4EB9 00001644            549          JSR     DestEAChecker 
00001598  6000 FB2C                550          BRA     addrloop *EA FINISHED-----
0000159C                           551  *===============================================
0000159C                           552  * Used for Dn->EA for SUB
0000159C                           553  * Called by 011, 111
0000159C                           554  Sub_OPMODE_ADDA:
0000159C  1005                     555          MOVE.B  D5, D0   * TEMP RETURN D0
0000159E  4EB9 0000160E            556          JSR     EACHECKER 
000015A4  4240                     557          CLR     D0
000015A6  4241                     558          CLR     D1
000015A8  4EB9 00001A00            559          JSR     PRINTCOMMA
000015AE  1003                     560          MOVE.B  D3, D0
000015B0  123C 0001                561          MOVE.B  #%001, D1
000015B4  4EB9 00001644            562          JSR     DestEAChecker 
000015BA  6000 FB0A                563          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
000015BE                           564          
000015BE                           565  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
000015BE                           566  CHECK_MOVEA
000015BE  2602                     567          MOVE.L  D2, D3  * HOlding D2 in D3 temp
000015C0  E18A                     568          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000015C2  E18A                     569          LSL.L   #8, D2
000015C4  E98A                     570          LSL.L   #4, D2
000015C6  E08A                     571          LSR.L   #8, D2
000015C8  E08A                     572          LSR.L   #8, D2
000015CA  E88A                     573          LSR.L   #4, D2 // 12 bits of opperand found
000015CC  EC8A                     574          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
000015CE  1202                     575          MOVE.B  D2, D1 * Prepare D1 for Mode
000015D0  EB09                     576          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000015D2  EA09                     577          LSR.B   #5, D1
000015D4  B23C 0001                578          CMP.B   #%001, D1
000015D8  6700 0006                579          BEQ     PRINTA
000015DC  2403                     580          MOVE.L  D3, D2 
000015DE  4E75                     581          RTS * Goes back to OP Value
000015E0                           582          
000015E0                           583  PRINTA
000015E0  43F9 00001B48            584          LEA     MOVEA, A1
000015E6  103C 000E                585          MOVE.B  #14, D0
000015EA  4E4F                     586          TRAP    #15
000015EC  2403                     587          MOVE.L  D3, D2
000015EE  4E75                     588          RTS * Goes back to CHECK_MOVEA
000015F0                           589          
000015F0                           590          
000015F0                           591  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
000015F0                           592  *=================================================================
000015F0                           593  *-----------EA-- Calculate EA used for Data Registers
000015F0                           594  *----------Pre: D2, D0, D1 must be clear
000015F0                           595  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
000015F0                           596  EA:
000015F0  4280                     597          CLR.L     D0  * Clear D0 and D1 so they don't conflict
000015F2  4281                     598          CLR.L     D1
000015F4  4283                     599          CLR.L     D3
000015F6  E18A                     600          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000015F8  E18A                     601          LSL.L   #8, D2
000015FA  E98A                     602          LSL.L   #4, D2
000015FC  E08A                     603          LSR.L   #8, D2
000015FE  E08A                     604          LSR.L   #8, D2
00001600  E88A                     605          LSR.L   #4, D2 // 12 bits of opperand found
00001602  1002                     606          MOVE.B  D2, D0 Source Data Register
00001604  EB08                     607          LSL.B   #5, D0
00001606  EA08                     608          LSR.B   #5, D0
00001608  1202                     609          MOVE.B  D2, D1 *Source Data Mode
0000160A  E509                     610          LSL.B   #2, D1
0000160C  EA09                     611          LSR.B   #5, D1
0000160E                           612          
0000160E                           613  *=================================================
0000160E                           614  *-----------EA CHECKER------Continues from EA
0000160E                           615  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
0000160E                           616  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
0000160E                           617  EACHECKER: 
0000160E  B23C 0000                618          CMP.B   #%0000, D1
00001612  6700 007E                619          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001616  B23C 0001                620          CMP.B   #%0001, D1
0000161A  6700 0096                621          BEQ     JMPTO_SRC_ADDR_REG
0000161E  B23C 0002                622          CMP.B   #%0010, D1
00001622  6700 00AE                623          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001626  B23C 0003                624          CMP.B   #%0011, D1
0000162A  6700 00A6                625          BEQ     JMPTO_SRC_INDR_ADDR_REG
0000162E  B23C 0004                626          CMP.B   #%0100, D1
00001632  6700 009E                627          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001636  B23C 0007                628          CMP.B   #%0111, D1
0000163A  6700 0196                629          BEQ     JMPTO_SRC_IMMEDIATE
0000163E  4EF9 00001A0E            630          JMP     PRINTINVALIDEA
00001644                           631          
00001644                           632  *=================================================
00001644                           633  *-----------DEST EA CHECKER------Continues from EA
00001644                           634  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001644                           635  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
00001644                           636  DESTEACHECKER:
00001644  B23C 0000                637          CMP.B   #%0000, D1
00001648  6700 0058                638          BEQ     JMPTODestREG *JUMPS TO Source D registers
0000164C  B23C 0001                639          CMP.B   #%0001, D1
00001650  6700 0070                640          BEQ     JMPTO_DEST_ADDR_REG
00001654  B23C 0002                641          CMP.B   #%0010, D1
00001658  6700 00B4                642          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000165C  B23C 0003                643          CMP.B   #%0011, D1
00001660  6700 00AC                644          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001664  B23C 0004                645          CMP.B   #%0100, D1
00001668  6700 00A4                646          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000166C  4EF9 00001A0E            647          JMP     PRINTINVALIDEA
00001672                           648          
00001672                           649  *=================================================      
00001672                           650  * Dest EA Finder
00001672                           651  * PRE: ONLY USED FOR MOVE
00001672                           652  * POST: PRINTS DEST EA  
00001672                           653  DestEAFinder:
00001672  4EB9 00001A00            654          JSR     PRINTCOMMA  * Prints comma between two operrands
00001678  EC8A                     655          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
0000167A  4241                     656          CLR     D1     * Clear D1 and D0 for opperand mode and register
0000167C  4240                     657          CLR     D0
0000167E  1202                     658          MOVE.B  D2, D1 * Prepare D1 for Mode
00001680  EB09                     659          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001682  EA09                     660          LSR.B   #5, D1
00001684  1002                     661          MOVE.B  D2, D0  *Prepare D0 for Register
00001686  E508                     662          LSL.B   #2, D0
00001688  EA08                     663          LSR.B   #5, D0
0000168A  4EB8 1644                664          JSR     DESTEACHECKER
0000168E  4EF8 10C6                665          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00001692                           666  
00001692                           667          
00001692                           668  *===================================================
00001692                           669  *-------------Data Register checker------------------        
00001692                           670  JMPTOSRCREG:
00001692  43F9 000018B4            671          LEA     DATAREGTABLE, A1
00001698  C0FC 0006                672          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000169C  4EB1 0000                673          JSR     (A1, D0) *JMP To index A1 + D0
000016A0                           674          * EA CONTINUES HERE
000016A0  4E75                     675          RTS * BRA DESTEAFINDER DELETED
000016A2                           676  JMPToDestReg: *PRINT OUT DEST Registers
000016A2  43F9 000018B4            677          LEA     DATAREGTABLE, A1
000016A8  C0FC 0006                678          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000016AC  4EB1 0000                679          JSR     (A1, D0) *JMP to A1 + D0
000016B0  4E75                     680          RTS    * Goes Back to DestEAFinder
000016B2                           681          
000016B2                           682  
000016B2                           683  *===================================================
000016B2                           684  *-------------Address Register checker------------------             
000016B2                           685  JMPTO_SRC_ADDR_REG:
000016B2  43F9 000018E4            686          LEA     AddrREGTABLE, A1
000016B8  C0FC 0006                687          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000016BC  4EB1 0000                688          JSR     (A1, D0) *JMP To index A1 + D0
000016C0                           689          * EA CONTINUES HERE
000016C0  4E75                     690          RTS * BRA DESTEAFINDER DELETED
000016C2                           691  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
000016C2  43F9 000018E4            692          LEA     AddrREGTABLE, A1
000016C8  C0FC 0006                693          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000016CC  4EB1 0000                694          JSR     (A1, D0) *JMP to A1 + D0
000016D0  4E75                     695          RTS     * Goes Back to DESTEAFinder
000016D2                           696          
000016D2                           697  *===================================================
000016D2                           698  *-------------Indirect Address Register checker------------------
000016D2                           699  *Copied from Address Register checker, basically adding parenthesis () around Address register
000016D2                           700  * Also Detects ()+ and -()
000016D2                           701  * PRE: D1 stores mode, D0 stores register #
000016D2                           702  * D1 to D5 are off limits
000016D2                           703  JMPTO_SRC_INDR_ADDR_REG:
000016D2  1A00                     704         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
000016D4  B23C 0004                705         CMP.B    #%100, D1       * IF IT IS -()
000016D8  6700 007E                706         BEQ      PRE_DECREMENT_SRC
000016DC  43F9 00001B7A            707         LEA      INDR_LEFT, A1
000016E2  103C 000E                708         MOVE.B   #14, D0
000016E6  4E4F                     709         TRAP     #15
000016E8  1005                     710         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000016EA  43F9 000018E4            711         LEA     AddrREGTABLE, A1
000016F0  C0FC 0006                712         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000016F4  4EB1 0000                713         JSR     (A1, D0) *JMP To index A1 + D0
000016F8  43F9 00001B7C            714         LEA      INDR_RIGHT, A1
000016FE  103C 000E                715         MOVE.B   #14, D0
00001702  4E4F                     716         TRAP     #15
00001704  B23C 0003                717         CMP.B    #%0011, D1 * IF IT IS ()+
00001708  6700 0040                718         BEQ      POST_INCREMENT_SRC
0000170C  4E75                     719         RTS * BRA DESTEAFINDER DELETED
0000170E                           720         
0000170E                           721  JMPTO_DEST_INDR_ADDR_REG:
0000170E  1600                     722         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
00001710  B23C 0004                723         CMP.B    #%100, D1
00001714  6700 0086                724         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00001718  43F9 00001B7A            725         LEA      INDR_LEFT, A1
0000171E  103C 000E                726         MOVE.B   #14, D0
00001722  4E4F                     727         TRAP     #15
00001724  1003                     728         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001726  43F9 000018E4            729         LEA     AddrREGTABLE, A1
0000172C  C0FC 0006                730         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001730  4EB1 0000                731         JSR     (A1, D0) *JMP To index A1 + D0
00001734  43F9 00001B7C            732         LEA      INDR_RIGHT, A1
0000173A  103C 000E                733         MOVE.B   #14, D0
0000173E  4E4F                     734         TRAP     #15
00001740  B23C 0003                735         CMP.B    #%0011, D1  // IF IT IS ()+
00001744  6700 0048                736         BEQ      POST_INCREMENT_DEST
00001748  4E75                     737         RTS      * Goes Back to DestEAFinder
0000174A                           738         
0000174A                           739  POST_INCREMENT_SRC:
0000174A  43F9 00001B7E            740         LEA      POST_INCRE, A1
00001750  103C 000E                741         MOVE.B   #14, D0
00001754  4E4F                     742         TRAP     #15
00001756  4E75                     743         RTS * BRA DESTEAFINDER DELETED
00001758                           744         
00001758                           745  PRE_DECREMENT_SRC:
00001758  43F9 00001B80            746         LEA      PRE_DECRE, A1
0000175E  103C 000E                747         MOVE.B   #14, D0
00001762  4E4F                     748         TRAP     #15
00001764  43F9 00001B7A            749         LEA      INDR_LEFT, A1
0000176A  103C 000E                750         MOVE.B   #14, D0
0000176E  4E4F                     751         TRAP     #15
00001770  1005                     752         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001772  43F9 000018E4            753         LEA     AddrREGTABLE, A1
00001778  C0FC 0006                754         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000177C  4EB1 0000                755         JSR     (A1, D0) *JMP To index A1 + D0
00001780  43F9 00001B7C            756         LEA      INDR_RIGHT, A1
00001786  103C 000E                757         MOVE.B   #14, D0
0000178A  4E4F                     758         TRAP     #15
0000178C  4E75                     759         RTS * BRA DESTEAFINDER DELETED
0000178E                           760  
0000178E                           761  POST_INCREMENT_DEST
0000178E  43F9 00001B7E            762         LEA      POST_INCRE, A1
00001794  103C 000E                763         MOVE.B   #14, D0
00001798  4E4F                     764         TRAP     #15
0000179A  4E75                     765         RTS      * Goes Back to DestEAFinder
0000179C                           766         
0000179C                           767  PRE_DECREMENT_DEST:
0000179C  43F9 00001B80            768         LEA      PRE_DECRE, A1
000017A2  103C 000E                769         MOVE.B   #14, D0
000017A6  4E4F                     770         TRAP     #15
000017A8  43F9 00001B7A            771         LEA      INDR_LEFT, A1
000017AE  103C 000E                772         MOVE.B   #14, D0
000017B2  4E4F                     773         TRAP     #15
000017B4  1005                     774         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000017B6  43F9 000018E4            775         LEA     AddrREGTABLE, A1
000017BC  C0FC 0006                776         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000017C0  4EB1 0000                777         JSR     (A1, D0) *JMP To index A1 + D0
000017C4  43F9 00001B7C            778         LEA      INDR_RIGHT, A1
000017CA  103C 000E                779         MOVE.B   #14, D0
000017CE  4E4F                     780         TRAP     #15
000017D0  4E75                     781         RTS      * Goes Back to DestEAFinder
000017D2                           782         
000017D2                           783  JMPTO_SRC_IMMEDIATE:
000017D2  B03C 0000                784         CMP.B    #%000, D0
000017D6  6700 002E                785         BEQ      Address_W
000017DA  B03C 0001                786         CMP.B    #%001, D0
000017DE  6700 0044                787         BEQ      Address_L
000017E2  B03C 0004                788         CMP.B    #%100, D0
000017E6  6700 005A                789         BEQ      Address_Immediate
000017EA  4EF9 00001A0E            790         JMP      PRINTINVALIDEA
000017F0                           791  *===================================  
000017F0                           792  * Same as SRC but without Immediate address     
000017F0                           793  JMPTO_DEST_IMMEDIATE:
000017F0  B03C 0000                794         CMP.B    #%000, D0
000017F4  6700 0010                795         BEQ      Address_W
000017F8  B03C 0001                796         CMP.B    #%001, D0
000017FC  6700 0026                797         BEQ      Address_L
00001800  4EF9 00001A0E            798         JMP      PRINTINVALIDEA
00001806                           799         
00001806                           800  Address_W:
00001806  43F9 00001B82            801          LEA     DOLLAR_SIGN, A1
0000180C  103C 000E                802          MOVE.B  #14, D0
00001810  4E4F                     803          TRAP    #15
00001812  4241                     804          CLR     D1
00001814  4240                     805          CLR     D0
00001816  321E                     806          MOVE.W  (A6)+, D1
00001818  143C 0010                807          MOVE.B  #16, D2
0000181C  103C 000F                808          MOVE.B  #15, D0
00001820  4E4F                     809          TRAP    #15 
00001822  4E75                     810          RTS 
00001824                           811  
00001824                           812  Address_L
00001824  43F9 00001B82            813          LEA     DOLLAR_SIGN, A1
0000182A  103C 000E                814          MOVE.B  #14, D0
0000182E  4E4F                     815          TRAP    #15
00001830  4241                     816          CLR     D1
00001832  4240                     817          CLR     D0
00001834  221E                     818          MOVE.L  (A6)+, D1
00001836  143C 0010                819          MOVE.B  #16, D2
0000183A  103C 000F                820          MOVE.B  #15, D0
0000183E  4E4F                     821          TRAP    #15
00001840  4E75                     822          RTS  
00001842                           823          
00001842                           824  Address_Immediate:
00001842  43F9 00001B84            825          LEA     POUND_SIGN, A1
00001848  103C 000E                826          MOVE.B  #14, D0
0000184C  4E4F                     827          TRAP    #15
0000184E  43F9 00001B82            828          LEA     DOLLAR_SIGN, A1
00001854  103C 000E                829          MOVE.B  #14, D0
00001858  4E4F                     830          TRAP    #15
0000185A  0C39 0001 00001BA6       831          CMP.B   #%01, OpCodeSize *01 is used to mark invalid immediate for example ROR, ROL
00001862  6700 01AA                832          BEQ     PRINTINVALIDEA
00001866  0C39 0000 00001BA6       833          CMP.B   #%00, OpCodeSize
0000186E  6700 001A                834          BEQ     Immediate_B
00001872  0C39 0003 00001BA6       835          CMP.B   #%11, OpCodeSize
0000187A  6700 001C                836          BEQ     Immediate_W
0000187E  0C39 0002 00001BA6       837          CMP.B   #%10, OpCOdeSize
00001886  6700 001E                838          BEQ     Immediate_L
0000188A                           839          
0000188A                           840  Immediate_B:
0000188A  121E                     841          MOVE.B  (A6)+, D1
0000188C  143C 0010                842          MOVE.B  #16, D2
00001890  103C 000F                843          MOVE.B  #15, D0
00001894  4E4F                     844          TRAP    #15
00001896  4E75                     845          RTS
00001898                           846          
00001898                           847  Immediate_W:
00001898  321E                     848          MOVE.W  (A6)+, D1
0000189A  143C 0010                849          MOVE.B  #16, D2
0000189E  103C 000F                850          MOVE.B  #15, D0
000018A2  4E4F                     851          TRAP    #15
000018A4  4E75                     852          RTS
000018A6                           853          
000018A6                           854  Immediate_L:
000018A6  221E                     855          MOVE.L  (A6)+, D1
000018A8  143C 0010                856          MOVE.B  #16, D2
000018AC  103C 000F                857          MOVE.B  #15, D0
000018B0  4E4F                     858          TRAP    #15
000018B2  4E75                     859          RTS
000018B4                           860  
000018B4                           861          
000018B4                           862  
000018B4                           863  *=================================================================
000018B4                           864  *---------Data Register Table used for printing out Registers----
000018B4                           865  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
000018B4                           866  DataRegTable
000018B4  4EF9 00001914            867          JMP REG_D0
000018BA  4EF9 00001928            868          JMP REG_D1
000018C0  4EF9 00001936            869          JMP REG_D2
000018C6  4EF9 00001944            870          JMP REG_D3
000018CC  4EF9 00001952            871          JMP REG_D4
000018D2  4EF9 00001960            872          JMP REG_D5
000018D8  4EF9 0000196E            873          JMP REG_D6
000018DE  4EF9 0000197C            874          JMP REG_D7
000018E4                           875  
000018E4                           876  AddrRegTable:
000018E4                           877          
000018E4  4EF9 0000198A            878          JMP REG_A0
000018EA  4EF9 0000199E            879          JMP REG_A1
000018F0  4EF9 000019AC            880          JMP REG_A2
000018F6  4EF9 000019BA            881          JMP REG_A3
000018FC  4EF9 000019C8            882          JMP REG_A4
00001902  4EF9 000019D6            883          JMP REG_A5
00001908  4EF9 000019E4            884          JMP REG_A6
0000190E  4EF9 000019F2            885          JMP REG_A7
00001914                           886  
00001914                           887  * Data Registers Printing        
00001914                           888  REG_D0:
00001914  227C 00000000            889          MOVEA.L #$0, A1
0000191A  43F9 00001B4A            890          LEA     DREG0, A1
00001920  103C 000E                891          MOVE.B  #14, D0
00001924  4E4F                     892          TRAP    #15
00001926  4E75                     893          RTS
00001928                           894          
00001928                           895  REG_D1:
00001928  43F9 00001B4D            896          LEA     DREG1, A1
0000192E  103C 000E                897          MOVE.B  #14, D0
00001932  4E4F                     898          TRAP    #15
00001934  4E75                     899          RTS
00001936                           900  REG_D2:
00001936  43F9 00001B50            901          LEA     DREG2, A1
0000193C  103C 000E                902          MOVE.B  #14, D0
00001940  4E4F                     903          TRAP    #15
00001942  4E75                     904          RTS
00001944                           905  REG_D3:
00001944  43F9 00001B53            906          LEA     DREG3, A1
0000194A  103C 000E                907          MOVE.B  #14, D0
0000194E  4E4F                     908          TRAP    #15
00001950  4E75                     909          RTS
00001952                           910  REG_D4:
00001952  43F9 00001B56            911          LEA     DREG4, A1
00001958  103C 000E                912          MOVE.B  #14, D0
0000195C  4E4F                     913          TRAP    #15
0000195E  4E75                     914          RTS
00001960                           915  REG_D5:
00001960  43F9 00001B59            916          LEA     DREG5, A1
00001966  103C 000E                917          MOVE.B  #14, D0
0000196A  4E4F                     918          TRAP    #15
0000196C  4E75                     919          RTS
0000196E                           920  REG_D6:
0000196E  43F9 00001B5C            921          LEA     DREG6, A1
00001974  103C 000E                922          MOVE.B  #14, D0
00001978  4E4F                     923          TRAP    #15
0000197A  4E75                     924          RTS
0000197C                           925  REG_D7:
0000197C  43F9 00001B5F            926          LEA     DREG7, A1
00001982  103C 000E                927          MOVE.B  #14, D0
00001986  4E4F                     928          TRAP    #15
00001988  4E75                     929          RTS
0000198A                           930          
0000198A                           931  *--------------------Addr Reigster printing ------------------------*        
0000198A                           932  REG_A0:
0000198A  227C 00000000            933          MOVEA.L #$0, A1
00001990  43F9 00001B62            934          LEA     AREG0, A1
00001996  103C 000E                935          MOVE.B  #14, D0
0000199A  4E4F                     936          TRAP    #15
0000199C  4E75                     937          RTS
0000199E                           938          
0000199E                           939  REG_A1:
0000199E  43F9 00001B65            940          LEA     AREG1, A1
000019A4  103C 000E                941          MOVE.B  #14, D0
000019A8  4E4F                     942          TRAP    #15
000019AA  4E75                     943          RTS
000019AC                           944  REG_A2:
000019AC  43F9 00001B68            945          LEA     AREG2, A1
000019B2  103C 000E                946          MOVE.B  #14, D0
000019B6  4E4F                     947          TRAP    #15
000019B8  4E75                     948          RTS
000019BA                           949  REG_A3:
000019BA  43F9 00001B6B            950          LEA     AREG3, A1
000019C0  103C 000E                951          MOVE.B  #14, D0
000019C4  4E4F                     952          TRAP    #15
000019C6  4E75                     953          RTS
000019C8                           954  REG_A4:
000019C8  43F9 00001B6E            955          LEA     AREG4, A1
000019CE  103C 000E                956          MOVE.B  #14, D0
000019D2  4E4F                     957          TRAP    #15
000019D4  4E75                     958          RTS
000019D6                           959  REG_A5:
000019D6  43F9 00001B71            960          LEA     AREG5, A1
000019DC  103C 000E                961          MOVE.B  #14, D0
000019E0  4E4F                     962          TRAP    #15
000019E2  4E75                     963          RTS
000019E4                           964  REG_A6:
000019E4  43F9 00001B74            965          LEA     AREG6, A1
000019EA  103C 000E                966          MOVE.B  #14, D0
000019EE  4E4F                     967          TRAP    #15
000019F0  4E75                     968          RTS
000019F2                           969  REG_A7:
000019F2  43F9 00001B77            970          LEA     AREG7, A1
000019F8  103C 000E                971          MOVE.B  #14, D0
000019FC  4E4F                     972          TRAP    #15
000019FE  4E75                     973          RTS
00001A00                           974          
00001A00                           975  *====================================================PRinting/ ERROR method comes down here=========================================
00001A00                           976  PRINTCOMMA: * Prints comma between two operrands
00001A00  43F9 00001B1C            977          LEA     COMMA, A1
00001A06  103C 000E                978          MOVE.B  #14, D0
00001A0A  4E4F                     979          TRAP    #15
00001A0C  4E75                     980          RTS
00001A0E                           981          
00001A0E                           982  PrintInvalidEA:
00001A0E  43F9 00001A90            983          LEA     Invalid_EA_Addr, A1
00001A14  103C 000E                984          MOVE.B  #14, D0
00001A18  4E4F                     985          TRAP    #15
00001A1A  4EF8 10C6                986          JMP     AddrLoop
00001A1E                           987          
00001A1E                           988  PrintInvalidSUB:
00001A1E  43F9 00001AA6            989          LEA     Invalid_EA_SUB, A1
00001A24  103C 000E                990          MOVE.B  #14, D0
00001A28  4E4F                     991          TRAP    #15
00001A2A  4EF8 10C6                992          JMP     AddrLoop
00001A2E                           993          
00001A2E                           994  PrintInvalidAddress:
00001A2E  43F9 00001AC4            995          LEA     Invalid_Address, A1
00001A34  103C 000E                996          MOVE.B  #14, D0
00001A38  4E4F                     997          TRAP    #15
00001A3A  4EF8 10C6                998          JMP     AddrLoop
00001A3E                           999          
00001A3E                          1000           
00001A3E                          1001  * Clear all registers    
00001A3E                          1002  CLRREG:
00001A3E  4280                    1003      CLR.L D0
00001A40  4281                    1004      CLR.L D1
00001A42  4282                    1005      CLR.L D2
00001A44  4283                    1006      CLR.L D3
00001A46  4284                    1007      CLR.L D4
00001A48  4285                    1008      CLR.L D5
00001A4A  4286                    1009      CLR.L D6
00001A4C  4E75                    1010      RTS
00001A4E                          1011      
00001A4E                          1012      
00001A4E                          1013          
00001A4E                          1014  * Put program code here
00001A4E                          1015  
00001A4E  FFFF FFFF               1016      SIMHALT             ; halt simulator
00001A52                          1017  
00001A52                          1018  * Put variables and constants here
00001A52  =0000000D               1019  CR  EQU $0D
00001A52  =0000000A               1020  LF  EQU $0A
00001A52= 50 6C 65 61 73 65 ...   1021  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
00001A72= 50 6C 65 61 73 65 ...   1022  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
00001A90= 49 6E 76 61 6C 69 ...   1023  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
00001AA6= 49 6E 76 61 6C 69 ...   1024  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00001AC4= 47 69 76 65 6E 20 ...   1025  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00001ADF= 43 6F 6E 74 69 6E ...   1026  Continue_Program    DC.B    'Continue Program? Y/N', CR, LF, 0
00001AF7= 0D 0A 00                1027  Print_NextLine  DC.B    '', CR, LF, 0
00001AFA= 54 68 61 6E 6B 20 ...   1028  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
00001B1C                          1029  
00001B1C= 2C 20 00                1030  COMMA       DC.B    ', ', 0
00001B1F= 20 20 20 00             1031  SPACER      DC.B    '   ', 0
00001B23                          1032  *DATASIZE
00001B23= 2E 42 20 00             1033  SIZE_BYTE       DC.B    '.B ', 0
00001B27= 2E 57 20 00             1034  SIZE_WORD       DC.B    '.W ', 0
00001B2B= 2E 4C 20 00             1035  SIZE_LONG       DC.B    '.L ', 0
00001B2F                          1036  
00001B2F                          1037  *MOVE OPCODES
00001B2F= 4D 4F 56 45 00          1038  MOVE_PRINT  DC.B    'MOVE', 0
00001B34= 4D 4F 56 45 2E 42 ...   1039  MOVEB       DC.B    'MOVE.B ', 0
00001B3C= 2E 42 20 00             1040  SIZE_B       DC.B    '.B ', 0
00001B40= 2E 57 20 00             1041  MOVEW       DC.B    '.W ', 0
00001B44= 2E 4C 20 00             1042  MOVEL       DC.B    '.L ', 0
00001B48= 41 00                   1043  MOVEA       DC.B    'A', 0
00001B4A                          1044  
00001B4A                          1045  
00001B4A                          1046  *DATA REGISTERS PRINTOUT
00001B4A= 44 30 00                1047  DREG0       DC.B    'D0', 0
00001B4D= 44 31 00                1048  DREG1       DC.B    'D1', 0
00001B50= 44 32 00                1049  DREG2       DC.B    'D2', 0
00001B53= 44 33 00                1050  DREG3       DC.B    'D3', 0
00001B56= 44 34 00                1051  DREG4       DC.B    'D4', 0
00001B59= 44 35 00                1052  DREG5       DC.B    'D5', 0
00001B5C= 44 36 00                1053  DREG6       DC.B    'D6', 0
00001B5F= 44 37 00                1054  DREG7       DC.B    'D7', 0 
00001B62                          1055  
00001B62                          1056  *ADDR REGISTERS PRINTOUT
00001B62= 41 30 00                1057  AREG0       DC.B    'A0', 0
00001B65= 41 31 00                1058  AREG1       DC.B    'A1', 0
00001B68= 41 32 00                1059  AREG2       DC.B    'A2', 0
00001B6B= 41 33 00                1060  AREG3       DC.B    'A3', 0
00001B6E= 41 34 00                1061  AREG4       DC.B    'A4', 0
00001B71= 41 35 00                1062  AREG5       DC.B    'A5', 0
00001B74= 41 36 00                1063  AREG6       DC.B    'A6', 0
00001B77= 41 37 00                1064  AREG7       DC.B    'A7', 0 
00001B7A                          1065  
00001B7A                          1066  *INDR_ADDR REGISTERS PRINTOUT
00001B7A= 28 00                   1067  INDR_LEFT   DC.B    '(', 0
00001B7C= 29 00                   1068  INDR_RIGHT  DC.B    ')', 0
00001B7E= 2B 00                   1069  POST_INCRE   DC.B    '+', 0
00001B80= 2D 00                   1070  PRE_DECRE   DC.B    '-', 0
00001B82= 24 00                   1071  DOLLAR_SIGN DC.B    '$', 0
00001B84= 23 00                   1072  POUND_SIGN  DC.B    '#', 0
00001B86                          1073  
00001B86                          1074  *SUB
00001B86= 53 55 42 00             1075  SUBTRACT    DC.B    'SUB', 0
00001B8A= 41 44 44 00             1076  ADDITION    DC.B    'ADD', 0
00001B8E= 41 4E 44 00             1077  AND         DC.B    'AND', 0
00001B92= 4F 52 00                1078  OR          DC.B    'OR', 0
00001B95= 4E 4F 54 00             1079  NOT_OP      DC.B    'NOT', 0
00001B99                          1080  
00001B9A= 00000001                1081  addrStart   DC.L    1   // Starting address
00001B9E= 00000001                1082  addrEnd     DC.L    1   // ending address
00001BA2= 00000001                1083  OpCodeStorage DC.L    1
00001BA6= 00000001                1084  OpCodeSize  DC.L    1
00001BAA                          1085      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   115C
ADDITION            1B8A
ADDREND             1B9E
ADDRESS_IMMEDIATE   1842
ADDRESS_L           1824
ADDRESS_W           1806
ADDRLOOP            10C6
ADDRREGTABLE        18E4
ADDRSTART           1B9A
ADDVAL              1156
AND                 1B8E
AREG0               1B62
AREG1               1B65
AREG2               1B68
AREG3               1B6B
AREG4               1B6E
AREG5               1B71
AREG6               1B74
AREG7               1B77
B                   1162
C                   1168
CHAR                1126
CHECKRANGE          1076
CHECK_CONT          10E0
CHECK_MOVEA         15BE
CLRREG              1A3E
COMMA               1B1C
CONTINUE_PROGRAM    1ADF
CONVERT             110C
CR                  D
D                   116E
DATAREGTABLE        18B4
DESTEACHECKER       1644
DESTEAFINDER        1672
DOLLAR_SIGN         1B82
DREG0               1B4A
DREG1               1B4D
DREG2               1B50
DREG3               1B53
DREG4               1B56
DREG5               1B59
DREG6               1B5C
DREG7               1B5F
E                   1174
EA                  15F0
EACHECKER           160E
END                 10B4
F                   117A
GETINPUT            1006
IMMEDIATE_B         188A
IMMEDIATE_L         18A6
IMMEDIATE_W         1898
INDR_LEFT           1B7A
INDR_RIGHT          1B7C
INVALID_ADDRESS     1AC4
INVALID_EA_ADDR     1A90
INVALID_EA_SUB      1AA6
JMPTABLE            11C8
JMPTODESTREG        16A2
JMPTOSRCREG         1692
JMPTO_DEST_ADDR_REG  16C2
JMPTO_DEST_IMMEDIATE  17F0
JMPTO_DEST_INDR_ADDR_REG  170E
JMPTO_SRC_ADDR_REG  16B2
JMPTO_SRC_IMMEDIATE  17D2
JMPTO_SRC_INDR_ADDR_REG  16D2
LF                  A
LOOP                1102
LOWERLIMIT          3000
MEMORY_ALTERABLE_CHECK  1546
MOVEA               1B48
MOVEB               1B34
MOVEL               1B44
MOVEW               1B40
MOVE_PRINT          1B2F
NOT_JMPTABLE        12CA
NOT_OP              1B95
NOT_SIZE00          12E2
NOT_SIZE01          1304
NOT_SIZE10          131E
NOT_SIZE11          1338
OP0000              1222
OP0001              1222
OP0010              1240
OP0011              1270
OP0100              1298
OP0101              133C
OP0110              133C
OP0111              133C
OP1000              1378
OP1001              133C
OP1010              13BC
OP1011              13BC
OP1100              13BC
OP1101              13F8
OP1110              1434
OPCODE              1180
OPCODESIZE          1BA6
OPCODESTORAGE       1BA2
OPMODE000           1464
OPMODE001           147E
OPMODE010           1490
OPMODE011           14A2
OPMODE100           14D0
OPMODE101           14E8
OPMODE110           1500
OPMODE111           1518
OR                  1B92
POST_INCRE          1B7E
POST_INCREMENT_DEST  178E
POST_INCREMENT_SRC  174A
POUND_SIGN          1B84
PRE_DECRE           1B80
PRE_DECREMENT_DEST  179C
PRE_DECREMENT_SRC   1758
PRINTA              15E0
PRINTCOMMA          1A00
PRINTINVALIDADDRESS  1A2E
PRINTINVALIDEA      1A0E
PRINTINVALIDSUB     1A1E
PRINT_NEXTLINE      1AF7
REG_A0              198A
REG_A1              199E
REG_A2              19AC
REG_A3              19BA
REG_A4              19C8
REG_A5              19D6
REG_A6              19E4
REG_A7              19F2
REG_D0              1914
REG_D1              1928
REG_D2              1936
REG_D3              1944
REG_D4              1952
REG_D5              1960
REG_D6              196E
REG_D7              197C
SIZE_B              1B3C
SIZE_BYTE           1B23
SIZE_LONG           1B2B
SIZE_WORD           1B27
SPACER              1B1F
SPECIAL_OPMODE_USED  14B2
SPECIAL_OPMODE_USED2  1528
START               1000
SUBTABLE            1434
SUBTRACT            1B86
SUB_OPMODE_ADDA     159C
SUB_OPMODE_FIRST    1558
SUB_OPMODE_SECOND   1576
TESTER              9000
TY_MESSAGE          1AFA
UPPERLIMIT          FFFFFE
WELCOME             1A52
WELCOME2            1A72
YESNOSTORAGE        50
