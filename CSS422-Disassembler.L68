00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/11/2020 2:58:41 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00005000                            12      ORG     $5000
00005000                            13  SPECIALTEST:
00005000  D401                      14          ADD.B     D1,D2
00005002  D311                      15      ADD.B     D1,(A1)
00005004                            16  
00006000                            17      ORG    $6000
00006000                            18  ROLTEST:
00006000                            19  
00006000                            20  
00006000                            21  
00006000                            22  
00006000                            23  
00009000                            24      ORG    $9000
00009000                            25  TESTER:
00009000  4611                      26          NOT.B       (A1)
00009002  4659                      27          NOT.W       (A1)+
00009004  4693                      28          NOT.L       (A3)
00009006  1200                      29          MOVE.B    D0,D1
00009008  1200                      30          MOVE.B    D0,D1
0000900A                            31  
0000900A                            32    
0000900A                            33  
00001000                            34      ORG    $1000
00001000                            35  *=================================================================
00001000                            36  *                     THIS IS OUR MAIN METHOD
00001000                            37  *               Don't throw random stuff in it, keep it to a minimum
00001000                            38  
00001000                            39  START:                  ; first instruction of program
00001000  4EB9 00001006             40          JSR     GETINPUT
00001006                            41  *=================================================================
00001006                            42  *---------------Get starting and ending addresss------- Kelvin
00001006                            43  *--------------- PRE: will be using D0, D5, A1
00001006                            44  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            45  GETINPUT:
00001006  4EB9 00001C64             46          JSR     CLRREG    *clean registers to restart program
0000100C  4EB9 00001C76             47          JSR     CLRAREG
00001012  23FC 00000000 00001E1A    48          MOVE.L  #0, ScreenCounter * initalize screenCounter
0000101C  43F9 00001CA0             49          LEA     WELCOME, A1
00001022  103C 000E                 50          MOVE.B  #14,    D0
00001026  4E4F                      51          TRAP    #15
00001028  327C 0000                 52          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000102C  103C 0002                 53          MOVE.B  #2,D0
00001030  4E4F                      54          TRAP    #15
00001032  2801                      55          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001034  7000                      56          MOVE.L  #$0, d0  // intitiate counter
00001036  4EB9 00001188             57          JSR     LOOP    // Convert starting address into hex
0000103C  23C5 00001E0E             58          MOVE.L  D5, addrStart
00001042  43F9 00001CC0             59          LEA     WELCOME2, A1
00001048  103C 000E                 60          MOVE.B  #14,    D0
0000104C  4E4F                      61          TRAP    #15
0000104E  327C 0000                 62          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001052  103C 0002                 63          MOVE.B  #2,D0
00001056  4E4F                      64          TRAP    #15
00001058  4245                      65          CLR     D5       // Clear D5 for exit address
0000105A  1801                      66          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000105C  103C 0000                 67          MOVE.B  #$0, d0  // intitiate counter
00001060  4EB9 00001188             68          JSR     LOOP    // Convert Ending address int Hex
00001066  23C5 00001E12             69          MOVE.L  D5, addrEnd
0000106C  4EB9 00001086             70          JSR     CheckRange
00001072  2039 00001E0E             71          MOVE.L  addrStart, D0
00001078  2C40                      72          MOVEA.L D0, A6
0000107A  4EB9 00001206             73          JSR     OPCODE
00001080  4EF9 000010E0             74          JMP     END
00001086                            75  
00001086                            76  *==================================================================
00001086                            77  *-----------------Check if the range is above or under the limit
00001086                            78  *------------------Pre: addrStart and addrEnd has begin and end values
00001086                            79          
00001086                            80  CheckRange:
00001086  2C79 00001E0E             81          MOVE.L  AddrStart, A6
0000108C  203C 00003000             82          MOVE.L  #LowerLimit, D0
00001092  B08E                      83          CMP.L   A6, D0
00001094  6E00 0BA2                 84          BGT     PRINTINVALIDADDRESS
00001098  203C 00FFFFFE             85          MOVE.L  #UpperLimit, D0
0000109E  B08E                      86          CMP.L   A6, D0
000010A0  6D00 0B96                 87          BLT     PRINTINVALIDADDRESS
000010A4  2039 00001E0E             88          MOVE.L  AddrStart, D0
000010AA  0800 0000                 89          BTST    #0, D0
000010AE  6600 0B88                 90          BNE     PRINTInvalidAddress
000010B2  2C79 00001E12             91          MOVE.L  AddrEnd, A6
000010B8  203C 00003000             92          MOVE.L  #LowerLimit, D0
000010BE  B08E                      93          CMP.L   A6, D0
000010C0  6E00 0B76                 94          BGT     PRINTINVALIDADDRESS
000010C4  203C 00FFFFFE             95          MOVE.L  #UpperLimit, D0
000010CA  B08E                      96          CMP.L   A6, D0
000010CC  6D00 0B6A                 97          BLT     PRINTINVALIDADDRESS
000010D0  2039 00001E12             98          MOVE.L  AddrEnd, D0
000010D6  0800 0000                 99          BTST    #0, D0
000010DA  6600 0B5C                100          BNE     PrintInvalidAddress
000010DE  4E75                     101          RTS
000010E0                           102  
000010E0                           103  END:
000010E0  43F9 00001D5F            104          LEA     TY_Message, A1
000010E6  103C 000E                105          MOVE.B  #14, D0
000010EA  4E4F                     106          TRAP    #15
000010EC  103C 0009                107          MOVE.B  #9, D0
000010F0  4E4F                     108          TRAP    #15
000010F2                           109          
000010F2                           110  *Please start from here Annabelle
000010F2                           111  AddrLoop:
000010F2  4EB9 00001C64            112          JSR     CLRREG    *clean registers to restart program
000010F8  4EB9 00001C76            113          JSR     CLRAREG
000010FE  43F9 00001D5C            114          LEA     PRINT_NEXTLINE, A1
00001104  103C 000E                115          MOVE.B  #14, D0
00001108  4E4F                     116          TRAP    #15
0000110A  2879 00001E12            117          MOVE.L  addrEnd, A4
00001110  B9CE                     118          CMP.L   A6, A4
00001112  6F00 0018                119          BLE     CHECK_CONT
00001116  5239 00001E1A            120          ADD.B   #1, ScreenCounter
0000111C  0C39 001E 00001E1A       121          CMP.B   #30, ScreenCounter
00001124  6700 0030                122          BEQ     Next_Screen
00001128  6000 00DC                123          BRA     OPCODE
0000112C                           124          
0000112C                           125  *===========Check if user wants to continue
0000112C                           126  CHECK_CONT:
0000112C  43F9 00001D2D            127          LEA     Continue_Program, A1
00001132  103C 000E                128          MOVE.B  #14, D0
00001136  4E4F                     129          TRAP    #15
00001138  43F8 0050                130          LEA     YesNoStorage, A1
0000113C  103C 0002                131          MOVE.B  #2, D0
00001140  4E4F                     132          TRAP    #15
00001142  0C11 0059                133          CMP.B   #$59, (A1) * Yes
00001146  6700 FEBE                134          BEQ     GETINPUT
0000114A  0C11 0079                135          CMP.B   #$79, (A1)
0000114E  6700 FEB6                136          BEQ     GETINPUT
00001152  4EF8 10E0                137          JMP     END
00001156                           138          
00001156                           139  NEXT_SCREEN:
00001156  13FC 0000 00001E1A       140          MOVE.B  #0, ScreenCounter
0000115E  43F9 00001D45            141          LEA     Continue_Screen, A1
00001164  103C 000E                142          MOVE.B  #14, D0
00001168  4E4F                     143          TRAP    #15
0000116A  43F8 0050                144          LEA     YesNoStorage, A1
0000116E  103C 0002                145          MOVE.B  #2, D0
00001172  4E4F                     146          TRAP    #15
00001174  0C11 0059                147          CMP.B   #$59, (A1) * Yes
00001178  6700 FF78                148          BEQ     AddrLoop
0000117C  0C11 0079                149          CMP.B   #$79, (A1)
00001180  6700 FF70                150          BEQ     AddrLoop
00001184  4EF8 10E0                151          JMP     END
00001188                           152          
00001188                           153  LOOP
00001188                           154  
00001188  B880                     155          CMP.L   D0, D4  // Loop until length of word reached
0000118A  6E00 0006                156          BGT     CONVERT
0000118E  5480                     157          ADD.L   #$2, D0 
00001190  4E75                     158          RTS 
00001192                           159  
00001192                           160  *=================================================================
00001192                           161  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
00001192                           162  *PRE      D4 must contain input length, d0 must be 0
00001192                           163  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
00001192                           164  CONVERT:
00001192  5280                     165          ADDQ.L  #$1, D0 // increment counter
00001194  1211                     166          move.b  (A1),D1    // Get next bit from Input
00001196  5289                     167          adda.L  #1, A1      // Increment Input
00001198  0401 0030                168          sub.b   #$30,D1     //
0000119C  B23C 0010                169          cmp.b   #$10,D1   // Check if value is larger than 10
000011A0  6E00 000A                170          bgt     CHAR      // Find Hex
000011A4  1401                     171          move.b  D1, D2    // IF it is less than 10
000011A6  4EF9 000011DC            172          JMP     ADDVAL        
000011AC                           173  CHAR:
000011AC  B23C 0011                174          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
000011B0  6700 0030                175          BEQ     A
000011B4  B23C 0012                176          CMP.B   #$12, D1
000011B8  6700 002E                177          BEQ     B
000011BC  B23C 0013                178          CMP.B   #$13, D1
000011C0  6700 002C                179          BEQ     C
000011C4  B23C 0014                180          CMP.B   #$14, D1
000011C8  6700 002A                181          BEQ     D
000011CC  B23C 0015                182          CMP.B   #$15, D1
000011D0  6700 0028                183          BEQ     E
000011D4  B23C 0016                184          CMP.B   #$16, D1
000011D8  6700 0026                185          BEQ     F
000011DC                           186  
000011DC                           187  ADDVAL:
000011DC  E98D                     188          lsl.l    #$4, D5 // Shift based on position
000011DE  DA82                     189          add.l    D2, D5 //Add value into Input
000011E0  60A6                     190          BRA      LOOP
000011E2                           191      
000011E2                           192  A:
000011E2  740A                     193          MOVE.L  #$A, D2 
000011E4  4EF8 11DC                194          jmp ADDVAL
000011E8                           195  B:
000011E8  740B                     196          MOVE.L  #$B, D2
000011EA  4EF8 11DC                197          jmp ADDVAL
000011EE                           198  C:
000011EE  740C                     199          MOVE.L  #$C, D2
000011F0  4EF8 11DC                200          jmp ADDVAL
000011F4                           201  D:
000011F4  740D                     202          MOVE.L  #$D, D2
000011F6  4EF8 11DC                203          jmp ADDVAL
000011FA                           204  E:
000011FA  740E                     205          MOVE.L  #$E, D2
000011FC  4EF8 11DC                206          jmp ADDVAL
00001200                           207  F:
00001200  740F                     208          MOVE.L  #$F, D2
00001202  4EF8 11DC                209          jmp ADDVAL
00001206                           210          
00001206                           211  *=======================================================================
00001206                           212  *---------Find the first 4 of instruction and determines the instruction
00001206                           213  OPCODE:
00001206  4280                     214          CLR.L   D0
00001208  4281                     215          CLR.L   D1
0000120A  4282                     216          CLR.L   D2
0000120C  220E                     217          MOVE.L  A6, D1  * PRINT ADDRESS PER LINE
0000120E  143C 0010                218          MOVE.B  #16, D2
00001212  103C 000F                219          MOVE.B  #15, D0
00001216  4E4F                     220          TRAP    #15
00001218  227C 00000000            221          MOVE.L  #$00000000, A1
0000121E  43F9 00001D84            222          LEA     SPACER, A1
00001224  103C 000E                223          MOVE.B  #14, D0
00001228  4E4F                     224          TRAP    #15
0000122A  4280                     225          CLR.L     D0
0000122C  4281                     226          CLR.L     D1
0000122E  4282                     227          CLR.L     D2
00001230  321E                     228          MOVE.W  (A6)+,D1
00001232  2401                     229          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
00001234  E849                     230          LSR.W   #4, D1
00001236  E849                     231          LSR.W   #4, D1
00001238  E849                     232          LSR.W   #4, D1  //Right Shift 3 times
0000123A  1001                     233          MOVE.B  D1, D0  // OPCODE FOUND
0000123C  B03C 000E                234          CMP.B   #%1110, D0
00001240  6E00 0A06                235          BGT     PRINTDATA
00001244  C0FC 0006                236          MULU    #6, D0
00001248                           237          *MOVE.B  D0, OpCodeSize
00001248  45F9 00001252            238          LEA     JMPTABLE, A2
0000124E  4EF2 0000                239          JMP     (A2, D0)
00001252                           240          
00001252                           241  *========================================================================
00001252                           242  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001252                           243  *------- Add your instructions here
00001252                           244  JMPTABLE
00001252  4EF9 000012AC            245          JMP     OP0000
00001258  4EF9 000012AC            246          JMP     OP0001 *MOVEB
0000125E  4EF9 000012CA            247          JMP     OP0010 *MOVEL
00001264  4EF9 000012FA            248          JMP     OP0011 *MOVEW
0000126A  4EF9 00001322            249          JMP     OP0100 *NOT
00001270  4EF9 000013C6            250          JMP     OP0101
00001276  4EF9 000013C6            251          JMP     OP0110
0000127C  4EF9 000013C6            252          JMP     OP0111
00001282  4EF9 00001402            253          JMP     OP1000 *OR
00001288  4EF9 000013C6            254          JMP     OP1001 *SUB
0000128E  4EF9 00001446            255          JMP     OP1010
00001294  4EF9 00001446            256          JMP     OP1011
0000129A  4EF9 00001446            257          JMP     OP1100 *AND
000012A0  4EF9 00001482            258          JMP     OP1101 *ADD
000012A6  4EF9 000014BE            259          JMP     OP1110 *ROR ROL
000012AC                           260  
000012AC                           261  *=====================================================================    
000012AC                           262  *--------------D2 must contain Entire opcode for everything below
000012AC                           263  OP0000:
000012AC                           264  *-> MOVE.B
000012AC                           265  OP0001:
000012AC  13FC 0000 00001E1E       266          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012B4  43F9 00001D99            267          LEA     MOVEB, A1
000012BA  103C 000E                268          MOVE.B  #14, D0
000012BE  4E4F                     269          TRAP    #15
000012C0  4EB9 000017FA            270          JSR     EA * Find SRC EA
000012C6  6000 05B4                271          BRA     DESTEAFINDER * FIND DEST EA
000012CA                           272  * -> MOVE.L
000012CA                           273  * Printed using MOVEL String as a variable on the very bottom
000012CA                           274  OP0010:
000012CA  13FC 0002 00001E1E       275          MOVE.B  #%10, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012D2  43F9 00001D94            276          LEA     MOVE_PRINT, A1
000012D8  103C 000E                277          MOVE.B  #14, D0
000012DC  4E4F                     278          TRAP    #15
000012DE  4EB9 000017C8            279          JSR     CHECK_MOVEA
000012E4  43F9 00001DA9            280          LEA     MOVEL, A1
000012EA  103C 000E                281          MOVE.B  #14, D0
000012EE  4E4F                     282          TRAP    #15
000012F0  4EB9 000017FA            283          JSR     EA *Find SRC EA
000012F6  6000 0584                284          BRA     DESTEAFINDER *FIND DEST EA
000012FA                           285  * -> MOVE.W
000012FA                           286  OP0011:
000012FA  43F9 00001D94            287          LEA     MOVE_PRINT, A1
00001300  103C 000E                288          MOVE.B  #14, D0
00001304  4E4F                     289          TRAP    #15
00001306  4EB9 000017C8            290          JSR     CHECK_MOVEA
0000130C  43F9 00001DA5            291          LEA     MOVEW, A1
00001312  103C 000E                292          MOVE.B  #14, D0
00001316  4E4F                     293          TRAP    #15
00001318  4EB9 000017FA            294          JSR     EA * FIND SRC EA
0000131E  6000 055C                295          BRA     DESTEAFINDER *FIND DEST EA
00001322                           296          
00001322                           297  *-> NOT
00001322                           298  OP0100:
00001322  43F9 00001E01            299          LEA     NOT_OP, A1
00001328  103C 000E                300          MOVE.B  #14, D0
0000132C  4E4F                     301          TRAP    #15
0000132E  E14A                     302          LSL.W   #8, D2
00001330  3602                     303          MOVE.W  D2, D3 * D3 = SIZE OF INSTRUCTION
00001332  E04B                     304          LSR.W   #8, D3
00001334  EC4B                     305          LSR.W   #6, D3
00001336  3202                     306          MOVE.W  D2, D1 * D1 = EA OPMODE
00001338  E549                     307          LSL.W   #2, D1
0000133A  E049                     308          LSR.W   #8, D1
0000133C  EA49                     309          LSR.W   #5, D1
0000133E  3002                     310          MOVE.W  D2, D0 * D0 = EA REGISTER
00001340  EB48                     311          LSL.W   #5, D0
00001342  E048                     312          LSR.W   #8, D0
00001344  EA48                     313          LSR.W   #5, D0
00001346  C6FC 0006                314          MULU    #6, D3 * Multiply for JMPTABLE
0000134A  45F9 00001354            315          LEA     NOT_JMPTable, A2
00001350  4EB2 3000                316          JSR     (A2, D3)
00001354                           317          
00001354                           318  NOT_JMPTable
00001354  4EF9 0000136C            319          JMP     NOT_SIZE00
0000135A  4EF9 0000138E            320          JMP     NOT_SIZE01
00001360  4EF9 000013A8            321          JMP     NOT_SIZE10
00001366  4EF9 000013C2            322          JMP     NOT_SIZE11
0000136C                           323  *NOT.B
0000136C                           324  NOT_SIZE00:
0000136C  13FC 0000 00001E1E       325          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001374  1A00                     326          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
00001376  43F9 00001DA1            327          LEA     SIZE_B, A1
0000137C  103C 000E                328          MOVE.B  #14, D0
00001380  4E4F                     329          TRAP    #15
00001382  1005                     330          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001384  4EB9 00001818            331          JSR     EACHECKER
0000138A  6000 FD66                332          BRA     AddrLoop
0000138E                           333  * NOT.W
0000138E                           334  NOT_SIZE01: 
0000138E  1A00                     335          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001390  43F9 00001D8C            336          LEA     SIZE_WORD, A1
00001396  103C 000E                337          MOVE.B  #14, D0
0000139A  4E4F                     338          TRAP    #15
0000139C  1005                     339          MOVE.B  D5, D0 * RETURN TEMP STORAGE
0000139E  4EB9 00001818            340          JSR     EACHECKER
000013A4  6000 FD4C                341          BRA     AddrLoop
000013A8                           342  * NOT.L
000013A8                           343  NOT_SIZE10:
000013A8  1A00                     344          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
000013AA  43F9 00001D90            345          LEA     SIZE_LONG, A1
000013B0  103C 000E                346          MOVE.B  #14, D0
000013B4  4E4F                     347          TRAP    #15
000013B6  1005                     348          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013B8  4EB9 00001818            349          JSR     EACHECKER
000013BE  6000 FD32                350          BRA     AddrLoop
000013C2                           351  NOT_SIZE11:
000013C2  6000 0854                352          BRA     PRINTINVALIDEA
000013C6                           353  
000013C6                           354              
000013C6                           355  OP0101:
000013C6                           356          
000013C6                           357  OP0110:
000013C6                           358  OP0111:
000013C6                           359          
000013C6                           360  
000013C6                           361  
000013C6                           362  
000013C6                           363  * -> SUB
000013C6                           364  * Splitting Sub into OPMODE and Register value
000013C6                           365  OP1001:
000013C6  43F9 00001DF2            366          LEA     SUBTRACT, A1
000013CC  103C 000E                367          MOVE.B  #14, D0
000013D0  4E4F                     368          TRAP    #15
000013D2  E94A                     369          LSL.W   #4, D2
000013D4  3602                     370          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000013D6  E04B                     371          LSR.W   #8, D3 * D3 = D register
000013D8  EA4B                     372          LSR.W   #5, D3
000013DA  3802                     373          MOVE.W  D2, D4 *D4 = SubOPMODE
000013DC  E74C                     374          LSL.W   #3, D4
000013DE  E04C                     375          LSR.W   #8, D4
000013E0  EA4C                     376          LSR.W   #5, D4
000013E2  3202                     377          MOVE.W  D2, D1 * D1 = EA Mode
000013E4  ED49                     378          LSL.W   #6, D1
000013E6  E049                     379          LSR.W   #8, D1
000013E8  EA49                     380          LSR.W   #5, D1
000013EA  3002                     381          MOVE.W  D2, D0 * D0 = EA register
000013EC  E148                     382          LSL.W   #8, D0
000013EE  E348                     383          LSL.W   #1, D0
000013F0  E048                     384          LSR.W   #8, D0
000013F2  EA48                     385          LSR.W   #5, D0
000013F4  45F9 0000163E            386          LEA     SubTable, A2
000013FA  C8FC 0006                387          MULU    #6, D4
000013FE  4EB2 4000                388          JSR     (A2, D4)
00001402                           389  * -> OR
00001402                           390  * Splitting AND into OPMODE and Register value       
00001402                           391  OP1000:
00001402  43F9 00001DFE            392          LEA     OR, A1
00001408  103C 000E                393          MOVE.B  #14, D0
0000140C  4E4F                     394          TRAP    #15
0000140E  E94A                     395          LSL.W   #4, D2
00001410  3602                     396          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001412  E04B                     397          LSR.W   #8, D3 * D3 = D register
00001414  EA4B                     398          LSR.W   #5, D3
00001416  3802                     399          MOVE.W  D2, D4 *D4 = SubOPMODE
00001418  E74C                     400          LSL.W   #3, D4
0000141A  E04C                     401          LSR.W   #8, D4
0000141C  EA4C                     402          LSR.W   #5, D4
0000141E  3202                     403          MOVE.W  D2, D1 * D1 = EA Mode
00001420  ED49                     404          LSL.W   #6, D1
00001422  E049                     405          LSR.W   #8, D1
00001424  EA49                     406          LSR.W   #5, D1
00001426  B23C 0001                407          CMP.B   #%0001, D1
0000142A  6700 07EC                408          BEQ     PRINTINVALIDEA
0000142E  3002                     409          MOVE.W  D2, D0 * D0 = EA register
00001430  E148                     410          LSL.W   #8, D0
00001432  E348                     411          LSL.W   #1, D0
00001434  E048                     412          LSR.W   #8, D0
00001436  EA48                     413          LSR.W   #5, D0
00001438  45F9 0000163E            414          LEA     SubTable, A2
0000143E  C8FC 0006                415          MULU    #6, D4
00001442  4EB2 4000                416          JSR     (A2, D4)
00001446                           417  OP1010
00001446                           418  OP1011
00001446                           419  * -> AND
00001446                           420  * Splitting AND into OPMODE and Register value
00001446                           421  OP1100
00001446  43F9 00001DFA            422          LEA     AND, A1
0000144C  103C 000E                423          MOVE.B  #14, D0
00001450  4E4F                     424          TRAP    #15
00001452  E94A                     425          LSL.W   #4, D2
00001454  3602                     426          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001456  E04B                     427          LSR.W   #8, D3 * D3 = D register
00001458  EA4B                     428          LSR.W   #5, D3
0000145A  3802                     429          MOVE.W  D2, D4 *D4 = SubOPMODE
0000145C  E74C                     430          LSL.W   #3, D4
0000145E  E04C                     431          LSR.W   #8, D4
00001460  EA4C                     432          LSR.W   #5, D4
00001462  3202                     433          MOVE.W  D2, D1 * D1 = EA Mode
00001464  ED49                     434          LSL.W   #6, D1
00001466  E049                     435          LSR.W   #8, D1
00001468  EA49                     436          LSR.W   #5, D1
0000146A  3002                     437          MOVE.W  D2, D0 * D0 = EA register
0000146C  E148                     438          LSL.W   #8, D0
0000146E  E348                     439          LSL.W   #1, D0
00001470  E048                     440          LSR.W   #8, D0
00001472  EA48                     441          LSR.W   #5, D0
00001474  45F9 0000163E            442          LEA     SubTable, A2
0000147A  C8FC 0006                443          MULU    #6, D4
0000147E  4EB2 4000                444          JSR     (A2, D4)
00001482                           445          
00001482                           446  * -> ADD
00001482                           447  * Spltting Add into OPMODE and Register Value
00001482                           448  OP1101:
00001482  43F9 00001DF6            449          LEA     ADDITION, A1
00001488  103C 000E                450          MOVE.B  #14, D0
0000148C  4E4F                     451          TRAP    #15
0000148E  E94A                     452          LSL.W   #4, D2
00001490  3602                     453          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001492  E04B                     454          LSR.W   #8, D3 * D3 = D register
00001494  EA4B                     455          LSR.W   #5, D3
00001496  3802                     456          MOVE.W  D2, D4 *D4 = SubOPMODE
00001498  E74C                     457          LSL.W   #3, D4
0000149A  E04C                     458          LSR.W   #8, D4
0000149C  EA4C                     459          LSR.W   #5, D4
0000149E  3202                     460          MOVE.W  D2, D1 * D1 = EA Mode
000014A0  ED49                     461          LSL.W   #6, D1
000014A2  E049                     462          LSR.W   #8, D1
000014A4  EA49                     463          LSR.W   #5, D1
000014A6  3002                     464          MOVE.W  D2, D0 * D0 = EA register
000014A8  E148                     465          LSL.W   #8, D0
000014AA  E348                     466          LSL.W   #1, D0
000014AC  E048                     467          LSR.W   #8, D0
000014AE  EA48                     468          LSR.W   #5, D0
000014B0  45F9 0000163E            469          LEA     SubTable, A2
000014B6  C8FC 0006                470          MULU    #6, D4
000014BA  4EB2 4000                471          JSR     (A2, D4)
000014BE                           472  
000014BE                           473  *-> ROL, ROR        
000014BE                           474  OP1110:
000014BE  E94A                     475          LSL.W   #4, D2
000014C0  3C02                     476          MOVE.W  D2, D6 * Shift size
000014C2  E04E                     477          LSR.W   #8, D6
000014C4  EA4E                     478          LSR.W   #5, D6
000014C6  3602                     479          MOVE.W  D2, D3 * L/R
000014C8  E74B                     480          LSL.W   #3, D3
000014CA  E04B                     481          LSR.W   #8, D3
000014CC  EE4B                     482          LSR.W   #7, D3
000014CE  3802                     483          MOVE.W  D2, D4 * Size field
000014D0  E94C                     484          LSL.W   #4, D4
000014D2  E04C                     485          LSR.W   #8, D4
000014D4  EC4C                     486          LSR.W   #6, D4
000014D6  3202                     487          MOVE.W  D2, D1 *immediate/register
000014D8  ED49                     488          LSL.W   #6, D1
000014DA  E049                     489          LSR.W   #8, D1
000014DC  EE49                     490          LSR.W   #7, D1
000014DE  3A02                     491          MOVE.W  D2, D5 * Shift Register
000014E0  E14D                     492          LSL.W   #8, D5
000014E2  E34D                     493          LSL.W   #1, D5
000014E4  E04D                     494          LSR.W   #8, D5
000014E6  EA4D                     495          LSR.W   #5, D5
000014E8  C6FC 0006                496          MULU    #6, D3
000014EC  43F9 000014F6            497          LEA     RotateTable, A1
000014F2  4EB1 3000                498          JSR     (A1, D3)
000014F6                           499          
000014F6                           500  RotateTable:
000014F6  4EF9 00001502            501          JMP     Rotate_RIGHT
000014FC  4EF9 00001514            502          JMP     Rotate_LEFT
00001502                           503          
00001502                           504  Rotate_Right
00001502  43F9 00001E09            505          LEA     ROR, A1
00001508  103C 000E                506          MOVE.B  #14, D0
0000150C  4E4F                     507          TRAP    #15
0000150E  4EF9 00001526            508          JMP     Rotate_Size_Table
00001514                           509          
00001514                           510  Rotate_Left
00001514  43F9 00001E05            511          LEA     ROL, A1
0000151A  103C 000E                512          MOVE.B  #14, D0
0000151E  4E4F                     513          TRAP    #15
00001520  4EF9 00001526            514          JMP     Rotate_Size_Table
00001526                           515          
00001526                           516  Rotate_Size_TABLE:
00001526  B83C 0000                517          CMP.B   #%000, D4
0000152A  6700 001A                518          BEQ     Rotate_B
0000152E  B83C 0001                519          CMP.B   #%001, D4
00001532  6700 002E                520          BEQ     Rotate_W
00001536  B83C 0002                521          CMP.B   #%010, D4
0000153A  6700 0042                522          BEQ     Rotate_L
0000153E  B83C 0003                523          CMP.B   #%11, D4
00001542  6700 0056                524          BEQ     Rotate_EA
00001546                           525          
00001546                           526  Rotate_B
00001546  43F9 00001D88            527          LEA     SIZE_BYTE,A1
0000154C  103C 000E                528          MOVE.B  #14, D0
00001550  4E4F                     529          TRAP    #15
00001552  B23C 0000                530          CMP.B   #%0, D1
00001556  6700 00A0                531          BEQ     Rotate_Print_immediate
0000155A  B23C 0001                532          CMP.B   #%1, D1
0000155E  6700 007E                533          BEQ     Rotate_Print_Register
00001562                           534          
00001562                           535  Rotate_W
00001562  43F9 00001D8C            536          LEA     SIZE_WORD,A1
00001568  103C 000E                537          MOVE.B  #14, D0
0000156C  4E4F                     538          TRAP    #15
0000156E  B23C 0000                539          CMP.B   #%0, D1
00001572  6700 0084                540          BEQ     Rotate_Print_immediate
00001576  B23C 0001                541          CMP.B   #%1, D1
0000157A  6700 0062                542          BEQ     Rotate_Print_Register
0000157E                           543  
0000157E                           544  Rotate_L
0000157E  43F9 00001D90            545          LEA     SIZE_LONG,A1
00001584  103C 000E                546          MOVE.B  #14, D0
00001588  4E4F                     547          TRAP    #15
0000158A  B23C 0000                548          CMP.B   #%0, D1
0000158E  6700 0068                549          BEQ     Rotate_Print_immediate
00001592  B23C 0001                550          CMP.B   #%1, D1
00001596  6700 0046                551          BEQ     Rotate_Print_Register
0000159A                           552          
0000159A                           553  Rotate_EA
0000159A  13FC 0001 00001E1E       554          MOVE.B  #%01, OpCodeSize
000015A2  43F9 00001D84            555          LEA     SPACER, A1
000015A8  103C 000E                556          MOVE.B  #14, D0
000015AC  4E4F                     557          TRAP    #15
000015AE  1005                     558          MOVE.B  D5, D0
000015B0  1202                     559          MOVE.B  D2, D1
000015B2  ED49                     560          LSL.W   #6, D1
000015B4  E049                     561          LSR.W   #8, D1
000015B6  EA49                     562          LSR.W   #5, D1
000015B8                           563          
000015B8                           564  ROTATE_EACHECKER:
000015B8  B23C 0002                565          CMP.B   #%0010, D1
000015BC  6700 035A                566          BEQ     JMPTO_DEST_INDR_ADDR_REG
000015C0  B23C 0003                567          CMP.B   #%0011, D1
000015C4  6700 0352                568          BEQ     JMPTO_DEST_INDR_ADDR_REG
000015C8  B23C 0004                569          CMP.B   #%0100, D1
000015CC  6700 034A                570          BEQ     JMPTO_DEST_INDR_ADDR_REG
000015D0  4EF9 00001C18            571          JMP     PRINTINVALIDEA
000015D6  B23C 0007                572          CMP.B   #%0111, D1
000015DA  6700 0400                573          BEQ     JMPTO_SRC_IMMEDIATE
000015DE                           574          
000015DE                           575  Rotate_Print_REGISTER
000015DE  1006                     576          MOVE.B  D6, D0
000015E0  123C 0000                577          MOVE.B  #%000, D1
000015E4  4EB9 00001818            578          JSR     EACHECKER
000015EA  1005                     579          MOVE.B  D5, D0
000015EC  4241                     580          CLR     D1
000015EE  4EB9 0000184E            581          JSR     DESTEACHECKER
000015F4  4EF8 10F2                582          JMP     AddrLoop
000015F8                           583          
000015F8                           584  Rotate_Print_immediate
000015F8  43F9 00001DF0            585          LEA     POUND_SIGN, A1
000015FE  103C 000E                586          MOVE.B  #14, D0
00001602  4E4F                     587          TRAP    #15
00001604  BC3C 0000                588          CMP.B   #%0000, D6
00001608  6700 0024                589          BEQ     PRINT8
0000160C  1206                     590          MOVE.B  D6, D1
0000160E  143C 000A                591          MOVE.B  #10, D2
00001612  103C 000F                592          MOVE.B  #15, D0
00001616  4E4F                     593          TRAP    #15
00001618                           594          
00001618                           595  Rotate_Print_ImmediateCONT:
00001618  4EB9 00001C0A            596          JSR     PRINTCOMMA
0000161E  1005                     597          MOVE.B  D5, D0
00001620  123C 0000                598          MOVE.B  #%000, D1
00001624  4EB9 0000184E            599          JSR     DESTEACHECKER
0000162A  4EF8 10F2                600          JMP     AddrLoop
0000162E                           601  
0000162E                           602  PRINT8:
0000162E  1204                     603          MOVE.B  D4, D1
00001630  143C 000A                604          MOVE.B  #10, D2
00001634  103C 000F                605          MOVE.B  #15, D0
00001638  4E4F                     606          TRAP    #15
0000163A  4EF8 1618                607          JMP     Rotate_Print_ImmediateCONT
0000163E                           608          
0000163E                           609  * End of ROR, ROL, (Kelvin)                
0000163E                           610          
0000163E                           611  * =============================================
0000163E                           612  * JMP Table for SUB OPMODES
0000163E                           613  SubTable:
0000163E  4EF9 0000166E            614          JMP     OPMODE000 * BYTE  EA->DN
00001644  4EF9 00001688            615          JMP     OPMODE001 * WORD  RA->DN  
0000164A  4EF9 0000169A            616          JMP     OPMODE010 * LONG  EA->DN 
00001650  4EF9 000016AC            617          JMP     OPMODE011 * ADDA  WORD
00001656  4EF9 000016DA            618          JMP     OPMODE100 * BYTE  DN->EA
0000165C  4EF9 000016F2            619          JMP     OPMODE101 * BYTE  DN->EA
00001662  4EF9 0000170A            620          JMP     OPMODE110 * BYTE  DN->EA
00001668  4EF9 00001722            621          JMP     OPMODE111 * ADDA  LONG
0000166E                           622          
0000166E                           623  OPMODE000:
0000166E  13FC 0000 00001E1E       624          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001676  1A00                     625          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001678  43F9 00001D88            626          LEA     SIZE_BYTE, A1
0000167E  103C 000E                627          MOVE.B  #14, D0
00001682  4E4F                     628          TRAP    #15
00001684  6000 00DC                629          BRA     Sub_OPMODE_FIRST
00001688                           630  OPMODE001
00001688  1A00                     631          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000168A  43F9 00001D8C            632          LEA     SIZE_Word, A1
00001690  103C 000E                633          MOVE.B  #14, D0
00001694  4E4F                     634          TRAP    #15
00001696  6000 00CA                635          BRA     Sub_OPMODE_FIRST
0000169A                           636  OPMODE010
0000169A  1A00                     637          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000169C  43F9 00001D90            638          LEA     SIZE_Long, A1
000016A2  103C 000E                639          MOVE.B  #14, D0
000016A6  4E4F                     640          TRAP    #15
000016A8  6000 00B8                641          BRA     Sub_OPMODE_FIRST
000016AC                           642  *===============================================
000016AC                           643  *Special OPMODE can only be used by ADD
000016AC                           644  OPMODE011
000016AC  0C38 000D 1206           645          CMP.B   #%1101, OpCode
000016B2  6700 0008                646          BEQ     Special_OPMODE_USED
000016B6  4EF9 00001C18            647          JMP     PRINTINVALIDEA
000016BC                           648  Special_OPMODE_USED:
000016BC  1A00                     649          MOVE.B  D0, D5
000016BE  43F9 00001DAD            650          LEA     MOVEA, A1
000016C4  103C 000E                651          MOVE.B  #14, D0
000016C8  4E4F                     652          TRAP    #15
000016CA  43F9 00001D8C            653          LEA     SIZE_WORD, A1
000016D0  103C 000E                654          MOVE.B  #14, D0
000016D4  4E4F                     655          TRAP    #15
000016D6  6000 00CE                656          BRA     Sub_OPMODE_ADDA
000016DA                           657  OPMODE100
000016DA  1A00                     658          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000016DC  43F9 00001D88            659          LEA     SIZE_BYTE, A1
000016E2  103C 000E                660          MOVE.B  #14, D0
000016E6  4E4F                     661          TRAP    #15
000016E8  4EB9 00001750            662          JSR     Memory_Alterable_Check
000016EE  6000 0090                663          BRA     Sub_OPMODE_SECOND
000016F2                           664  OPMODE101
000016F2  1A00                     665          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000016F4  43F9 00001D8C            666          LEA     SIZE_Word, A1
000016FA  103C 000E                667          MOVE.B  #14, D0
000016FE  4E4F                     668          TRAP    #15
00001700  4EB9 00001750            669          JSR     Memory_Alterable_Check
00001706  6000 0078                670          BRA     Sub_OPMODE_SECOND
0000170A                           671  OPMODE110
0000170A  1A00                     672          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000170C  43F9 00001D90            673          LEA     SIZE_LONG, A1
00001712  103C 000E                674          MOVE.B  #14, D0
00001716  4E4F                     675          TRAP    #15
00001718  4EB9 00001750            676          JSR     Memory_Alterable_Check
0000171E  6000 0060                677          BRA     Sub_OPMODE_SECOND
00001722                           678  OPMODE111:
00001722  0C38 000D 1206           679          CMP.B   #%1101, OpCode
00001728  6700 0008                680          BEQ     Special_OPMODE_USED2
0000172C  4EF9 00001C18            681          JMP     PRINTINVALIDEA
00001732                           682  Special_OPMODE_USED2:
00001732  1A00                     683          MOVE.B  D0, D5
00001734  43F9 00001DAD            684          LEA     MOVEA, A1
0000173A  103C 000E                685          MOVE.B  #14, D0
0000173E  4E4F                     686          TRAP    #15
00001740  43F9 00001D90            687          LEA     SIZE_LONG, A1
00001746  103C 000E                688          MOVE.B  #14, D0
0000174A  4E4F                     689          TRAP    #15
0000174C  6000 0058                690          BRA     Sub_OPMODE_ADDA
00001750                           691  *===================================================
00001750                           692  * USED FOR SUB AND OR, check if dest EA is memory Alterable
00001750                           693  
00001750                           694  Memory_Alterable_Check:
00001750  B23C 0000                695          CMP.B   #%000, D1
00001754  6700 04C2                696          BEQ     PRINTINVALIDEA
00001758  B23C 0001                697          CMP.B   #%001, D1
0000175C  6700 04BA                698          BEQ     PRINTINVALIDEA
00001760  4E75                     699          RTS
00001762                           700          
00001762                           701  *===============================================
00001762                           702  * Used for Dn->EA for SUB
00001762                           703  * Called by 001, 010, 100, 
00001762                           704  Sub_OPMODE_FIRST:
00001762  1005                     705          MOVE.B  D5, D0   * TEMP RETURN D0
00001764  4EB9 00001818            706          JSR     EACHECKER 
0000176A  4280                     707          CLR.L     D0
0000176C  4281                     708          CLR.L     D1
0000176E  4EB9 00001C0A            709          JSR     PRINTCOMMA
00001774  1003                     710          MOVE.B  D3, D0
00001776  4EB9 0000184E            711          JSR     DestEAChecker 
0000177C  6000 F974                712          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001780                           713  *===============================================
00001780                           714  * Used for Dn->EA for SUB
00001780                           715  * Called by 100, 101, 110 
00001780                           716  Sub_OPMODE_SECOND:
00001780  1801                     717          MOVE.B  D1, D4   *TEMP STORE D1
00001782  4280                     718          CLR.L     D0  *Clean D0
00001784  1003                     719          MOVE.B  D3, D0
00001786  4281                     720          CLR.L     D1
00001788  4EB9 00001818            721          JSR     EACHECKER yeah
0000178E  4280                     722          CLR.L     D0
00001790  4281                     723          CLR.L     D1
00001792  4EB9 00001C0A            724          JSR     PRINTCOMMA
00001798  1005                     725          MOVE.B  D5, D0   * TEMP RETURN D0
0000179A  1204                     726          MOVE.B  D4, D1   * TEMP RETURN D1
0000179C  4EB9 0000184E            727          JSR     DestEAChecker 
000017A2  6000 F94E                728          BRA     addrloop *EA FINISHED-----
000017A6                           729  *===============================================
000017A6                           730  * Used for Dn->EA for SUB
000017A6                           731  * Called by 011, 111
000017A6                           732  Sub_OPMODE_ADDA:
000017A6  1005                     733          MOVE.B  D5, D0   * TEMP RETURN D0
000017A8  4EB9 00001818            734          JSR     EACHECKER 
000017AE  4240                     735          CLR     D0
000017B0  4241                     736          CLR     D1
000017B2  4EB9 00001C0A            737          JSR     PRINTCOMMA
000017B8  1003                     738          MOVE.B  D3, D0
000017BA  123C 0001                739          MOVE.B  #%001, D1
000017BE  4EB9 0000184E            740          JSR     DestEAChecker 
000017C4  6000 F92C                741          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
000017C8                           742          
000017C8                           743  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
000017C8                           744  CHECK_MOVEA
000017C8  2602                     745          MOVE.L  D2, D3  * HOlding D2 in D3 temp
000017CA  E18A                     746          LSL.L   #8, D2 // Remove first 20 bits to get opperand
000017CC  E18A                     747          LSL.L   #8, D2
000017CE  E98A                     748          LSL.L   #4, D2
000017D0  E08A                     749          LSR.L   #8, D2
000017D2  E08A                     750          LSR.L   #8, D2
000017D4  E88A                     751          LSR.L   #4, D2 // 12 bits of opperand found
000017D6  EC8A                     752          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
000017D8  1202                     753          MOVE.B  D2, D1 * Prepare D1 for Mode
000017DA  EB09                     754          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000017DC  EA09                     755          LSR.B   #5, D1
000017DE  B23C 0001                756          CMP.B   #%001, D1
000017E2  6700 0006                757          BEQ     PRINTA
000017E6  2403                     758          MOVE.L  D3, D2 
000017E8  4E75                     759          RTS * Goes back to OP Value
000017EA                           760          
000017EA                           761  PRINTA
000017EA  43F9 00001DAD            762          LEA     MOVEA, A1
000017F0  103C 000E                763          MOVE.B  #14, D0
000017F4  4E4F                     764          TRAP    #15
000017F6  2403                     765          MOVE.L  D3, D2
000017F8  4E75                     766          RTS * Goes back to CHECK_MOVEA
000017FA                           767          
000017FA                           768          
000017FA                           769  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
000017FA                           770  *=================================================================
000017FA                           771  *-----------EA-- Calculate EA used for Data Registers
000017FA                           772  *----------Pre: D2, D0, D1 must be clear
000017FA                           773  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
000017FA                           774  EA:
000017FA  4280                     775          CLR.L     D0  * Clear D0 and D1 so they don't conflict
000017FC  4281                     776          CLR.L     D1
000017FE  4283                     777          CLR.L     D3
00001800  E18A                     778          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001802  E18A                     779          LSL.L   #8, D2
00001804  E98A                     780          LSL.L   #4, D2
00001806  E08A                     781          LSR.L   #8, D2
00001808  E08A                     782          LSR.L   #8, D2
0000180A  E88A                     783          LSR.L   #4, D2 // 12 bits of opperand found
0000180C  1002                     784          MOVE.B  D2, D0 Source Data Register
0000180E  EB08                     785          LSL.B   #5, D0
00001810  EA08                     786          LSR.B   #5, D0
00001812  1202                     787          MOVE.B  D2, D1 *Source Data Mode
00001814  E509                     788          LSL.B   #2, D1
00001816  EA09                     789          LSR.B   #5, D1
00001818                           790          
00001818                           791  *=================================================
00001818                           792  *-----------EA CHECKER------Continues from EA
00001818                           793  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001818                           794  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
00001818                           795  EACHECKER: 
00001818  B23C 0000                796          CMP.B   #%0000, D1
0000181C  6700 007E                797          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001820  B23C 0001                798          CMP.B   #%0001, D1
00001824  6700 0096                799          BEQ     JMPTO_SRC_ADDR_REG
00001828  B23C 0002                800          CMP.B   #%0010, D1
0000182C  6700 00AE                801          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001830  B23C 0003                802          CMP.B   #%0011, D1
00001834  6700 00A6                803          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001838  B23C 0004                804          CMP.B   #%0100, D1
0000183C  6700 009E                805          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001840  B23C 0007                806          CMP.B   #%0111, D1
00001844  6700 0196                807          BEQ     JMPTO_SRC_IMMEDIATE
00001848  4EF9 00001C18            808          JMP     PRINTINVALIDEA
0000184E                           809          
0000184E                           810  *=================================================
0000184E                           811  *-----------DEST EA CHECKER------Continues from EA
0000184E                           812  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
0000184E                           813  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
0000184E                           814  DESTEACHECKER:
0000184E  B23C 0000                815          CMP.B   #%0000, D1
00001852  6700 0058                816          BEQ     JMPTODestREG *JUMPS TO Source D registers
00001856  B23C 0001                817          CMP.B   #%0001, D1
0000185A  6700 0070                818          BEQ     JMPTO_DEST_ADDR_REG
0000185E  B23C 0002                819          CMP.B   #%0010, D1
00001862  6700 00B4                820          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001866  B23C 0003                821          CMP.B   #%0011, D1
0000186A  6700 00AC                822          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000186E  B23C 0004                823          CMP.B   #%0100, D1
00001872  6700 00A4                824          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001876  4EF9 00001C18            825          JMP     PRINTINVALIDEA
0000187C                           826          
0000187C                           827  *=================================================      
0000187C                           828  * Dest EA Finder
0000187C                           829  * PRE: ONLY USED FOR MOVE
0000187C                           830  * POST: PRINTS DEST EA  
0000187C                           831  DestEAFinder:
0000187C  4EB9 00001C0A            832          JSR     PRINTCOMMA  * Prints comma between two operrands
00001882  EC8A                     833          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001884  4241                     834          CLR     D1     * Clear D1 and D0 for opperand mode and register
00001886  4240                     835          CLR     D0
00001888  1202                     836          MOVE.B  D2, D1 * Prepare D1 for Mode
0000188A  EB09                     837          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
0000188C  EA09                     838          LSR.B   #5, D1
0000188E  1002                     839          MOVE.B  D2, D0  *Prepare D0 for Register
00001890  E508                     840          LSL.B   #2, D0
00001892  EA08                     841          LSR.B   #5, D0
00001894  4EB8 184E                842          JSR     DESTEACHECKER
00001898  4EF8 10F2                843          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
0000189C                           844  
0000189C                           845          
0000189C                           846  *===================================================
0000189C                           847  *-------------Data Register checker------------------        
0000189C                           848  JMPTOSRCREG:
0000189C  43F9 00001ABE            849          LEA     DATAREGTABLE, A1
000018A2  C0FC 0006                850          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000018A6  4EB1 0000                851          JSR     (A1, D0) *JMP To index A1 + D0
000018AA                           852          * EA CONTINUES HERE
000018AA  4E75                     853          RTS * BRA DESTEAFINDER DELETED
000018AC                           854  JMPToDestReg: *PRINT OUT DEST Registers
000018AC  43F9 00001ABE            855          LEA     DATAREGTABLE, A1
000018B2  C0FC 0006                856          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000018B6  4EB1 0000                857          JSR     (A1, D0) *JMP to A1 + D0
000018BA  4E75                     858          RTS    * Goes Back to DestEAFinder
000018BC                           859          
000018BC                           860  
000018BC                           861  *===================================================
000018BC                           862  *-------------Address Register checker------------------             
000018BC                           863  JMPTO_SRC_ADDR_REG:
000018BC  43F9 00001AEE            864          LEA     AddrREGTABLE, A1
000018C2  C0FC 0006                865          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000018C6  4EB1 0000                866          JSR     (A1, D0) *JMP To index A1 + D0
000018CA                           867          * EA CONTINUES HERE
000018CA  4E75                     868          RTS * BRA DESTEAFINDER DELETED
000018CC                           869  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
000018CC  43F9 00001AEE            870          LEA     AddrREGTABLE, A1
000018D2  C0FC 0006                871          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000018D6  4EB1 0000                872          JSR     (A1, D0) *JMP to A1 + D0
000018DA  4E75                     873          RTS     * Goes Back to DESTEAFinder
000018DC                           874          
000018DC                           875  *===================================================
000018DC                           876  *-------------Indirect Address Register checker------------------
000018DC                           877  *Copied from Address Register checker, basically adding parenthesis () around Address register
000018DC                           878  * Also Detects ()+ and -()
000018DC                           879  * PRE: D1 stores mode, D0 stores register #
000018DC                           880  * D1 to D5 are off limits
000018DC                           881  JMPTO_SRC_INDR_ADDR_REG:
000018DC  1A00                     882         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
000018DE  B23C 0004                883         CMP.B    #%100, D1       * IF IT IS -()
000018E2  6700 007E                884         BEQ      PRE_DECREMENT_SRC
000018E6  43F9 00001DE6            885         LEA      INDR_LEFT, A1
000018EC  103C 000E                886         MOVE.B   #14, D0
000018F0  4E4F                     887         TRAP     #15
000018F2  1005                     888         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000018F4  43F9 00001AEE            889         LEA     AddrREGTABLE, A1
000018FA  C0FC 0006                890         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000018FE  4EB1 0000                891         JSR     (A1, D0) *JMP To index A1 + D0
00001902  43F9 00001DE8            892         LEA      INDR_RIGHT, A1
00001908  103C 000E                893         MOVE.B   #14, D0
0000190C  4E4F                     894         TRAP     #15
0000190E  B23C 0003                895         CMP.B    #%0011, D1 * IF IT IS ()+
00001912  6700 0040                896         BEQ      POST_INCREMENT_SRC
00001916  4E75                     897         RTS * BRA DESTEAFINDER DELETED
00001918                           898         
00001918                           899  JMPTO_DEST_INDR_ADDR_REG:
00001918  1A00                     900         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
0000191A  B23C 0004                901         CMP.B    #%100, D1
0000191E  6700 0086                902         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00001922  43F9 00001DE6            903         LEA      INDR_LEFT, A1
00001928  103C 000E                904         MOVE.B   #14, D0
0000192C  4E4F                     905         TRAP     #15
0000192E  1003                     906         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001930  43F9 00001AEE            907         LEA     AddrREGTABLE, A1
00001936  C0FC 0006                908         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000193A  4EB1 0000                909         JSR     (A1, D0) *JMP To index A1 + D0
0000193E  43F9 00001DE8            910         LEA      INDR_RIGHT, A1
00001944  103C 000E                911         MOVE.B   #14, D0
00001948  4E4F                     912         TRAP     #15
0000194A  B23C 0003                913         CMP.B    #%0011, D1  // IF IT IS ()+
0000194E  6700 0048                914         BEQ      POST_INCREMENT_DEST
00001952  4E75                     915         RTS      * Goes Back to DestEAFinder
00001954                           916         
00001954                           917  POST_INCREMENT_SRC:
00001954  43F9 00001DEA            918         LEA      POST_INCRE, A1
0000195A  103C 000E                919         MOVE.B   #14, D0
0000195E  4E4F                     920         TRAP     #15
00001960  4E75                     921         RTS * BRA DESTEAFINDER DELETED
00001962                           922         
00001962                           923  PRE_DECREMENT_SRC:
00001962  43F9 00001DEC            924         LEA      PRE_DECRE, A1
00001968  103C 000E                925         MOVE.B   #14, D0
0000196C  4E4F                     926         TRAP     #15
0000196E  43F9 00001DE6            927         LEA      INDR_LEFT, A1
00001974  103C 000E                928         MOVE.B   #14, D0
00001978  4E4F                     929         TRAP     #15
0000197A  1005                     930         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
0000197C  43F9 00001AEE            931         LEA     AddrREGTABLE, A1
00001982  C0FC 0006                932         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001986  4EB1 0000                933         JSR     (A1, D0) *JMP To index A1 + D0
0000198A  43F9 00001DE8            934         LEA      INDR_RIGHT, A1
00001990  103C 000E                935         MOVE.B   #14, D0
00001994  4E4F                     936         TRAP     #15
00001996  4E75                     937         RTS * BRA DESTEAFINDER DELETED
00001998                           938  
00001998                           939  POST_INCREMENT_DEST
00001998  43F9 00001DEA            940         LEA      POST_INCRE, A1
0000199E  103C 000E                941         MOVE.B   #14, D0
000019A2  4E4F                     942         TRAP     #15
000019A4  4E75                     943         RTS      * Goes Back to DestEAFinder
000019A6                           944         
000019A6                           945  PRE_DECREMENT_DEST:
000019A6  43F9 00001DEC            946         LEA      PRE_DECRE, A1
000019AC  103C 000E                947         MOVE.B   #14, D0
000019B0  4E4F                     948         TRAP     #15
000019B2  43F9 00001DE6            949         LEA      INDR_LEFT, A1
000019B8  103C 000E                950         MOVE.B   #14, D0
000019BC  4E4F                     951         TRAP     #15
000019BE  1005                     952         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000019C0  43F9 00001AEE            953         LEA     AddrREGTABLE, A1
000019C6  C0FC 0006                954         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000019CA  4EB1 0000                955         JSR     (A1, D0) *JMP To index A1 + D0
000019CE  43F9 00001DE8            956         LEA      INDR_RIGHT, A1
000019D4  103C 000E                957         MOVE.B   #14, D0
000019D8  4E4F                     958         TRAP     #15
000019DA  4E75                     959         RTS      * Goes Back to DestEAFinder
000019DC                           960         
000019DC                           961  JMPTO_SRC_IMMEDIATE:
000019DC  B03C 0000                962         CMP.B    #%000, D0
000019E0  6700 002E                963         BEQ      Address_W
000019E4  B03C 0001                964         CMP.B    #%001, D0
000019E8  6700 0044                965         BEQ      Address_L
000019EC  B03C 0004                966         CMP.B    #%100, D0
000019F0  6700 005A                967         BEQ      Address_Immediate
000019F4  4EF9 00001C18            968         JMP      PRINTINVALIDEA
000019FA                           969  *===================================  
000019FA                           970  * Same as SRC but without Immediate address     
000019FA                           971  JMPTO_DEST_IMMEDIATE:
000019FA  B03C 0000                972         CMP.B    #%000, D0
000019FE  6700 0010                973         BEQ      Address_W
00001A02  B03C 0001                974         CMP.B    #%001, D0
00001A06  6700 0026                975         BEQ      Address_L
00001A0A  4EF9 00001C18            976         JMP      PRINTINVALIDEA
00001A10                           977         
00001A10                           978  Address_W:
00001A10  43F9 00001DEE            979          LEA     DOLLAR_SIGN, A1
00001A16  103C 000E                980          MOVE.B  #14, D0
00001A1A  4E4F                     981          TRAP    #15
00001A1C  4241                     982          CLR     D1
00001A1E  4240                     983          CLR     D0
00001A20  321E                     984          MOVE.W  (A6)+, D1
00001A22  143C 0010                985          MOVE.B  #16, D2
00001A26  103C 000F                986          MOVE.B  #15, D0
00001A2A  4E4F                     987          TRAP    #15 
00001A2C  4E75                     988          RTS 
00001A2E                           989  
00001A2E                           990  Address_L
00001A2E  43F9 00001DEE            991          LEA     DOLLAR_SIGN, A1
00001A34  103C 000E                992          MOVE.B  #14, D0
00001A38  4E4F                     993          TRAP    #15
00001A3A  4241                     994          CLR     D1
00001A3C  4240                     995          CLR     D0
00001A3E  221E                     996          MOVE.L  (A6)+, D1
00001A40  143C 0010                997          MOVE.B  #16, D2
00001A44  103C 000F                998          MOVE.B  #15, D0
00001A48  4E4F                     999          TRAP    #15
00001A4A  4E75                    1000          RTS  
00001A4C                          1001          
00001A4C                          1002  Address_Immediate:
00001A4C  43F9 00001DF0           1003          LEA     POUND_SIGN, A1
00001A52  103C 000E               1004          MOVE.B  #14, D0
00001A56  4E4F                    1005          TRAP    #15
00001A58  43F9 00001DEE           1006          LEA     DOLLAR_SIGN, A1
00001A5E  103C 000E               1007          MOVE.B  #14, D0
00001A62  4E4F                    1008          TRAP    #15
00001A64  0C39 0001 00001E1E      1009          CMP.B   #%01, OpCodeSize *01 is used to mark invalid immediate for example ROR, ROL
00001A6C  6700 01AA               1010          BEQ     PRINTINVALIDEA
00001A70  0C39 0000 00001E1E      1011          CMP.B   #%00, OpCodeSize
00001A78  6700 001A               1012          BEQ     Immediate_B
00001A7C  0C39 0003 00001E1E      1013          CMP.B   #%11, OpCodeSize
00001A84  6700 001C               1014          BEQ     Immediate_W
00001A88  0C39 0002 00001E1E      1015          CMP.B   #%10, OpCOdeSize
00001A90  6700 001E               1016          BEQ     Immediate_L
00001A94                          1017          
00001A94                          1018  Immediate_B:
00001A94  121E                    1019          MOVE.B  (A6)+, D1
00001A96  143C 0010               1020          MOVE.B  #16, D2
00001A9A  103C 000F               1021          MOVE.B  #15, D0
00001A9E  4E4F                    1022          TRAP    #15
00001AA0  4E75                    1023          RTS
00001AA2                          1024          
00001AA2                          1025  Immediate_W:
00001AA2  321E                    1026          MOVE.W  (A6)+, D1
00001AA4  143C 0010               1027          MOVE.B  #16, D2
00001AA8  103C 000F               1028          MOVE.B  #15, D0
00001AAC  4E4F                    1029          TRAP    #15
00001AAE  4E75                    1030          RTS
00001AB0                          1031          
00001AB0                          1032  Immediate_L:
00001AB0  221E                    1033          MOVE.L  (A6)+, D1
00001AB2  143C 0010               1034          MOVE.B  #16, D2
00001AB6  103C 000F               1035          MOVE.B  #15, D0
00001ABA  4E4F                    1036          TRAP    #15
00001ABC  4E75                    1037          RTS
00001ABE                          1038  
00001ABE                          1039          
00001ABE                          1040  
00001ABE                          1041  *=================================================================
00001ABE                          1042  *---------Data Register Table used for printing out Registers----
00001ABE                          1043  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
00001ABE                          1044  DataRegTable
00001ABE  4EF9 00001B1E           1045          JMP REG_D0
00001AC4  4EF9 00001B32           1046          JMP REG_D1
00001ACA  4EF9 00001B40           1047          JMP REG_D2
00001AD0  4EF9 00001B4E           1048          JMP REG_D3
00001AD6  4EF9 00001B5C           1049          JMP REG_D4
00001ADC  4EF9 00001B6A           1050          JMP REG_D5
00001AE2  4EF9 00001B78           1051          JMP REG_D6
00001AE8  4EF9 00001B86           1052          JMP REG_D7
00001AEE                          1053  
00001AEE                          1054  AddrRegTable:
00001AEE                          1055          
00001AEE  4EF9 00001B94           1056          JMP REG_A0
00001AF4  4EF9 00001BA8           1057          JMP REG_A1
00001AFA  4EF9 00001BB6           1058          JMP REG_A2
00001B00  4EF9 00001BC4           1059          JMP REG_A3
00001B06  4EF9 00001BD2           1060          JMP REG_A4
00001B0C  4EF9 00001BE0           1061          JMP REG_A5
00001B12  4EF9 00001BEE           1062          JMP REG_A6
00001B18  4EF9 00001BFC           1063          JMP REG_A7
00001B1E                          1064  
00001B1E                          1065  * Data Registers Printing        
00001B1E                          1066  REG_D0:
00001B1E  227C 00000000           1067          MOVEA.L #$0, A1
00001B24  43F9 00001DB6           1068          LEA     DREG0, A1
00001B2A  103C 000E               1069          MOVE.B  #14, D0
00001B2E  4E4F                    1070          TRAP    #15
00001B30  4E75                    1071          RTS
00001B32                          1072          
00001B32                          1073  REG_D1:
00001B32  43F9 00001DB9           1074          LEA     DREG1, A1
00001B38  103C 000E               1075          MOVE.B  #14, D0
00001B3C  4E4F                    1076          TRAP    #15
00001B3E  4E75                    1077          RTS
00001B40                          1078  REG_D2:
00001B40  43F9 00001DBC           1079          LEA     DREG2, A1
00001B46  103C 000E               1080          MOVE.B  #14, D0
00001B4A  4E4F                    1081          TRAP    #15
00001B4C  4E75                    1082          RTS
00001B4E                          1083  REG_D3:
00001B4E  43F9 00001DBF           1084          LEA     DREG3, A1
00001B54  103C 000E               1085          MOVE.B  #14, D0
00001B58  4E4F                    1086          TRAP    #15
00001B5A  4E75                    1087          RTS
00001B5C                          1088  REG_D4:
00001B5C  43F9 00001DC2           1089          LEA     DREG4, A1
00001B62  103C 000E               1090          MOVE.B  #14, D0
00001B66  4E4F                    1091          TRAP    #15
00001B68  4E75                    1092          RTS
00001B6A                          1093  REG_D5:
00001B6A  43F9 00001DC5           1094          LEA     DREG5, A1
00001B70  103C 000E               1095          MOVE.B  #14, D0
00001B74  4E4F                    1096          TRAP    #15
00001B76  4E75                    1097          RTS
00001B78                          1098  REG_D6:
00001B78  43F9 00001DC8           1099          LEA     DREG6, A1
00001B7E  103C 000E               1100          MOVE.B  #14, D0
00001B82  4E4F                    1101          TRAP    #15
00001B84  4E75                    1102          RTS
00001B86                          1103  REG_D7:
00001B86  43F9 00001DCB           1104          LEA     DREG7, A1
00001B8C  103C 000E               1105          MOVE.B  #14, D0
00001B90  4E4F                    1106          TRAP    #15
00001B92  4E75                    1107          RTS
00001B94                          1108          
00001B94                          1109  *--------------------Addr Reigster printing ------------------------*        
00001B94                          1110  REG_A0:
00001B94  227C 00000000           1111          MOVEA.L #$0, A1
00001B9A  43F9 00001DCE           1112          LEA     AREG0, A1
00001BA0  103C 000E               1113          MOVE.B  #14, D0
00001BA4  4E4F                    1114          TRAP    #15
00001BA6  4E75                    1115          RTS
00001BA8                          1116          
00001BA8                          1117  REG_A1:
00001BA8  43F9 00001DD1           1118          LEA     AREG1, A1
00001BAE  103C 000E               1119          MOVE.B  #14, D0
00001BB2  4E4F                    1120          TRAP    #15
00001BB4  4E75                    1121          RTS
00001BB6                          1122  REG_A2:
00001BB6  43F9 00001DD4           1123          LEA     AREG2, A1
00001BBC  103C 000E               1124          MOVE.B  #14, D0
00001BC0  4E4F                    1125          TRAP    #15
00001BC2  4E75                    1126          RTS
00001BC4                          1127  REG_A3:
00001BC4  43F9 00001DD7           1128          LEA     AREG3, A1
00001BCA  103C 000E               1129          MOVE.B  #14, D0
00001BCE  4E4F                    1130          TRAP    #15
00001BD0  4E75                    1131          RTS
00001BD2                          1132  REG_A4:
00001BD2  43F9 00001DDA           1133          LEA     AREG4, A1
00001BD8  103C 000E               1134          MOVE.B  #14, D0
00001BDC  4E4F                    1135          TRAP    #15
00001BDE  4E75                    1136          RTS
00001BE0                          1137  REG_A5:
00001BE0  43F9 00001DDD           1138          LEA     AREG5, A1
00001BE6  103C 000E               1139          MOVE.B  #14, D0
00001BEA  4E4F                    1140          TRAP    #15
00001BEC  4E75                    1141          RTS
00001BEE                          1142  REG_A6:
00001BEE  43F9 00001DE0           1143          LEA     AREG6, A1
00001BF4  103C 000E               1144          MOVE.B  #14, D0
00001BF8  4E4F                    1145          TRAP    #15
00001BFA  4E75                    1146          RTS
00001BFC                          1147  REG_A7:
00001BFC  43F9 00001DE3           1148          LEA     AREG7, A1
00001C02  103C 000E               1149          MOVE.B  #14, D0
00001C06  4E4F                    1150          TRAP    #15
00001C08  4E75                    1151          RTS
00001C0A                          1152          
00001C0A                          1153  *====================================================PRinting/ ERROR method comes down here=========================================
00001C0A                          1154  PRINTCOMMA: * Prints comma between two operrands
00001C0A  43F9 00001D81           1155          LEA     COMMA, A1
00001C10  103C 000E               1156          MOVE.B  #14, D0
00001C14  4E4F                    1157          TRAP    #15
00001C16  4E75                    1158          RTS
00001C18                          1159          
00001C18                          1160  PrintInvalidEA:
00001C18  43F9 00001CDE           1161          LEA     Invalid_EA_Addr, A1
00001C1E  103C 000E               1162          MOVE.B  #14, D0
00001C22  4E4F                    1163          TRAP    #15
00001C24  4EF8 10F2               1164          JMP     AddrLoop
00001C28                          1165          
00001C28                          1166  PrintInvalidSUB:
00001C28  43F9 00001CF4           1167          LEA     Invalid_EA_SUB, A1
00001C2E  103C 000E               1168          MOVE.B  #14, D0
00001C32  4E4F                    1169          TRAP    #15
00001C34  4EF8 10F2               1170          JMP     AddrLoop
00001C38                          1171          
00001C38                          1172  PrintInvalidAddress:
00001C38  43F9 00001D12           1173          LEA     Invalid_Address, A1
00001C3E  103C 000E               1174          MOVE.B  #14, D0
00001C42  4E4F                    1175          TRAP    #15
00001C44  4EF8 1006               1176          JMP     GETINPUT
00001C48                          1177          
00001C48                          1178  PrintDATA:
00001C48  43F9 00001DAF           1179          LEA     DATA, A1
00001C4E  103C 000E               1180          MOVE.B  #14, D0
00001C52  4E4F                    1181          TRAP    #15
00001C54  3202                    1182          MOVE.W  D2, D1
00001C56  143C 0010               1183          MOVE.B  #16, D2
00001C5A  103C 000F               1184          MOVE.B  #15, D0
00001C5E  4E4F                    1185          TRAP    #15
00001C60  6000 F490               1186          BRA     AddrLoop
00001C64                          1187           
00001C64                          1188  * Clear all registers    
00001C64                          1189  CLRREG:
00001C64  7000                    1190      MOVE.L  #0, D0
00001C66  7200                    1191      MOVE.L  #0, D1
00001C68  7400                    1192      MOVE.L  #0, D2
00001C6A  7600                    1193      MOVE.L  #0, D3
00001C6C  7800                    1194      MOVE.L  #0, D4
00001C6E  7A00                    1195      MOVE.L  #0, D5
00001C70  7C00                    1196      MOVE.L  #0, D6
00001C72  7E00                    1197      MOVE.L  #0, D7
00001C74  4E75                    1198      RTS
00001C76                          1199      
00001C76                          1200  CLRAREG:
00001C76  207C 00000000           1201      MOVE.L  #0, A0
00001C7C  227C 00000000           1202      MOVE.L  #0, A1
00001C82  247C 00000000           1203      MOVE.L  #0, A2
00001C88  267C 00000000           1204      MOVE.L  #0, A3
00001C8E  287C 00000000           1205      MOVE.L  #0, A4
00001C94  2A7C 00000000           1206      MOVE.L  #0, A5
00001C9A  4E75                    1207      RTS
00001C9C                          1208  
00001C9C                          1209      
00001C9C                          1210      
00001C9C                          1211          
00001C9C                          1212  * Put program code here
00001C9C                          1213  
00001C9C  FFFF FFFF               1214      SIMHALT             ; halt simulator
00001CA0                          1215  
00001CA0                          1216  * Put variables and constants here
00001CA0  =0000000D               1217  CR  EQU $0D
00001CA0  =0000000A               1218  LF  EQU $0A
00001CA0= 50 6C 65 61 73 65 ...   1219  WELCOME     DC.B    'Please enter starting address', CR, LF, 0
00001CC0= 50 6C 65 61 73 65 ...   1220  WELCOME2    DC.B    'Please enter ending address', CR, LF, 0
00001CDE= 49 6E 76 61 6C 69 ...   1221  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
00001CF4= 49 6E 76 61 6C 69 ...   1222  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00001D12= 47 69 76 65 6E 20 ...   1223  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00001D2D= 43 6F 6E 74 69 6E ...   1224  Continue_Program    DC.B    'Continue Program? Y/N', CR, LF, 0
00001D45= 43 6F 6E 74 69 6E ...   1225  Continue_Screen DC.B    'Continue Screen? Y/N', CR, LF, 0
00001D5C= 0D 0A 00                1226  Print_NextLine  DC.B    '', CR, LF, 0
00001D5F= 54 68 61 6E 6B 20 ...   1227  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
00001D81                          1228  
00001D81= 2C 20 00                1229  COMMA       DC.B    ', ', 0
00001D84= 20 20 20 00             1230  SPACER      DC.B    '   ', 0
00001D88                          1231  *DATASIZE
00001D88= 2E 42 20 00             1232  SIZE_BYTE       DC.B    '.B ', 0
00001D8C= 2E 57 20 00             1233  SIZE_WORD       DC.B    '.W ', 0
00001D90= 2E 4C 20 00             1234  SIZE_LONG       DC.B    '.L ', 0
00001D94                          1235  
00001D94                          1236  *MOVE OPCODES
00001D94= 4D 4F 56 45 00          1237  MOVE_PRINT  DC.B    'MOVE', 0
00001D99= 4D 4F 56 45 2E 42 ...   1238  MOVEB       DC.B    'MOVE.B ', 0
00001DA1= 2E 42 20 00             1239  SIZE_B       DC.B    '.B ', 0
00001DA5= 2E 57 20 00             1240  MOVEW       DC.B    '.W ', 0
00001DA9= 2E 4C 20 00             1241  MOVEL       DC.B    '.L ', 0
00001DAD= 41 00                   1242  MOVEA       DC.B    'A', 0
00001DAF= 44 41 54 41 3A 20 00    1243  DATA        DC.B    'DATA: ', 0
00001DB6                          1244  
00001DB6                          1245  
00001DB6                          1246  *DATA REGISTERS PRINTOUT
00001DB6= 44 30 00                1247  DREG0       DC.B    'D0', 0
00001DB9= 44 31 00                1248  DREG1       DC.B    'D1', 0
00001DBC= 44 32 00                1249  DREG2       DC.B    'D2', 0
00001DBF= 44 33 00                1250  DREG3       DC.B    'D3', 0
00001DC2= 44 34 00                1251  DREG4       DC.B    'D4', 0
00001DC5= 44 35 00                1252  DREG5       DC.B    'D5', 0
00001DC8= 44 36 00                1253  DREG6       DC.B    'D6', 0
00001DCB= 44 37 00                1254  DREG7       DC.B    'D7', 0 
00001DCE                          1255  
00001DCE                          1256  *ADDR REGISTERS PRINTOUT
00001DCE= 41 30 00                1257  AREG0       DC.B    'A0', 0
00001DD1= 41 31 00                1258  AREG1       DC.B    'A1', 0
00001DD4= 41 32 00                1259  AREG2       DC.B    'A2', 0
00001DD7= 41 33 00                1260  AREG3       DC.B    'A3', 0
00001DDA= 41 34 00                1261  AREG4       DC.B    'A4', 0
00001DDD= 41 35 00                1262  AREG5       DC.B    'A5', 0
00001DE0= 41 36 00                1263  AREG6       DC.B    'A6', 0
00001DE3= 41 37 00                1264  AREG7       DC.B    'A7', 0 
00001DE6                          1265  
00001DE6                          1266  *INDR_ADDR REGISTERS PRINTOUT
00001DE6= 28 00                   1267  INDR_LEFT   DC.B    '(', 0
00001DE8= 29 00                   1268  INDR_RIGHT  DC.B    ')', 0
00001DEA= 2B 00                   1269  POST_INCRE   DC.B    '+', 0
00001DEC= 2D 00                   1270  PRE_DECRE   DC.B    '-', 0
00001DEE= 24 00                   1271  DOLLAR_SIGN DC.B    '$', 0
00001DF0= 23 00                   1272  POUND_SIGN  DC.B    '#', 0
00001DF2                          1273  
00001DF2                          1274  *SUB
00001DF2= 53 55 42 00             1275  SUBTRACT    DC.B    'SUB', 0
00001DF6= 41 44 44 00             1276  ADDITION    DC.B    'ADD', 0
00001DFA= 41 4E 44 00             1277  AND         DC.B    'AND', 0
00001DFE= 4F 52 00                1278  OR          DC.B    'OR', 0
00001E01= 4E 4F 54 00             1279  NOT_OP      DC.B    'NOT', 0
00001E05= 52 4F 4C 00             1280  ROL         DC.B    'ROL', 0
00001E09= 52 4F 52 00             1281  ROR         DC.B    'ROR', 0
00001E0D                          1282  
00001E0E= 00000001                1283  addrStart   DC.L    1   // Starting address
00001E12= 00000001                1284  addrEnd     DC.L    1   // ending address
00001E16= 00000001                1285  OpCodeStorage DC.L    1
00001E1A= 00000001                1286  ScreenCounter   DC.L    1
00001E1E= 00000001                1287  OpCodeSize  DC.L    1
00001E22                          1288      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   11E2
ADDITION            1DF6
ADDREND             1E12
ADDRESS_IMMEDIATE   1A4C
ADDRESS_L           1A2E
ADDRESS_W           1A10
ADDRLOOP            10F2
ADDRREGTABLE        1AEE
ADDRSTART           1E0E
ADDVAL              11DC
AND                 1DFA
AREG0               1DCE
AREG1               1DD1
AREG2               1DD4
AREG3               1DD7
AREG4               1DDA
AREG5               1DDD
AREG6               1DE0
AREG7               1DE3
B                   11E8
C                   11EE
CHAR                11AC
CHECKRANGE          1086
CHECK_CONT          112C
CHECK_MOVEA         17C8
CLRAREG             1C76
CLRREG              1C64
COMMA               1D81
CONTINUE_PROGRAM    1D2D
CONTINUE_SCREEN     1D45
CONVERT             1192
CR                  D
D                   11F4
DATA                1DAF
DATAREGTABLE        1ABE
DESTEACHECKER       184E
DESTEAFINDER        187C
DOLLAR_SIGN         1DEE
DREG0               1DB6
DREG1               1DB9
DREG2               1DBC
DREG3               1DBF
DREG4               1DC2
DREG5               1DC5
DREG6               1DC8
DREG7               1DCB
E                   11FA
EA                  17FA
EACHECKER           1818
END                 10E0
F                   1200
GETINPUT            1006
IMMEDIATE_B         1A94
IMMEDIATE_L         1AB0
IMMEDIATE_W         1AA2
INDR_LEFT           1DE6
INDR_RIGHT          1DE8
INVALID_ADDRESS     1D12
INVALID_EA_ADDR     1CDE
INVALID_EA_SUB      1CF4
JMPTABLE            1252
JMPTODESTREG        18AC
JMPTOSRCREG         189C
JMPTO_DEST_ADDR_REG  18CC
JMPTO_DEST_IMMEDIATE  19FA
JMPTO_DEST_INDR_ADDR_REG  1918
JMPTO_SRC_ADDR_REG  18BC
JMPTO_SRC_IMMEDIATE  19DC
JMPTO_SRC_INDR_ADDR_REG  18DC
LF                  A
LOOP                1188
LOWERLIMIT          3000
MEMORY_ALTERABLE_CHECK  1750
MOVEA               1DAD
MOVEB               1D99
MOVEL               1DA9
MOVEW               1DA5
MOVE_PRINT          1D94
NEXT_SCREEN         1156
NOT_JMPTABLE        1354
NOT_OP              1E01
NOT_SIZE00          136C
NOT_SIZE01          138E
NOT_SIZE10          13A8
NOT_SIZE11          13C2
OP0000              12AC
OP0001              12AC
OP0010              12CA
OP0011              12FA
OP0100              1322
OP0101              13C6
OP0110              13C6
OP0111              13C6
OP1000              1402
OP1001              13C6
OP1010              1446
OP1011              1446
OP1100              1446
OP1101              1482
OP1110              14BE
OPCODE              1206
OPCODESIZE          1E1E
OPCODESTORAGE       1E16
OPMODE000           166E
OPMODE001           1688
OPMODE010           169A
OPMODE011           16AC
OPMODE100           16DA
OPMODE101           16F2
OPMODE110           170A
OPMODE111           1722
OR                  1DFE
POST_INCRE          1DEA
POST_INCREMENT_DEST  1998
POST_INCREMENT_SRC  1954
POUND_SIGN          1DF0
PRE_DECRE           1DEC
PRE_DECREMENT_DEST  19A6
PRE_DECREMENT_SRC   1962
PRINT8              162E
PRINTA              17EA
PRINTCOMMA          1C0A
PRINTDATA           1C48
PRINTINVALIDADDRESS  1C38
PRINTINVALIDEA      1C18
PRINTINVALIDSUB     1C28
PRINT_NEXTLINE      1D5C
REG_A0              1B94
REG_A1              1BA8
REG_A2              1BB6
REG_A3              1BC4
REG_A4              1BD2
REG_A5              1BE0
REG_A6              1BEE
REG_A7              1BFC
REG_D0              1B1E
REG_D1              1B32
REG_D2              1B40
REG_D3              1B4E
REG_D4              1B5C
REG_D5              1B6A
REG_D6              1B78
REG_D7              1B86
ROL                 1E05
ROLTEST             6000
ROR                 1E09
ROTATETABLE         14F6
ROTATE_B            1546
ROTATE_EA           159A
ROTATE_EACHECKER    15B8
ROTATE_L            157E
ROTATE_LEFT         1514
ROTATE_PRINT_IMMEDIATE  15F8
ROTATE_PRINT_IMMEDIATECONT  1618
ROTATE_PRINT_REGISTER  15DE
ROTATE_RIGHT        1502
ROTATE_SIZE_TABLE   1526
ROTATE_W            1562
SCREENCOUNTER       1E1A
SIZE_B              1DA1
SIZE_BYTE           1D88
SIZE_LONG           1D90
SIZE_WORD           1D8C
SPACER              1D84
SPECIALTEST         5000
SPECIAL_OPMODE_USED  16BC
SPECIAL_OPMODE_USED2  1732
START               1000
SUBTABLE            163E
SUBTRACT            1DF2
SUB_OPMODE_ADDA     17A6
SUB_OPMODE_FIRST    1762
SUB_OPMODE_SECOND   1780
TESTER              9000
TY_MESSAGE          1D5F
UPPERLIMIT          FFFFFE
WELCOME             1CA0
WELCOME2            1CC0
YESNOSTORAGE        50
