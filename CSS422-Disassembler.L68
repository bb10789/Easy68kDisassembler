00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/29/2020 5:57:14 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *=================================================================
00001000                             9  *                     THIS IS OUR MAIN METHOD
00001000                            10  *               Don't throw random stuff in it, keep it to a minimum
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000  4EB9 00001006             13          JSR     GETINPUT
00001006                            14  *=================================================================
00001006                            15  *---------------Get starting and ending addresss------- Kelvin
00001006                            16  *--------------- PRE: will be using D0, D5, A1
00001006                            17  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            18  GETINPUT:
00001006  43F9 00001482             19          LEA     WELCOME, A1
0000100C  103C 000E                 20          MOVE.B  #14,    D0
00001010  4E4F                      21          TRAP    #15
00001012  327C 0000                 22          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001016  103C 0002                 23          MOVE.B  #2,D0
0000101A  4E4F                      24          TRAP    #15
0000101C  2801                      25          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
0000101E  7000                      26          MOVE.L  #$0, d0  // intitiate counter
00001020  4EB9 00001072             27          JSR     LOOP    // Convert starting address into hex
00001026  23C5 0000151A             28          MOVE.L  D5, addrStart
0000102C  43F9 000014A2             29          LEA     WELCOME2, A1
00001032  103C 000E                 30          MOVE.B  #14,    D0
00001036  4E4F                      31          TRAP    #15
00001038  327C 0000                 32          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000103C  103C 0002                 33          MOVE.B  #2,D0
00001040  4E4F                      34          TRAP    #15
00001042  23C5 0000151E             35          MOVE.L  D5, addrEnd
00001048  4245                      36          CLR     D5       // Clear D5 for exit address
0000104A  1801                      37          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000104C  103C 0000                 38          MOVE.B  #$0, d0  // intitiate counter
00001050  4EB9 00001072             39          JSR     LOOP    // Convert Ending address int Hex
00001056                            40          *MOVE.L  -(A1), -(A2)   // Testing
00001056  31FC 2521 6000            41          MOVE.W  #$2521, $6000 // MOVE.L D0, D1, used for testing only
0000105C  45F8 6000                 42          LEA     $6000, A2 //testing
00001060  4EB9 000010F0             43          JSR     OPCODE
00001066  4EF9 0000106C             44          JMP     END
0000106C                            45  END:
0000106C  103C 0009                 46          MOVE.B  #9, D0
00001070  4E4F                      47          TRAP    #15
00001072                            48  LOOP
00001072  B880                      49          CMP.L   D0, D4  // Loop until length of word reached
00001074  6E00 0006                 50          BGT     CONVERT
00001078  5480                      51          ADD.L   #$2, D0 
0000107A  4E75                      52          RTS 
0000107C                            53  
0000107C                            54  *=================================================================
0000107C                            55  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000107C                            56  *PRE      D4 must contain input length, d0 must be 0
0000107C                            57  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000107C                            58  CONVERT:
0000107C  5280                      59          ADDQ.L  #$1, D0 // increment counter
0000107E  1211                      60          move.b  (A1),D1    // Get next bit from Input
00001080  5289                      61          adda.L  #1, A1      // Increment Input
00001082  0401 0030                 62          sub.b   #$30,D1     //
00001086  B23C 0010                 63          cmp.b   #$10,D1   // Check if value is larger than 10
0000108A  6E00 000A                 64          bgt     CHAR      // Find Hex
0000108E  1401                      65          move.b  D1, D2    // IF it is less than 10
00001090  4EF9 000010C6             66          JMP     ADDVAL        
00001096                            67  CHAR:
00001096  B23C 0011                 68          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
0000109A  6700 0030                 69          BEQ     A
0000109E  B23C 0012                 70          CMP.B   #$12, D1
000010A2  6700 002E                 71          BEQ     B
000010A6  B23C 0013                 72          CMP.B   #$13, D1
000010AA  6700 002C                 73          BEQ     C
000010AE  B23C 0014                 74          CMP.B   #$14, D1
000010B2  6700 002A                 75          BEQ     D
000010B6  B23C 0015                 76          CMP.B   #$15, D1
000010BA  6700 0028                 77          BEQ     E
000010BE  B23C 0016                 78          CMP.B   #$16, D1
000010C2  6700 0026                 79          BEQ     F
000010C6                            80  
000010C6                            81  ADDVAL:
000010C6  E98D                      82          lsl.l    #$4, D5 // Shift based on position
000010C8  DA82                      83          add.l    D2, D5 //Add value into Input
000010CA  60A6                      84          BRA      LOOP
000010CC                            85      
000010CC                            86  A:
000010CC  740A                      87          MOVE.L  #$A, D2 
000010CE  4EF8 10C6                 88          jmp ADDVAL
000010D2                            89  B:
000010D2  740B                      90          MOVE.L  #$B, D2
000010D4  4EF8 10C6                 91          jmp ADDVAL
000010D8                            92  C:
000010D8  740C                      93          MOVE.L  #$C, D2
000010DA  4EF8 10C6                 94          jmp ADDVAL
000010DE                            95  D:
000010DE  740D                      96          MOVE.L  #$D, D2
000010E0  4EF8 10C6                 97          jmp ADDVAL
000010E4                            98  E:
000010E4  740E                      99          MOVE.L  #$E, D2
000010E6  4EF8 10C6                100          jmp ADDVAL
000010EA                           101  F:
000010EA  740F                     102          MOVE.L  #$F, D2
000010EC  4EF8 10C6                103          jmp ADDVAL
000010F0                           104          
000010F0                           105  *=======================================================================
000010F0                           106  *---------Find the first 4 of instruction and determines the instruction
000010F0                           107  OPCODE:
000010F0  4EB9 00001470            108          JSR     CLRREG
000010F6  3212                     109          MOVE.W  (A2), D1
000010F8  2401                     110          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
000010FA  E849                     111          LSR.W   #4, D1
000010FC  E849                     112          LSR.W   #4, D1
000010FE  E849                     113          LSR.W   #4, D1  //Right Shift 3 times
00001100  1001                     114          MOVE.B  D1, D0  // OPCODE FOUND
00001102  C0FC 0006                115          MULU    #6, D0
00001106  45F9 00001110            116          LEA     JMPTABLE, A2
0000110C  4EF2 0000                117          JMP     (A2, D0)
00001110                           118          
00001110                           119  *========================================================================
00001110                           120  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001110                           121  *------- Add your instructions here
00001110                           122  JMPTABLE
00001110  4EF9 00001122            123          JMP     OP0000
00001116  4EF9 00001122            124          JMP     OP0001
0000111C  4EF9 00001122            125          JMP     OP0010 
00001122                           126           
00001122                           127  OP0000:
00001122                           128  OP0001:
00001122                           129  * -> MOVE.L
00001122                           130  * Printed using MOVEL String as a variable on the very bottom
00001122                           131  OP0010:
00001122  43F9 000014D9            132          LEA     MOVEL, A1
00001128  103C 000E                133          MOVE.B  #14, D0
0000112C  4E4F                     134          TRAP    #15
0000112E  6000 0002                135          BRA     EA
00001132                           136          
00001132                           137          
00001132                           138          
00001132                           139  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00001132                           140  *=================================================================
00001132                           141  *-----------EA-- Calculate EA used for Data Registers
00001132                           142  *----------Pre: D2, D0, D1 must be clear
00001132                           143  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
00001132                           144  EA:
00001132  E18A                     145          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001134  E18A                     146          LSL.L   #8, D2
00001136  E98A                     147          LSL.L   #4, D2
00001138  E08A                     148          LSR.L   #8, D2
0000113A  E08A                     149          LSR.L   #8, D2
0000113C  E88A                     150          LSR.L   #4, D2 // 12 bits of opperand found
0000113E  1002                     151          MOVE.B  D2, D0 Source Data Register
00001140  EB08                     152          LSL.B   #5, D0
00001142  EA08                     153          LSR.B   #5, D0
00001144  1202                     154          MOVE.B  D2, D1 *Source Data Mode
00001146  E509                     155          LSL.B   #2, D1
00001148  EA09                     156          LSR.B   #5, D1
0000114A                           157  *=================================================
0000114A                           158  *-----------EA CHECKER------Continues from EA
0000114A                           159  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
0000114A                           160  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
0000114A                           161  EACHECKER: 
0000114A  B23C 0000                162          CMP.B   #%0000, D1
0000114E  6700 006E                163          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001152  B23C 0001                164          CMP.B   #%0001, D1
00001156  6700 0086                165          BEQ     JMPTO_SRC_ADDR_REG
0000115A  B23C 0002                166          CMP.B   #%0010, D1
0000115E  6700 009E                167          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001162  B23C 0003                168          CMP.B   #%0011, D1
00001166  6700 0096                169          BEQ     JMPTO_SRC_INDR_ADDR_REG
0000116A  B23C 0004                170          CMP.B   #%0100, D1
0000116E  6700 008E                171          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001172  4EF9 00001460            172          JMP     PRINTINVALIDEA
00001178                           173          
00001178                           174          
00001178                           175  DESTEACHECKER:
00001178  B23C 0000                176          CMP.B   #%0000, D1
0000117C  6700 0050                177          BEQ     JMPTODestREG *JUMPS TO Source D registers
00001180  B23C 0002                178          CMP.B   #%0010, D1
00001184  6700 00B6                179          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001188  B23C 0003                180          CMP.B   #%0011, D1
0000118C  6700 00AE                181          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001190  B23C 0004                182          CMP.B   #%0100, D1
00001194  6700 00A6                183          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001198  4EF9 00001460            184          JMP     PRINTINVALIDEA
0000119E                           185          
0000119E                           186          
0000119E                           187  DestEAFinder:
0000119E  4EB9 00001452            188          JSR     PRINTCOMMA  * Prints comma between two operrands
000011A4  EC8A                     189          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
000011A6  4241                     190          CLR     D1     * Clear D1 and D0 for opperand mode and register
000011A8  4240                     191          CLR     D0
000011AA  1202                     192          MOVE.B  D2, D1 * Prepare D1 for Mode
000011AC  EB09                     193          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
000011AE  EA09                     194          LSR.B   #5, D1
000011B0  1002                     195          MOVE.B  D2, D0  *Prepare D0 for Register
000011B2  E508                     196          LSL.B   #2, D0
000011B4  EA08                     197          LSR.B   #5, D0
000011B6  4EB8 1178                198          JSR     DESTEACHECKER
000011BA  4EF8 106C                199          JMP     END     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
000011BE                           200  
000011BE                           201          
000011BE                           202  *===================================================
000011BE                           203  *-------------Data Register checker------------------        
000011BE                           204  JMPTOSRCREG:
000011BE  43F9 00001306            205          LEA     DATAREGTABLE, A1
000011C4  C0FC 0006                206          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000011C8  4EB1 0000                207          JSR     (A1, D0) *JMP To index A1 + D0
000011CC                           208          * EA CONTINUES HERE
000011CC  60D0                     209          BRA     DESTEAFinder
000011CE                           210  JMPToDestReg: *PRINT OUT DEST Registers
000011CE  43F9 00001306            211          LEA     DATAREGTABLE, A1
000011D4  C0FC 0006                212          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000011D8  4EB1 0000                213          JSR     (A1, D0) *JMP to A1 + D0
000011DC  4E75                     214          RTS
000011DE                           215          
000011DE                           216  
000011DE                           217  *===================================================
000011DE                           218  *-------------Address Register checker------------------             
000011DE                           219  JMPTO_SRC_ADDR_REG:
000011DE  43F9 00001336            220          LEA     AddrREGTABLE, A1
000011E4  C0FC 0006                221          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000011E8  4EB1 0000                222          JSR     (A1, D0) *JMP To index A1 + D0
000011EC                           223          * EA CONTINUES HERE
000011EC  60B0                     224          BRA     DestEAFinder
000011EE                           225  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
000011EE  43F9 00001336            226          LEA     AddrREGTABLE, A1
000011F4  C0FC 0006                227          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
000011F8  4EB1 0000                228          JSR     (A1, D0) *JMP to A1 + D0
000011FC  4E75                     229          RTS
000011FE                           230          
000011FE                           231  *===================================================
000011FE                           232  *-------------Indirect Address Register checker------------------
000011FE                           233  *Copied from Address Register checker, basically adding parenthesis () around Address register
000011FE                           234  JMPTO_SRC_INDR_ADDR_REG:
000011FE  1600                     235         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
00001200  B23C 0004                236         CMP.B    #%100, D1       * IF IT IS -()
00001204  6700 0084                237         BEQ      PRE_DECREMENT_SRC
00001208  43F9 00001511            238         LEA      INDR_LEFT, A1
0000120E  103C 000E                239         MOVE.B   #14, D0
00001212  4E4F                     240         TRAP     #15
00001214  1003                     241         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001216  43F9 00001336            242         LEA     AddrREGTABLE, A1
0000121C  C0FC 0006                243         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001220  4EB1 0000                244         JSR     (A1, D0) *JMP To index A1 + D0
00001224  43F9 00001513            245         LEA      INDR_RIGHT, A1
0000122A  103C 000E                246         MOVE.B   #14, D0
0000122E  4E4F                     247         TRAP     #15
00001230  B23C 0003                248         CMP.B    #%0011, D1 * IF IT IS ()+
00001234  6700 0044                249         BEQ      POST_INCREMENT_SRC
00001238  6000 FF64                250         BRA      DESTEAFINDER
0000123C                           251         
0000123C                           252  JMPTO_DEST_INDR_ADDR_REG:
0000123C  1600                     253         MOVE.B   D0, D3  *TEMP storage for D0 because it will be used by PRINT
0000123E  B23C 0004                254         CMP.B    #%100, D1
00001242  6700 008C                255         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00001246  43F9 00001511            256         LEA      INDR_LEFT, A1
0000124C  103C 000E                257         MOVE.B   #14, D0
00001250  4E4F                     258         TRAP     #15
00001252  1003                     259         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00001254  43F9 00001336            260         LEA     AddrREGTABLE, A1
0000125A  C0FC 0006                261         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000125E  4EB1 0000                262         JSR     (A1, D0) *JMP To index A1 + D0
00001262  43F9 00001513            263         LEA      INDR_RIGHT, A1
00001268  103C 000E                264         MOVE.B   #14, D0
0000126C  4E4F                     265         TRAP     #15
0000126E  B23C 0003                266         CMP.B    #%0011, D1  // IF IT IS ()+
00001272  6700 004E                267         BEQ      POST_INCREMENT_DEST
00001276  4E4F                     268         TRAP     #15
00001278  4E75                     269         RTS
0000127A                           270         
0000127A                           271  POST_INCREMENT_SRC:
0000127A  43F9 00001515            272         LEA      POST_INCRE, A1
00001280  103C 000E                273         MOVE.B   #14, D0
00001284  4E4F                     274         TRAP     #15
00001286  6000 FF16                275         BRA      DESTEAFINDER
0000128A                           276         
0000128A                           277  PRE_DECREMENT_SRC:
0000128A  43F9 00001517            278         LEA      PRE_DECRE, A1
00001290  103C 000E                279         MOVE.B   #14, D0
00001294  4E4F                     280         TRAP     #15
00001296  43F9 00001511            281         LEA      INDR_LEFT, A1
0000129C  103C 000E                282         MOVE.B   #14, D0
000012A0  4E4F                     283         TRAP     #15
000012A2  1003                     284         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
000012A4  43F9 00001336            285         LEA     AddrREGTABLE, A1
000012AA  C0FC 0006                286         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000012AE  4EB1 0000                287         JSR     (A1, D0) *JMP To index A1 + D0
000012B2  43F9 00001513            288         LEA      INDR_RIGHT, A1
000012B8  103C 000E                289         MOVE.B   #14, D0
000012BC  4E4F                     290         TRAP     #15
000012BE  6000 FEDE                291         BRA      DESTEAFINDER
000012C2                           292  
000012C2                           293  POST_INCREMENT_DEST
000012C2  43F9 00001515            294         LEA      POST_INCRE, A1
000012C8  103C 000E                295         MOVE.B   #14, D0
000012CC  4E4F                     296         TRAP     #15
000012CE  4E75                     297         RTS
000012D0                           298         
000012D0                           299  PRE_DECREMENT_DEST:
000012D0  43F9 00001517            300         LEA      PRE_DECRE, A1
000012D6  103C 000E                301         MOVE.B   #14, D0
000012DA  4E4F                     302         TRAP     #15
000012DC  43F9 00001511            303         LEA      INDR_LEFT, A1
000012E2  103C 000E                304         MOVE.B   #14, D0
000012E6  4E4F                     305         TRAP     #15
000012E8  1003                     306         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
000012EA  43F9 00001336            307         LEA     AddrREGTABLE, A1
000012F0  C0FC 0006                308         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000012F4  4EB1 0000                309         JSR     (A1, D0) *JMP To index A1 + D0
000012F8  43F9 00001513            310         LEA      INDR_RIGHT, A1
000012FE  103C 000E                311         MOVE.B   #14, D0
00001302  4E4F                     312         TRAP     #15
00001304  4E75                     313         RTS
00001306                           314         
00001306                           315  
00001306                           316  
00001306                           317  *=================================================================
00001306                           318  *---------Data Register Table used for printing out Registers----
00001306                           319  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
00001306                           320  DataRegTable
00001306  4EF9 00001366            321          JMP REG_D0
0000130C  4EF9 0000137A            322          JMP REG_D1
00001312  4EF9 00001388            323          JMP REG_D2
00001318  4EF9 00001396            324          JMP REG_D3
0000131E  4EF9 000013A4            325          JMP REG_D4
00001324  4EF9 000013B2            326          JMP REG_D5
0000132A  4EF9 000013C0            327          JMP REG_D6
00001330  4EF9 000013CE            328          JMP REG_D7
00001336                           329  
00001336                           330  AddrRegTable:
00001336                           331          
00001336  4EF9 000013DC            332          JMP REG_A0
0000133C  4EF9 000013F0            333          JMP REG_A1
00001342  4EF9 000013FE            334          JMP REG_A2
00001348  4EF9 0000140C            335          JMP REG_A3
0000134E  4EF9 0000141A            336          JMP REG_A4
00001354  4EF9 00001428            337          JMP REG_A5
0000135A  4EF9 00001436            338          JMP REG_A6
00001360  4EF9 00001444            339          JMP REG_A7
00001366                           340  
00001366                           341  * Data Registers Printing        
00001366                           342  REG_D0:
00001366  227C 00000000            343          MOVEA.L #$0, A1
0000136C  43F9 000014E1            344          LEA     DREG0, A1
00001372  103C 000E                345          MOVE.B  #14, D0
00001376  4E4F                     346          TRAP    #15
00001378  4E75                     347          RTS
0000137A                           348          
0000137A                           349  REG_D1:
0000137A  43F9 000014E4            350          LEA     DREG1, A1
00001380  103C 000E                351          MOVE.B  #14, D0
00001384  4E4F                     352          TRAP    #15
00001386  4E75                     353          RTS
00001388                           354  REG_D2:
00001388  43F9 000014E7            355          LEA     DREG2, A1
0000138E  103C 000E                356          MOVE.B  #14, D0
00001392  4E4F                     357          TRAP    #15
00001394  4E75                     358          RTS
00001396                           359  REG_D3:
00001396  43F9 000014EA            360          LEA     DREG3, A1
0000139C  103C 000E                361          MOVE.B  #14, D0
000013A0  4E4F                     362          TRAP    #15
000013A2  4E75                     363          RTS
000013A4                           364  REG_D4:
000013A4  43F9 000014ED            365          LEA     DREG4, A1
000013AA  103C 000E                366          MOVE.B  #14, D0
000013AE  4E4F                     367          TRAP    #15
000013B0  4E75                     368          RTS
000013B2                           369  REG_D5:
000013B2  43F9 000014F0            370          LEA     DREG5, A1
000013B8  103C 000E                371          MOVE.B  #14, D0
000013BC  4E4F                     372          TRAP    #15
000013BE  4E75                     373          RTS
000013C0                           374  REG_D6:
000013C0  43F9 000014F3            375          LEA     DREG6, A1
000013C6  103C 000E                376          MOVE.B  #14, D0
000013CA  4E4F                     377          TRAP    #15
000013CC  4E75                     378          RTS
000013CE                           379  REG_D7:
000013CE  43F9 000014F6            380          LEA     DREG7, A1
000013D4  103C 000E                381          MOVE.B  #14, D0
000013D8  4E4F                     382          TRAP    #15
000013DA  4E75                     383          RTS
000013DC                           384          
000013DC                           385  *--------------------Addr Reigster printing ------------------------*        
000013DC                           386  REG_A0:
000013DC  227C 00000000            387          MOVEA.L #$0, A1
000013E2  43F9 000014F9            388          LEA     AREG0, A1
000013E8  103C 000E                389          MOVE.B  #14, D0
000013EC  4E4F                     390          TRAP    #15
000013EE  4E75                     391          RTS
000013F0                           392          
000013F0                           393  REG_A1:
000013F0  43F9 000014FC            394          LEA     AREG1, A1
000013F6  103C 000E                395          MOVE.B  #14, D0
000013FA  4E4F                     396          TRAP    #15
000013FC  4E75                     397          RTS
000013FE                           398  REG_A2:
000013FE  43F9 000014FF            399          LEA     AREG2, A1
00001404  103C 000E                400          MOVE.B  #14, D0
00001408  4E4F                     401          TRAP    #15
0000140A  4E75                     402          RTS
0000140C                           403  REG_A3:
0000140C  43F9 00001502            404          LEA     AREG3, A1
00001412  103C 000E                405          MOVE.B  #14, D0
00001416  4E4F                     406          TRAP    #15
00001418  4E75                     407          RTS
0000141A                           408  REG_A4:
0000141A  43F9 00001505            409          LEA     AREG4, A1
00001420  103C 000E                410          MOVE.B  #14, D0
00001424  4E4F                     411          TRAP    #15
00001426  4E75                     412          RTS
00001428                           413  REG_A5:
00001428  43F9 00001508            414          LEA     AREG5, A1
0000142E  103C 000E                415          MOVE.B  #14, D0
00001432  4E4F                     416          TRAP    #15
00001434  4E75                     417          RTS
00001436                           418  REG_A6:
00001436  43F9 0000150B            419          LEA     AREG6, A1
0000143C  103C 000E                420          MOVE.B  #14, D0
00001440  4E4F                     421          TRAP    #15
00001442  4E75                     422          RTS
00001444                           423  REG_A7:
00001444  43F9 0000150E            424          LEA     AREG7, A1
0000144A  103C 000E                425          MOVE.B  #14, D0
0000144E  4E4F                     426          TRAP    #15
00001450  4E75                     427          RTS
00001452                           428          
00001452                           429          
00001452                           430  PRINTCOMMA: * Prints comma between two operrands
00001452  43F9 000014D6            431          LEA     COMMA, A1
00001458  103C 000E                432          MOVE.B  #14, D0
0000145C  4E4F                     433          TRAP    #15
0000145E  4E75                     434          RTS
00001460                           435          
00001460                           436  PrintInvalidEA:
00001460  43F9 000014C0            437          LEA     Invalid_EA_Addr, A1
00001466  103C 000E                438          MOVE.B  #14, D0
0000146A  4E4F                     439          TRAP    #15
0000146C  4EF8 1072                440          JMP     LOOP
00001470                           441          
00001470                           442          
00001470                           443  
00001470                           444          
00001470                           445          
00001470                           446          
00001470                           447           
00001470                           448  * Clear all registers    
00001470                           449  CLRREG:
00001470  4241                     450      CLR D1
00001472  4242                     451      CLR D2
00001474  4243                     452      CLR D3
00001476  4244                     453      CLR D4
00001478  4245                     454      CLR D5
0000147A  4246                     455      CLR D6
0000147C  4E75                     456      RTS
0000147E                           457      
0000147E                           458      
0000147E                           459          
0000147E                           460  * Put program code here
0000147E                           461  
0000147E  FFFF FFFF                462      SIMHALT             ; halt simulator
00001482                           463  
00001482                           464  * Put variables and constants here
00001482  =0000000D                465  CR  EQU $0D
00001482  =0000000A                466  LF  EQU $0A
00001482= 50 6C 65 61 73 65 ...    467  WELCOME     DC.B    'Please enter starting address',CR, LF, 0
000014A2= 50 6C 65 61 73 65 ...    468  WELCOME2    DC.B    'Please enter ending address',CR, LF, 0
000014C0= 49 6E 76 61 6C 69 ...    469  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
000014D6                           470  
000014D6= 2C 20 00                 471  COMMA       DC.B    ', ', 0
000014D9                           472  
000014D9                           473  
000014D9= 4D 4F 56 45 2E 4C ...    474  MOVEL       DC.B    'MOVE.L ', 0
000014E1                           475  
000014E1                           476  
000014E1                           477  *DATA REGISTERS PRINTOUT
000014E1= 44 30 00                 478  DREG0       DC.B    'D0', 0
000014E4= 44 31 00                 479  DREG1       DC.B    'D1', 0
000014E7= 44 32 00                 480  DREG2       DC.B    'D2', 0
000014EA= 44 33 00                 481  DREG3       DC.B    'D3', 0
000014ED= 44 34 00                 482  DREG4       DC.B    'D4', 0
000014F0= 44 35 00                 483  DREG5       DC.B    'D5', 0
000014F3= 44 36 00                 484  DREG6       DC.B    'D6', 0
000014F6= 44 37 00                 485  DREG7       DC.B    'D7', 0 
000014F9                           486  
000014F9                           487  *ADDR REGISTERS PRINTOUT
000014F9= 41 30 00                 488  AREG0       DC.B    'A0', 0
000014FC= 41 31 00                 489  AREG1       DC.B    'A1', 0
000014FF= 41 32 00                 490  AREG2       DC.B    'A2', 0
00001502= 41 33 00                 491  AREG3       DC.B    'A3', 0
00001505= 41 34 00                 492  AREG4       DC.B    'A4', 0
00001508= 41 35 00                 493  AREG5       DC.B    'A5', 0
0000150B= 41 36 00                 494  AREG6       DC.B    'A6', 0
0000150E= 41 37 00                 495  AREG7       DC.B    'A7', 0 
00001511                           496  
00001511                           497  *INDR_ADDR REGISTERS PRINTOUT
00001511= 28 00                    498  INDR_LEFT   DC.B    '(', 0
00001513= 29 00                    499  INDR_RIGHT  DC.B    ')', 0
00001515= 2B 00                    500  POST_INCRE   DC.B    '+', 0
00001517= 2D 00                    501  PRE_DECRE   DC.B    '-', 0
00001519                           502  
0000151A= 00000001                 503  addrStart   DC.L    1   // Starting address
0000151E= 00000001                 504  addrEnd     DC.L    1   // ending address
00001522                           505      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   10CC
ADDREND             151E
ADDRREGTABLE        1336
ADDRSTART           151A
ADDVAL              10C6
AREG0               14F9
AREG1               14FC
AREG2               14FF
AREG3               1502
AREG4               1505
AREG5               1508
AREG6               150B
AREG7               150E
B                   10D2
C                   10D8
CHAR                1096
CLRREG              1470
COMMA               14D6
CONVERT             107C
CR                  D
D                   10DE
DATAREGTABLE        1306
DESTEACHECKER       1178
DESTEAFINDER        119E
DREG0               14E1
DREG1               14E4
DREG2               14E7
DREG3               14EA
DREG4               14ED
DREG5               14F0
DREG6               14F3
DREG7               14F6
E                   10E4
EA                  1132
EACHECKER           114A
END                 106C
F                   10EA
GETINPUT            1006
INDR_LEFT           1511
INDR_RIGHT          1513
INVALID_EA_ADDR     14C0
JMPTABLE            1110
JMPTODESTREG        11CE
JMPTOSRCREG         11BE
JMPTO_DEST_ADDR_REG  11EE
JMPTO_DEST_INDR_ADDR_REG  123C
JMPTO_SRC_ADDR_REG  11DE
JMPTO_SRC_INDR_ADDR_REG  11FE
LF                  A
LOOP                1072
MOVEL               14D9
OP0000              1122
OP0001              1122
OP0010              1122
OPCODE              10F0
POST_INCRE          1515
POST_INCREMENT_DEST  12C2
POST_INCREMENT_SRC  127A
PRE_DECRE           1517
PRE_DECREMENT_DEST  12D0
PRE_DECREMENT_SRC   128A
PRINTCOMMA          1452
PRINTINVALIDEA      1460
REG_A0              13DC
REG_A1              13F0
REG_A2              13FE
REG_A3              140C
REG_A4              141A
REG_A5              1428
REG_A6              1436
REG_A7              1444
REG_D0              1366
REG_D1              137A
REG_D2              1388
REG_D3              1396
REG_D4              13A4
REG_D5              13B2
REG_D6              13C0
REG_D7              13CE
START               1000
WELCOME             1482
WELCOME2            14A2
