00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/12/2020 6:38:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by : Kelvin Kam
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00006000                            12      ORG     $6000
00006000  103C 0005                 13          MOVE.B  #5, D0
00006004                            14  
00006004                            15    
00006004                            16  
00001000                            17      ORG    $1000
00001000                            18  *=================================================================
00001000                            19  *                     THIS IS OUR MAIN METHOD
00001000                            20  *               Don't throw random stuff in it, keep it to a minimum
00001000                            21  
00001000                            22  START:                  ; first instruction of program
00001000  4EB9 00001006             23          JSR     GETINPUT
00001006                            24  *=================================================================
00001006                            25  *---------------Get starting and ending addresss------- Kelvin
00001006                            26  *--------------- PRE: will be using D0, D5, A1
00001006                            27  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            28  GETINPUT:
00001006  4EB9 00001E10             29          JSR     CLRREG    *clean registers to restart program
0000100C  4EB9 00001E22             30          JSR     CLRAREG
00001012  23FC 00000000 00001FE8    31          MOVE.L  #0, ScreenCounter * initalize screenCounter
0000101C  43F9 00001E4C             32          LEA     WELCOME, A1
00001022  103C 000E                 33          MOVE.B  #14,    D0
00001026  4E4F                      34          TRAP    #15
00001028  327C 0000                 35          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000102C  103C 0002                 36          MOVE.B  #2,D0
00001030  4E4F                      37          TRAP    #15
00001032  2801                      38          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001034  7000                      39          MOVE.L  #$0, d0  // intitiate counter
00001036  4EB9 00001180             40          JSR     LOOP    // Convert starting address into hex
0000103C  23C5 00001FDC             41          MOVE.L  D5, addrStart
00001042  43F9 00001E6C             42          LEA     WELCOME2, A1
00001048  103C 000E                 43          MOVE.B  #14,    D0
0000104C  4E4F                      44          TRAP    #15
0000104E  327C 0000                 45          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001052  103C 0002                 46          MOVE.B  #2,D0
00001056  4E4F                      47          TRAP    #15
00001058  4245                      48          CLR     D5       // Clear D5 for exit address
0000105A  1801                      49          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000105C  103C 0000                 50          MOVE.B  #$0, d0  // intitiate counter
00001060  4EB9 00001180             51          JSR     LOOP    // Convert Ending address int Hex
00001066  23C5 00001FE0             52          MOVE.L  D5, addrEnd
0000106C  4EB9 00001086             53          JSR     CheckRange
00001072  2039 00001FDC             54          MOVE.L  addrStart, D0
00001078  2C40                      55          MOVEA.L D0, A6
0000107A  4EB9 000011FE             56          JSR     OPCODE
00001080  4EF9 000010EC             57          JMP     END
00001086                            58  
00001086                            59  *==================================================================
00001086                            60  *-----------------Check if the range is above or under the limit
00001086                            61  *------------------Pre: addrStart and addrEnd has begin and end values
00001086                            62          
00001086                            63  CheckRange:
00001086  2C79 00001FDC             64          MOVE.L  AddrStart, A6
0000108C  2279 00001FE0             65          MOVE.L  AddrEnd, A1
00001092  B3CE                      66          CMP.L   A6, A1
00001094  6D00 0D4E                 67          BLT     PRINTINVALIDADDRESS  `DRESS
00001098  203C 00003000             68          MOVE.L  #LowerLimit, D0
0000109E  B08E                      69          CMP.L   A6, D0
000010A0  6E00 0D42                 70          BGT     PRINTINVALIDADDRESS
000010A4  203C 00FFFFFE             71          MOVE.L  #UpperLimit, D0
000010AA  B08E                      72          CMP.L   A6, D0
000010AC  6D00 0D36                 73          BLT     PRINTINVALIDADDRESS
000010B0  2039 00001FDC             74          MOVE.L  AddrStart, D0
000010B6  0800 0000                 75          BTST    #0, D0
000010BA  6600 0D28                 76          BNE     PRINTInvalidAddress
000010BE  2C79 00001FE0             77          MOVE.L  AddrEnd, A6
000010C4  203C 00003000             78          MOVE.L  #LowerLimit, D0
000010CA  B08E                      79          CMP.L   A6, D0
000010CC  6E00 0D16                 80          BGT     PRINTINVALIDADDRESS
000010D0  203C 00FFFFFE             81          MOVE.L  #UpperLimit, D0
000010D6  B08E                      82          CMP.L   A6, D0
000010D8  6D00 0D0A                 83          BLT     PRINTINVALIDADDRESS
000010DC  2039 00001FE0             84          MOVE.L  AddrEnd, D0
000010E2  0800 0000                 85          BTST    #0, D0
000010E6  6600 0CFC                 86          BNE     PrintInvalidAddress
000010EA  4E75                      87          RTS
000010EC                            88  
000010EC                            89  END:
000010EC  43F9 00001F12             90          LEA     TY_Message, A1
000010F2  103C 000E                 91          MOVE.B  #14, D0
000010F6  4E4F                      92          TRAP    #15
000010F8  103C 0009                 93          MOVE.B  #9, D0
000010FC  4E4F                      94          TRAP    #15
000010FE                            95          
000010FE                            96  *Please start from here Annabelle
000010FE                            97  AddrLoop:
000010FE  4EB9 00001E10             98          JSR     CLRREG    *clean registers to restart program
00001104  4EB9 00001E22             99          JSR     CLRAREG
0000110A  43F9 00001F0F            100          LEA     PRINT_NEXTLINE, A1
00001110  103C 000E                101          MOVE.B  #14, D0
00001114  4E4F                     102          TRAP    #15
00001116  2879 00001FE0            103          MOVE.L  addrEnd, A4
0000111C  B9CE                     104          CMP.L   A6, A4
0000111E  6F00 0018                105          BLE     CHECK_CONT
00001122  5239 00001FE8            106          ADD.B   #1, ScreenCounter
00001128  0C39 001E 00001FE8       107          CMP.B   #30, ScreenCounter
00001130  6700 0030                108          BEQ     Next_Screen
00001134  6000 00C8                109          BRA     OPCODE
00001138                           110          
00001138                           111  *===========Check if user wants to continue
00001138                           112  CHECK_CONT:
00001138  43F9 00001ED9            113          LEA     Continue_Program, A1
0000113E  103C 000E                114          MOVE.B  #14, D0
00001142  4E4F                     115          TRAP    #15
00001144  43F8 0050                116          LEA     YesNoStorage, A1
00001148  103C 0002                117          MOVE.B  #2, D0
0000114C  4E4F                     118          TRAP    #15
0000114E  0C11 0059                119          CMP.B   #$59, (A1) * Yes
00001152  6700 FEB2                120          BEQ     GETINPUT
00001156  0C11 0079                121          CMP.B   #$79, (A1)
0000115A  6700 FEAA                122          BEQ     GETINPUT
0000115E  4EF8 10EC                123          JMP     END
00001162                           124          
00001162                           125  NEXT_SCREEN:
00001162  13FC 0000 00001FE8       126          MOVE.B  #0, ScreenCounter
0000116A  43F9 00001EF2            127          LEA     Continue_Screen, A1
00001170  103C 000E                128          MOVE.B  #14, D0
00001174  4E4F                     129          TRAP    #15
00001176  103C 0005                130          MOVE.B  #5, D0
0000117A  4E4F                     131          TRAP    #15
0000117C  4EF8 10FE                132          JMP     AddrLoop
00001180                           133          
00001180                           134  LOOP
00001180                           135  
00001180  B880                     136          CMP.L   D0, D4  // Loop until length of word reached
00001182  6E00 0006                137          BGT     CONVERT
00001186  5480                     138          ADD.L   #$2, D0 
00001188  4E75                     139          RTS 
0000118A                           140  
0000118A                           141  *=================================================================
0000118A                           142  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
0000118A                           143  *PRE      D4 must contain input length, d0 must be 0
0000118A                           144  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
0000118A                           145  CONVERT:
0000118A  5280                     146          ADDQ.L  #$1, D0 // increment counter
0000118C  1211                     147          move.b  (A1),D1    // Get next bit from Input
0000118E  5289                     148          adda.L  #1, A1      // Increment Input
00001190  0401 0030                149          sub.b   #$30,D1     //
00001194  B23C 0010                150          cmp.b   #$10,D1   // Check if value is larger than 10
00001198  6E00 000A                151          bgt     CHAR      // Find Hex
0000119C  1401                     152          move.b  D1, D2    // IF it is less than 10
0000119E  4EF9 000011D4            153          JMP     ADDVAL        
000011A4                           154  CHAR:
000011A4  B23C 0011                155          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
000011A8  6700 0030                156          BEQ     A
000011AC  B23C 0012                157          CMP.B   #$12, D1
000011B0  6700 002E                158          BEQ     B
000011B4  B23C 0013                159          CMP.B   #$13, D1
000011B8  6700 002C                160          BEQ     C
000011BC  B23C 0014                161          CMP.B   #$14, D1
000011C0  6700 002A                162          BEQ     D
000011C4  B23C 0015                163          CMP.B   #$15, D1
000011C8  6700 0028                164          BEQ     E
000011CC  B23C 0016                165          CMP.B   #$16, D1
000011D0  6700 0026                166          BEQ     F
000011D4                           167  
000011D4                           168  ADDVAL:
000011D4  E98D                     169          lsl.l    #$4, D5 // Shift based on position
000011D6  DA82                     170          add.l    D2, D5 //Add value into Input
000011D8  60A6                     171          BRA      LOOP
000011DA                           172      
000011DA                           173  A:
000011DA  740A                     174          MOVE.L  #$A, D2 
000011DC  4EF8 11D4                175          jmp ADDVAL
000011E0                           176  B:
000011E0  740B                     177          MOVE.L  #$B, D2
000011E2  4EF8 11D4                178          jmp ADDVAL
000011E6                           179  C:
000011E6  740C                     180          MOVE.L  #$C, D2
000011E8  4EF8 11D4                181          jmp ADDVAL
000011EC                           182  D:
000011EC  740D                     183          MOVE.L  #$D, D2
000011EE  4EF8 11D4                184          jmp ADDVAL
000011F2                           185  E:
000011F2  740E                     186          MOVE.L  #$E, D2
000011F4  4EF8 11D4                187          jmp ADDVAL
000011F8                           188  F:
000011F8  740F                     189          MOVE.L  #$F, D2
000011FA  4EF8 11D4                190          jmp ADDVAL
000011FE                           191          
000011FE                           192  *=======================================================================
000011FE                           193  *---------Find the first 4 of instruction and determines the instruction
000011FE                           194  OPCODE:
000011FE  4280                     195          CLR.L   D0
00001200  4281                     196          CLR.L   D1
00001202  4282                     197          CLR.L   D2
00001204  220E                     198          MOVE.L  A6, D1  * PRINT ADDRESS PER LINE
00001206  143C 0010                199          MOVE.B  #16, D2
0000120A  103C 000F                200          MOVE.B  #15, D0
0000120E  4E4F                     201          TRAP    #15
00001210  227C 00000000            202          MOVE.L  #$00000000, A1
00001216  43F9 00001F37            203          LEA     SPACER, A1
0000121C  103C 000E                204          MOVE.B  #14, D0
00001220  4E4F                     205          TRAP    #15
00001222  4280                     206          CLR.L     D0
00001224  4281                     207          CLR.L     D1
00001226  4282                     208          CLR.L     D2
00001228  321E                     209          MOVE.W  (A6)+,D1
0000122A  2401                     210          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
0000122C  E849                     211          LSR.W   #4, D1
0000122E  E849                     212          LSR.W   #4, D1
00001230  E849                     213          LSR.W   #4, D1  //Right Shift 3 times
00001232  1001                     214          MOVE.B  D1, D0  // OPCODE FOUND
00001234  B03C 000E                215          CMP.B   #%1110, D0
00001238  6E00 0BBA                216          BGT     PRINTDATA
0000123C  C0FC 0006                217          MULU    #6, D0
00001240                           218          *MOVE.B  D0, OpCodeSize
00001240  45F9 0000124A            219          LEA     JMPTABLE, A2
00001246  4EF2 0000                220          JMP     (A2, D0)
0000124A                           221          
0000124A                           222  *========================================================================
0000124A                           223  *--------Jump table used for different opcode!!! Please orgainze well using decimal
0000124A                           224  *------- Add your instructions here
0000124A                           225  JMPTABLE
0000124A  4EF9 000012A4            226          JMP     OP0000
00001250  4EF9 000012A4            227          JMP     OP0001 *MOVEB
00001256  4EF9 000012C2            228          JMP     OP0010 *MOVEL
0000125C  4EF9 000012F2            229          JMP     OP0011 *MOVEW
00001262  4EF9 0000131A            230          JMP     OP0100 *NOT
00001268  4EF9 00001438            231          JMP     OP0101
0000126E  4EF9 000014E8            232          JMP     OP0110
00001274  4EF9 000014E8            233          JMP     OP0111
0000127A  4EF9 0000158C            234          JMP     OP1000 *OR
00001280  4EF9 00001550            235          JMP     OP1001 *SUB
00001286  4EF9 000015D0            236          JMP     OP1010
0000128C  4EF9 000015D0            237          JMP     OP1011
00001292  4EF9 000015D0            238          JMP     OP1100 *AND
00001298  4EF9 0000160C            239          JMP     OP1101 *ADD
0000129E  4EF9 00001648            240          JMP     OP1110 *ROR ROL
000012A4                           241  
000012A4                           242  *=====================================================================    
000012A4                           243  *--------------D2 must contain Entire opcode for everything below
000012A4                           244  OP0000:
000012A4                           245  *-> MOVE.B
000012A4                           246  OP0001:
000012A4  13FC 0000 00001FEC       247          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012AC  43F9 00001F4C            248          LEA     MOVEB, A1
000012B2  103C 000E                249          MOVE.B  #14, D0
000012B6  4E4F                     250          TRAP    #15
000012B8  4EB9 00001992            251          JSR     EA * Find SRC EA
000012BE  6000 0762                252          BRA     DESTEAFINDER * FIND DEST EA
000012C2                           253  * -> MOVE.L
000012C2                           254  * Printed using MOVEL String as a variable on the very bottom
000012C2                           255  OP0010:
000012C2  13FC 0002 00001FEC       256          MOVE.B  #%10, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012CA  43F9 00001F47            257          LEA     MOVE_PRINT, A1
000012D0  103C 000E                258          MOVE.B  #14, D0
000012D4  4E4F                     259          TRAP    #15
000012D6  4EB9 00001960            260          JSR     CHECK_MOVEA
000012DC  43F9 00001F5C            261          LEA     MOVEL, A1
000012E2  103C 000E                262          MOVE.B  #14, D0
000012E6  4E4F                     263          TRAP    #15
000012E8  4EB9 00001992            264          JSR     EA *Find SRC EA
000012EE  6000 0732                265          BRA     DESTEAFINDER *FIND DEST EA
000012F2                           266  * -> MOVE.W
000012F2                           267  OP0011:
000012F2  43F9 00001F47            268          LEA     MOVE_PRINT, A1
000012F8  103C 000E                269          MOVE.B  #14, D0
000012FC  4E4F                     270          TRAP    #15
000012FE  4EB9 00001960            271          JSR     CHECK_MOVEA
00001304  43F9 00001F58            272          LEA     MOVEW, A1
0000130A  103C 000E                273          MOVE.B  #14, D0
0000130E  4E4F                     274          TRAP    #15
00001310  4EB9 00001992            275          JSR     EA * FIND SRC EA
00001316  6000 070A                276          BRA     DESTEAFINDER *FIND DEST EA
0000131A                           277          
0000131A                           278  *-> NOT
0000131A                           279  OP0100:
0000131A  B4BC 00004E71            280          CMP.L   #$4E71, D2
00001320  2E02                     281          MOVE.L  D2, D7
00001322  6700 005A                282          BEQ     NOP_CHECK
00001326  B4BC 00004E75            283          CMP.L   #$4E75, D2
0000132C  6700 0040                284          BEQ     RTS_CHECK
00001330                           285          * FORRR JSR
00001330  EC8F                     286          LSR.L   #6, D7
00001332  BEBC 0000013A            287          CMP.L   #$13A, D7
00001338  6700 0054                288          BEQ     JSR_CHECK
0000133C                           289          *============ 
0000133C                           290          
0000133C                           291          
0000133C  43F9 00001FB9            292          LEA     NOT_OP, A1
00001342  103C 000E                293          MOVE.B  #14, D0
00001346  4E4F                     294          TRAP    #15
00001348  E14A                     295          LSL.W   #8, D2
0000134A  3602                     296          MOVE.W  D2, D3 * D3 = SIZE OF INSTRUCTION
0000134C  E04B                     297          LSR.W   #8, D3
0000134E  EC4B                     298          LSR.W   #6, D3
00001350  3202                     299          MOVE.W  D2, D1 * D1 = EA OPMODE
00001352  E549                     300          LSL.W   #2, D1
00001354  E049                     301          LSR.W   #8, D1
00001356  EA49                     302          LSR.W   #5, D1
00001358  3002                     303          MOVE.W  D2, D0 * D0 = EA REGISTER
0000135A  EB48                     304          LSL.W   #5, D0
0000135C  E048                     305          LSR.W   #8, D0
0000135E  EA48                     306          LSR.W   #5, D0
00001360  C6FC 0006                307          MULU    #6, D3 * Multiply for JMPTABLE
00001364  45F9 000013C6            308          LEA     NOT_JMPTable, A2
0000136A  4EB2 3000                309          JSR     (A2, D3)
0000136E                           310  
0000136E                           311  RTS_CHECK:
0000136E  43F9 00001FD7            312          LEA     RTS, A1
00001374  103C 000E                313          MOVE.B  #14, D0
00001378  4E4F                     314          TRAP    #15
0000137A  4EF8 10FE                315          JMP     AddrLoop
0000137E                           316  
0000137E                           317  NOP_CHECK:
0000137E  43F9 00001FCD            318          LEA     NOP, A1
00001384  103C 000E                319          MOVE.B  #14, D0
00001388  4E4F                     320          TRAP    #15
0000138A  4EF8 10FE                321          JMP     AddrLoop
0000138E                           322          
0000138E                           323  JSR_CHECK:
0000138E  43F9 00001FD2            324          LEA     JSR, A1
00001394  103C 000E                325          MOVE.B  #14, D0
00001398  4E4F                     326          TRAP    #15
0000139A  E14A                     327          LSL.W   #8, D2
0000139C  3202                     328          MOVE.W  D2, D1 * D1 = EA OPMODE
0000139E  E549                     329          LSL.W   #2, D1
000013A0  E049                     330          LSR.W   #8, D1
000013A2  EA49                     331          LSR.W   #5, D1
000013A4  3002                     332          MOVE.W  D2, D0 * D0 = EA REGISTER
000013A6  EB48                     333          LSL.W   #5, D0
000013A8  E048                     334          LSR.W   #8, D0
000013AA  EA48                     335          LSR.W   #5, D0
000013AC                           336  
000013AC  4EB9 000013B6            337          JSR     JSR_EACHECKER
000013B2  4EF8 10FE                338          JMP     AddrLoop
000013B6                           339          
000013B6                           340  JSR_EACHECKER:
000013B6  B23C 0002                341          CMP.B   #%0010, D1
000013BA  6700 0708                342          BEQ     JMPTO_DEST_INDR_ADDR_REG
000013BE  B23C 0007                343          CMP.B   #%0111, D1
000013C2  6700 07E2                344          BEQ     JMPTO_DEST_IMMEDIATE
000013C6                           345          
000013C6                           346  NOT_JMPTable
000013C6  4EF9 000013DE            347          JMP     NOT_SIZE00
000013CC  4EF9 00001400            348          JMP     NOT_SIZE01
000013D2  4EF9 0000141A            349          JMP     NOT_SIZE10
000013D8  4EF9 00001434            350          JMP     NOT_SIZE11
000013DE                           351  *NOT.B
000013DE                           352  NOT_SIZE00:
000013DE  13FC 0000 00001FEC       353          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000013E6  1A00                     354          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
000013E8  43F9 00001F54            355          LEA     SIZE_B, A1
000013EE  103C 000E                356          MOVE.B  #14, D0
000013F2  4E4F                     357          TRAP    #15
000013F4  1005                     358          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013F6  4EB9 000019B6            359          JSR     EACHECKER
000013FC  6000 FD00                360          BRA     AddrLoop
00001400                           361  * NOT.W
00001400                           362  NOT_SIZE01: 
00001400  1A00                     363          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
00001402  43F9 00001F3F            364          LEA     SIZE_WORD, A1
00001408  103C 000E                365          MOVE.B  #14, D0
0000140C  4E4F                     366          TRAP    #15
0000140E  1005                     367          MOVE.B  D5, D0 * RETURN TEMP STORAGE
00001410  4EB9 000019B6            368          JSR     EACHECKER
00001416  6000 FCE6                369          BRA     AddrLoop
0000141A                           370  * NOT.L
0000141A                           371  NOT_SIZE10:
0000141A  1A00                     372          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
0000141C  43F9 00001F43            373          LEA     SIZE_LONG, A1
00001422  103C 000E                374          MOVE.B  #14, D0
00001426  4E4F                     375          TRAP    #15
00001428  1005                     376          MOVE.B  D5, D0 * RETURN TEMP STORAGE
0000142A  4EB9 000019B6            377          JSR     EACHECKER
00001430  6000 FCCC                378          BRA     AddrLoop
00001434                           379  NOT_SIZE11:
00001434  6000 098E                380          BRA     PRINTINVALIDEA
00001438                           381  
00001438                           382  
00001438                           383  *-> ADDQ            
00001438                           384  OP0101:
00001438  43F9 00001F69            385          LEA     ADDQ, A1
0000143E  103C 000E                386          MOVE.B  #14, D0
00001442  4E4F                     387          TRAP    #15
00001444  E94A                     388          LSL.W   #4, D2
00001446  3C02                     389          MOVE.W  D2, D6 *D1 Immediate DATA
00001448  E04E                     390          LSR.W   #8, D6
0000144A  EA4E                     391          LSR.W   #5, D6
0000144C  3802                     392          MOVE.W  D2, D4 * D4 OPCode Size
0000144E  E94C                     393          LSL.W   #4, D4
00001450  E04C                     394          LSR.W   #8, D4
00001452  EC4C                     395          LSR.W   #6, D4
00001454  3202                     396          MOVE.W  D2, D1 * D1 EA Mode
00001456  ED49                     397          LSL.W   #6, D1
00001458  E049                     398          LSR.W   #8, D1
0000145A  EA49                     399          LSR.W   #5, D1
0000145C  3A02                     400          MOVE.W  D2, D5 * D5 EA REgister
0000145E  E14D                     401          LSL.W   #8, D5
00001460  E34D                     402          LSL.W   #1, D5
00001462  E04D                     403          LSR.W   #8, D5
00001464  EA4D                     404          LSR.W   #5, D5
00001466                           405          
00001466                           406          
00001466                           407  ADDQ_Size_TABLE:
00001466  B83C 0000                408          CMP.B   #%000, D4
0000146A  6700 0012                409          BEQ     ADDQ_B
0000146E  B83C 0001                410          CMP.B   #%001, D4
00001472  6700 001C                411          BEQ     ADDQ_W
00001476  B83C 0002                412          CMP.B   #%010, D4
0000147A  6700 002A                413          BEQ     ADDQ_L
0000147E                           414          
0000147E                           415  ADDQ_B
0000147E  43F9 00001F3B            416          LEA     SIZE_BYTE,A1
00001484  103C 000E                417          MOVE.B  #14, D0
00001488  4E4F                     418          TRAP    #15
0000148A  4EF9 000014B8            419          JMP     ADDQ_Print_immediate
00001490                           420          
00001490                           421  ADDQ_W
00001490  43F9 00001F3F            422          LEA     SIZE_WORD,A1
00001496  103C 000E                423          MOVE.B  #14, D0
0000149A  4E4F                     424          TRAP    #15
0000149C  B23C 0000                425          CMP.B   #%0, D1
000014A0  4EF9 000014B8            426          JMP     ADDQ_Print_immediate
000014A6                           427  
000014A6                           428  ADDQ_L
000014A6  43F9 00001F43            429          LEA     SIZE_LONG,A1
000014AC  103C 000E                430          MOVE.B  #14, D0
000014B0  4E4F                     431          TRAP    #15
000014B2  4EF9 000014B8            432          JMP     ADDQ_Print_immediate
000014B8                           433          
000014B8                           434          
000014B8                           435  ADDQ_Print_immediate
000014B8  43F9 00001FA8            436          LEA     POUND_SIGN, A1
000014BE  103C 000E                437          MOVE.B  #14, D0
000014C2  4E4F                     438          TRAP    #15
000014C4  BC3C 0000                439          CMP.B   #%0000, D6
000014C8  6700 02FC                440          BEQ     PRINT8
000014CC                           441          
000014CC  103C 000F                442          MOVE.B  #15, D0
000014D0  4E4F                     443          TRAP    #15
000014D2                           444          
000014D2                           445  ADDQ_Print_ImmediateCONT:
000014D2  4EB9 00001DB6            446          JSR     PRINTCOMMA
000014D8  1005                     447          MOVE.B  D5, D0
000014DA  123C 0000                448          MOVE.B  #%000, D1
000014DE  4EB9 000019EC            449          JSR     DESTEACHECKER
000014E4  4EF8 10FE                450          JMP     AddrLoop
000014E8                           451  
000014E8                           452  
000014E8                           453         
000014E8                           454          
000014E8                           455  OP0110:
000014E8                           456          
000014E8                           457  OP0111:
000014E8  E94A                     458          LSL.W   #4, D2
000014EA  3C02                     459          MOVE.W  D2, D6 * Shift size
000014EC  E04E                     460          LSR.W   #8, D6
000014EE  EA4E                     461          LSR.W   #5, D6
000014F0  3602                     462          MOVE.W  D2, D3 * L/R
000014F2  E74B                     463          LSL.W   #3, D3
000014F4  E04B                     464          LSR.W   #8, D3
000014F6  EE4B                     465          LSR.W   #7, D3
000014F8  3802                     466          MOVE.W  D2, D4 * Size field
000014FA  E94C                     467          LSL.W   #4, D4
000014FC  E04C                     468          LSR.W   #8, D4
000014FE  EC4C                     469          LSR.W   #6, D4
00001500  3202                     470          MOVE.W  D2, D1 *immediate/register
00001502  ED49                     471          LSL.W   #6, D1
00001504  E049                     472          LSR.W   #8, D1
00001506  EE49                     473          LSR.W   #7, D1
00001508  3A02                     474          MOVE.W  D2, D5 * Shift Register
0000150A  E14D                     475          LSL.W   #8, D5
0000150C  E34D                     476          LSL.W   #1, D5
0000150E  E04D                     477          LSR.W   #8, D5
00001510  EA4D                     478          LSR.W   #5, D5
00001512  C6FC 0006                479          MULU    #6, D3
00001516  43F9 00001520            480          LEA     LogicalRotateTable, A1
0000151C  4EB1 3000                481          JSR     (A1, D3)
00001520                           482  LogicalRotateTable:
00001520  4EF9 0000152C            483          JMP     LogicalRotate_RIGHT
00001526  4EF9 0000153E            484          JMP     LogicalRotate_LEFT
0000152C                           485          
0000152C                           486  LogicalRotate_Right
0000152C  43F9 00001FC9            487          LEA     LSR, A1
00001532  103C 000E                488          MOVE.B  #14, D0
00001536  4E4F                     489          TRAP    #15
00001538  4EF9 000016B0            490          JMP     Rotate_Size_Table
0000153E                           491          
0000153E                           492  LogicalRotate_Left
0000153E  43F9 00001FC5            493          LEA     LSL, A1
00001544  103C 000E                494          MOVE.B  #14, D0
00001548  4E4F                     495          TRAP    #15
0000154A  4EF9 000016B0            496          JMP     Rotate_Size_Table
00001550                           497  
00001550                           498  
00001550                           499  
00001550                           500  * -> SUB
00001550                           501  * Splitting Sub into OPMODE and Register value
00001550                           502  OP1001:
00001550  43F9 00001FAA            503          LEA     SUBTRACT, A1
00001556  103C 000E                504          MOVE.B  #14, D0
0000155A  4E4F                     505          TRAP    #15
0000155C  E94A                     506          LSL.W   #4, D2
0000155E  3602                     507          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001560  E04B                     508          LSR.W   #8, D3 * D3 = D register
00001562  EA4B                     509          LSR.W   #5, D3
00001564  3802                     510          MOVE.W  D2, D4 *D4 = SubOPMODE
00001566  E74C                     511          LSL.W   #3, D4
00001568  E04C                     512          LSR.W   #8, D4
0000156A  EA4C                     513          LSR.W   #5, D4
0000156C  3202                     514          MOVE.W  D2, D1 * D1 = EA Mode
0000156E  ED49                     515          LSL.W   #6, D1
00001570  E049                     516          LSR.W   #8, D1
00001572  EA49                     517          LSR.W   #5, D1
00001574  3002                     518          MOVE.W  D2, D0 * D0 = EA register
00001576  E148                     519          LSL.W   #8, D0
00001578  E348                     520          LSL.W   #1, D0
0000157A  E048                     521          LSR.W   #8, D0
0000157C  EA48                     522          LSR.W   #5, D0
0000157E  45F9 000017D6            523          LEA     SubTable, A2
00001584  C8FC 0006                524          MULU    #6, D4
00001588  4EB2 4000                525          JSR     (A2, D4)
0000158C                           526  * -> OR
0000158C                           527  * Splitting AND into OPMODE and Register value       
0000158C                           528  OP1000:
0000158C  43F9 00001FB6            529          LEA     OR, A1
00001592  103C 000E                530          MOVE.B  #14, D0
00001596  4E4F                     531          TRAP    #15
00001598  E94A                     532          LSL.W   #4, D2
0000159A  3602                     533          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000159C  E04B                     534          LSR.W   #8, D3 * D3 = D register
0000159E  EA4B                     535          LSR.W   #5, D3
000015A0  3802                     536          MOVE.W  D2, D4 *D4 = SubOPMODE
000015A2  E74C                     537          LSL.W   #3, D4
000015A4  E04C                     538          LSR.W   #8, D4
000015A6  EA4C                     539          LSR.W   #5, D4
000015A8  3202                     540          MOVE.W  D2, D1 * D1 = EA Mode
000015AA  ED49                     541          LSL.W   #6, D1
000015AC  E049                     542          LSR.W   #8, D1
000015AE  EA49                     543          LSR.W   #5, D1
000015B0  B23C 0001                544          CMP.B   #%0001, D1
000015B4  6700 080E                545          BEQ     PRINTINVALIDEA
000015B8  3002                     546          MOVE.W  D2, D0 * D0 = EA register
000015BA  E148                     547          LSL.W   #8, D0
000015BC  E348                     548          LSL.W   #1, D0
000015BE  E048                     549          LSR.W   #8, D0
000015C0  EA48                     550          LSR.W   #5, D0
000015C2  45F9 000017D6            551          LEA     SubTable, A2
000015C8  C8FC 0006                552          MULU    #6, D4
000015CC  4EB2 4000                553          JSR     (A2, D4)
000015D0                           554  OP1010
000015D0                           555  OP1011
000015D0                           556  * -> AND
000015D0                           557  * Splitting AND into OPMODE and Register value
000015D0                           558  OP1100
000015D0  43F9 00001FB2            559          LEA     AND, A1
000015D6  103C 000E                560          MOVE.B  #14, D0
000015DA  4E4F                     561          TRAP    #15
000015DC  E94A                     562          LSL.W   #4, D2
000015DE  3602                     563          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000015E0  E04B                     564          LSR.W   #8, D3 * D3 = D register
000015E2  EA4B                     565          LSR.W   #5, D3
000015E4  3802                     566          MOVE.W  D2, D4 *D4 = SubOPMODE
000015E6  E74C                     567          LSL.W   #3, D4
000015E8  E04C                     568          LSR.W   #8, D4
000015EA  EA4C                     569          LSR.W   #5, D4
000015EC  3202                     570          MOVE.W  D2, D1 * D1 = EA Mode
000015EE  ED49                     571          LSL.W   #6, D1
000015F0  E049                     572          LSR.W   #8, D1
000015F2  EA49                     573          LSR.W   #5, D1
000015F4  3002                     574          MOVE.W  D2, D0 * D0 = EA register
000015F6  E148                     575          LSL.W   #8, D0
000015F8  E348                     576          LSL.W   #1, D0
000015FA  E048                     577          LSR.W   #8, D0
000015FC  EA48                     578          LSR.W   #5, D0
000015FE  45F9 000017D6            579          LEA     SubTable, A2
00001604  C8FC 0006                580          MULU    #6, D4
00001608  4EB2 4000                581          JSR     (A2, D4)
0000160C                           582          
0000160C                           583  * -> ADD
0000160C                           584  * Spltting Add into OPMODE and Register Value
0000160C                           585  OP1101:
0000160C  43F9 00001FAE            586          LEA     ADDITION, A1
00001612  103C 000E                587          MOVE.B  #14, D0
00001616  4E4F                     588          TRAP    #15
00001618  E94A                     589          LSL.W   #4, D2
0000161A  3602                     590          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000161C  E04B                     591          LSR.W   #8, D3 * D3 = D register
0000161E  EA4B                     592          LSR.W   #5, D3
00001620  3802                     593          MOVE.W  D2, D4 *D4 = SubOPMODE
00001622  E74C                     594          LSL.W   #3, D4
00001624  E04C                     595          LSR.W   #8, D4
00001626  EA4C                     596          LSR.W   #5, D4
00001628  3202                     597          MOVE.W  D2, D1 * D1 = EA Mode
0000162A  ED49                     598          LSL.W   #6, D1
0000162C  E049                     599          LSR.W   #8, D1
0000162E  EA49                     600          LSR.W   #5, D1
00001630  3002                     601          MOVE.W  D2, D0 * D0 = EA register
00001632  E148                     602          LSL.W   #8, D0
00001634  E348                     603          LSL.W   #1, D0
00001636  E048                     604          LSR.W   #8, D0
00001638  EA48                     605          LSR.W   #5, D0
0000163A  45F9 000017D6            606          LEA     SubTable, A2
00001640  C8FC 0006                607          MULU    #6, D4
00001644  4EB2 4000                608          JSR     (A2, D4)
00001648                           609  
00001648                           610  *-> ROL, ROR        
00001648                           611  OP1110:
00001648  E94A                     612          LSL.W   #4, D2
0000164A  3C02                     613          MOVE.W  D2, D6 * Shift size
0000164C  E04E                     614          LSR.W   #8, D6
0000164E  EA4E                     615          LSR.W   #5, D6
00001650  3602                     616          MOVE.W  D2, D3 * L/R
00001652  E74B                     617          LSL.W   #3, D3
00001654  E04B                     618          LSR.W   #8, D3
00001656  EE4B                     619          LSR.W   #7, D3
00001658  3802                     620          MOVE.W  D2, D4 * Size field
0000165A  E94C                     621          LSL.W   #4, D4
0000165C  E04C                     622          LSR.W   #8, D4
0000165E  EC4C                     623          LSR.W   #6, D4
00001660  3202                     624          MOVE.W  D2, D1 *immediate/register
00001662  ED49                     625          LSL.W   #6, D1
00001664  E049                     626          LSR.W   #8, D1
00001666  EE49                     627          LSR.W   #7, D1
00001668  3A02                     628          MOVE.W  D2, D5 * Shift Register
0000166A  E14D                     629          LSL.W   #8, D5
0000166C  E34D                     630          LSL.W   #1, D5
0000166E  E04D                     631          LSR.W   #8, D5
00001670  EA4D                     632          LSR.W   #5, D5
00001672  C6FC 0006                633          MULU    #6, D3
00001676  43F9 00001680            634          LEA     RotateTable, A1
0000167C  4EB1 3000                635          JSR     (A1, D3)
00001680                           636          
00001680                           637  RotateTable:
00001680  4EF9 0000168C            638          JMP     Rotate_RIGHT
00001686  4EF9 0000169E            639          JMP     Rotate_LEFT
0000168C                           640          
0000168C                           641  Rotate_Right
0000168C  43F9 00001FC1            642          LEA     ROR, A1
00001692  103C 000E                643          MOVE.B  #14, D0
00001696  4E4F                     644          TRAP    #15
00001698  4EF9 000016B0            645          JMP     Rotate_Size_Table
0000169E                           646          
0000169E                           647  Rotate_Left
0000169E  43F9 00001FBD            648          LEA     ROL, A1
000016A4  103C 000E                649          MOVE.B  #14, D0
000016A8  4E4F                     650          TRAP    #15
000016AA  4EF9 000016B0            651          JMP     Rotate_Size_Table
000016B0                           652          
000016B0                           653  Rotate_Size_TABLE:
000016B0  B83C 0000                654          CMP.B   #%000, D4
000016B4  6700 001A                655          BEQ     Rotate_B
000016B8  B83C 0001                656          CMP.B   #%001, D4
000016BC  6700 002E                657          BEQ     Rotate_W
000016C0  B83C 0002                658          CMP.B   #%010, D4
000016C4  6700 0042                659          BEQ     Rotate_L
000016C8  B83C 0003                660          CMP.B   #%11, D4
000016CC  6700 0056                661          BEQ     Rotate_EA
000016D0                           662          
000016D0                           663  Rotate_B
000016D0  43F9 00001F3B            664          LEA     SIZE_BYTE,A1
000016D6  103C 000E                665          MOVE.B  #14, D0
000016DA  4E4F                     666          TRAP    #15
000016DC  B23C 0000                667          CMP.B   #%0, D1
000016E0  6700 00B0                668          BEQ     Rotate_Print_immediate
000016E4  B23C 0001                669          CMP.B   #%1, D1
000016E8  6700 0088                670          BEQ     Rotate_Print_Register
000016EC                           671          
000016EC                           672  Rotate_W
000016EC  43F9 00001F3F            673          LEA     SIZE_WORD,A1
000016F2  103C 000E                674          MOVE.B  #14, D0
000016F6  4E4F                     675          TRAP    #15
000016F8  B23C 0000                676          CMP.B   #%0, D1
000016FC  6700 0094                677          BEQ     Rotate_Print_immediate
00001700  B23C 0001                678          CMP.B   #%1, D1
00001704  6700 006C                679          BEQ     Rotate_Print_Register
00001708                           680  
00001708                           681  Rotate_L
00001708  43F9 00001F43            682          LEA     SIZE_LONG,A1
0000170E  103C 000E                683          MOVE.B  #14, D0
00001712  4E4F                     684          TRAP    #15
00001714  B23C 0000                685          CMP.B   #%0, D1
00001718  6700 0078                686          BEQ     Rotate_Print_immediate
0000171C  B23C 0001                687          CMP.B   #%1, D1
00001720  6700 0050                688          BEQ     Rotate_Print_Register
00001724                           689          
00001724                           690  Rotate_EA
00001724  13FC 0001 00001FEC       691          MOVE.B  #%01, OpCodeSize
0000172C  43F9 00001F37            692          LEA     SPACER, A1
00001732  103C 000E                693          MOVE.B  #14, D0
00001736  4E4F                     694          TRAP    #15
00001738  3005                     695          MOVE.W  D5, D0
0000173A  3202                     696          MOVE.W  D2, D1
0000173C  ED49                     697          LSL.W   #6, D1
0000173E  E049                     698          LSR.W   #8, D1
00001740  EA49                     699          LSR.W   #5, D1
00001742  4EB9 0000174C            700          JSR     ROTATE_EACHECKER
00001748  4EF8 10FE                701          JMP     AddrLoop
0000174C                           702          
0000174C                           703  ROTATE_EACHECKER:
0000174C  B23C 0002                704          CMP.B   #%0010, D1
00001750  6700 0372                705          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001754  B23C 0003                706          CMP.B   #%0011, D1
00001758  6700 036A                707          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000175C  B23C 0004                708          CMP.B   #%0100, D1
00001760  6700 0362                709          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001764  4EF9 00001DC4            710          JMP     PRINTINVALIDEA
0000176A  B23C 0007                711          CMP.B   #%0111, D1
0000176E  6700 0436                712          BEQ     JMPTO_DEST_IMMEDIATE
00001772                           713          
00001772                           714  Rotate_Print_REGISTER
00001772  1006                     715          MOVE.B  D6, D0
00001774  123C 0000                716          MOVE.B  #%000, D1
00001778  4EB9 000019B6            717          JSR     EACHECKER
0000177E  1005                     718          MOVE.B  D5, D0
00001780  4241                     719          CLR     D1
00001782  4EB9 00001DB6            720          JSR     PRINTCOMMA
00001788  4EB9 000019EC            721          JSR     DESTEACHECKER
0000178E  4EF8 10FE                722          JMP     AddrLoop
00001792                           723          
00001792                           724  Rotate_Print_immediate
00001792  43F9 00001FA8            725          LEA     POUND_SIGN, A1
00001798  103C 000E                726          MOVE.B  #14, D0
0000179C  4E4F                     727          TRAP    #15
0000179E  BC3C 0000                728          CMP.B   #%0000, D6
000017A2  6700 0022                729          BEQ     PRINT8
000017A6  1206                     730          MOVE.B  D6, D1
000017A8  143C 000A                731          MOVE.B  #10, D2
000017AC  103C 000F                732          MOVE.B  #15, D0
000017B0  4E4F                     733          TRAP    #15
000017B2                           734          
000017B2                           735  Rotate_Print_ImmediateCONT:
000017B2  4EB9 00001DB6            736          JSR     PRINTCOMMA
000017B8  1005                     737          MOVE.B  D5, D0
000017BA  123C 0000                738          MOVE.B  #%000, D1
000017BE  4EB8 174C                739          JSR     ROTATE_EACHECKER
000017C2  4EF8 10FE                740          JMP     AddrLoop
000017C6                           741  
000017C6                           742  PRINT8:
000017C6  1204                     743          MOVE.B  D4, D1
000017C8  143C 000A                744          MOVE.B  #10, D2
000017CC  103C 000F                745          MOVE.B  #15, D0
000017D0  4E4F                     746          TRAP    #15
000017D2  4EF8 17B2                747          JMP     Rotate_Print_ImmediateCONT
000017D6                           748          
000017D6                           749  * End of ROR, ROL, (Kelvin)                
000017D6                           750          
000017D6                           751  * =============================================
000017D6                           752  * JMP Table for SUB OPMODES
000017D6                           753  SubTable:
000017D6  4EF9 00001806            754          JMP     OPMODE000 * BYTE  EA->DN
000017DC  4EF9 00001820            755          JMP     OPMODE001 * WORD  RA->DN  
000017E2  4EF9 00001832            756          JMP     OPMODE010 * LONG  EA->DN 
000017E8  4EF9 00001844            757          JMP     OPMODE011 * ADDA  WORD
000017EE  4EF9 00001872            758          JMP     OPMODE100 * BYTE  DN->EA
000017F4  4EF9 0000188A            759          JMP     OPMODE101 * BYTE  DN->EA
000017FA  4EF9 000018A2            760          JMP     OPMODE110 * BYTE  DN->EA
00001800  4EF9 000018BA            761          JMP     OPMODE111 * ADDA  LONG
00001806                           762          
00001806                           763  OPMODE000:
00001806  13FC 0000 00001FEC       764          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
0000180E  1A00                     765          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001810  43F9 00001F3B            766          LEA     SIZE_BYTE, A1
00001816  103C 000E                767          MOVE.B  #14, D0
0000181A  4E4F                     768          TRAP    #15
0000181C  6000 00DC                769          BRA     Sub_OPMODE_FIRST
00001820                           770  OPMODE001
00001820  1A00                     771          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001822  43F9 00001F3F            772          LEA     SIZE_Word, A1
00001828  103C 000E                773          MOVE.B  #14, D0
0000182C  4E4F                     774          TRAP    #15
0000182E  6000 00CA                775          BRA     Sub_OPMODE_FIRST
00001832                           776  OPMODE010
00001832  1A00                     777          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001834  43F9 00001F43            778          LEA     SIZE_Long, A1
0000183A  103C 000E                779          MOVE.B  #14, D0
0000183E  4E4F                     780          TRAP    #15
00001840  6000 00B8                781          BRA     Sub_OPMODE_FIRST
00001844                           782  *===============================================
00001844                           783  *Special OPMODE can only be used by ADD
00001844                           784  OPMODE011
00001844  0C38 000D 11FE           785          CMP.B   #%1101, OpCode
0000184A  6700 0008                786          BEQ     Special_OPMODE_USED
0000184E  4EF9 00001DC4            787          JMP     PRINTINVALIDEA
00001854                           788  Special_OPMODE_USED:
00001854  1A00                     789          MOVE.B  D0, D5
00001856  43F9 00001F60            790          LEA     MOVEA, A1
0000185C  103C 000E                791          MOVE.B  #14, D0
00001860  4E4F                     792          TRAP    #15
00001862  43F9 00001F3F            793          LEA     SIZE_WORD, A1
00001868  103C 000E                794          MOVE.B  #14, D0
0000186C  4E4F                     795          TRAP    #15
0000186E  6000 00CE                796          BRA     Sub_OPMODE_ADDA
00001872                           797  OPMODE100
00001872  1A00                     798          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001874  43F9 00001F3B            799          LEA     SIZE_BYTE, A1
0000187A  103C 000E                800          MOVE.B  #14, D0
0000187E  4E4F                     801          TRAP    #15
00001880  4EB9 000018E8            802          JSR     Memory_Alterable_Check
00001886  6000 0090                803          BRA     Sub_OPMODE_SECOND
0000188A                           804  OPMODE101
0000188A  1A00                     805          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
0000188C  43F9 00001F3F            806          LEA     SIZE_Word, A1
00001892  103C 000E                807          MOVE.B  #14, D0
00001896  4E4F                     808          TRAP    #15
00001898  4EB9 000018E8            809          JSR     Memory_Alterable_Check
0000189E  6000 0078                810          BRA     Sub_OPMODE_SECOND
000018A2                           811  OPMODE110
000018A2  1A00                     812          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
000018A4  43F9 00001F43            813          LEA     SIZE_LONG, A1
000018AA  103C 000E                814          MOVE.B  #14, D0
000018AE  4E4F                     815          TRAP    #15
000018B0  4EB9 000018E8            816          JSR     Memory_Alterable_Check
000018B6  6000 0060                817          BRA     Sub_OPMODE_SECOND
000018BA                           818  OPMODE111:
000018BA  0C38 000D 11FE           819          CMP.B   #%1101, OpCode
000018C0  6700 0008                820          BEQ     Special_OPMODE_USED2
000018C4  4EF9 00001DC4            821          JMP     PRINTINVALIDEA
000018CA                           822  Special_OPMODE_USED2:
000018CA  1A00                     823          MOVE.B  D0, D5
000018CC  43F9 00001F60            824          LEA     MOVEA, A1
000018D2  103C 000E                825          MOVE.B  #14, D0
000018D6  4E4F                     826          TRAP    #15
000018D8  43F9 00001F43            827          LEA     SIZE_LONG, A1
000018DE  103C 000E                828          MOVE.B  #14, D0
000018E2  4E4F                     829          TRAP    #15
000018E4  6000 0058                830          BRA     Sub_OPMODE_ADDA
000018E8                           831  *===================================================
000018E8                           832  * USED FOR SUB AND OR, check if dest EA is memory Alterable
000018E8                           833  
000018E8                           834  Memory_Alterable_Check:
000018E8  B23C 0000                835          CMP.B   #%000, D1
000018EC  6700 04D6                836          BEQ     PRINTINVALIDEA
000018F0  B23C 0001                837          CMP.B   #%001, D1
000018F4  6700 04CE                838          BEQ     PRINTINVALIDEA
000018F8  4E75                     839          RTS
000018FA                           840          
000018FA                           841  *===============================================
000018FA                           842  * Used for Dn->EA for SUB
000018FA                           843  * Called by 001, 010, 100, 
000018FA                           844  Sub_OPMODE_FIRST:
000018FA  1005                     845          MOVE.B  D5, D0   * TEMP RETURN D0
000018FC  4EB9 000019B6            846          JSR     EACHECKER 
00001902  4280                     847          CLR.L     D0
00001904  4281                     848          CLR.L     D1
00001906  4EB9 00001DB6            849          JSR     PRINTCOMMA
0000190C  1003                     850          MOVE.B  D3, D0
0000190E  4EB9 000019EC            851          JSR     DestEAChecker 
00001914  6000 F7E8                852          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001918                           853  *===============================================
00001918                           854  * Used for Dn->EA for SUB
00001918                           855  * Called by 100, 101, 110 
00001918                           856  Sub_OPMODE_SECOND:
00001918  1801                     857          MOVE.B  D1, D4   *TEMP STORE D1
0000191A  4280                     858          CLR.L     D0  *Clean D0
0000191C  1003                     859          MOVE.B  D3, D0
0000191E  4281                     860          CLR.L     D1
00001920  4EB9 000019B6            861          JSR     EACHECKER yeah
00001926  4280                     862          CLR.L     D0
00001928  4281                     863          CLR.L     D1
0000192A  4EB9 00001DB6            864          JSR     PRINTCOMMA
00001930  1005                     865          MOVE.B  D5, D0   * TEMP RETURN D0
00001932  1204                     866          MOVE.B  D4, D1   * TEMP RETURN D1
00001934  4EB9 000019EC            867          JSR     DestEAChecker 
0000193A  6000 F7C2                868          BRA     addrloop *EA FINISHED-----
0000193E                           869  *===============================================
0000193E                           870  * Used for Dn->EA for SUB
0000193E                           871  * Called by 011, 111
0000193E                           872  Sub_OPMODE_ADDA:
0000193E  1005                     873          MOVE.B  D5, D0   * TEMP RETURN D0
00001940  4EB9 000019B6            874          JSR     EACHECKER 
00001946  4240                     875          CLR     D0
00001948  4241                     876          CLR     D1
0000194A  4EB9 00001DB6            877          JSR     PRINTCOMMA
00001950  1003                     878          MOVE.B  D3, D0
00001952  123C 0001                879          MOVE.B  #%001, D1
00001956  4EB9 000019EC            880          JSR     DestEAChecker 
0000195C  6000 F7A0                881          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001960                           882          
00001960                           883  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
00001960                           884  CHECK_MOVEA
00001960  2602                     885          MOVE.L  D2, D3  * HOlding D2 in D3 temp
00001962  E18A                     886          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001964  E18A                     887          LSL.L   #8, D2
00001966  E98A                     888          LSL.L   #4, D2
00001968  E08A                     889          LSR.L   #8, D2
0000196A  E08A                     890          LSR.L   #8, D2
0000196C  E88A                     891          LSR.L   #4, D2 // 12 bits of opperand found
0000196E  EC8A                     892          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001970  1202                     893          MOVE.B  D2, D1 * Prepare D1 for Mode
00001972  EB09                     894          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001974  EA09                     895          LSR.B   #5, D1
00001976  B23C 0001                896          CMP.B   #%001, D1
0000197A  6700 0006                897          BEQ     PRINTA
0000197E  2403                     898          MOVE.L  D3, D2 
00001980  4E75                     899          RTS * Goes back to OP Value
00001982                           900          
00001982                           901  PRINTA
00001982  43F9 00001F60            902          LEA     MOVEA, A1
00001988  103C 000E                903          MOVE.B  #14, D0
0000198C  4E4F                     904          TRAP    #15
0000198E  2403                     905          MOVE.L  D3, D2
00001990  4E75                     906          RTS * Goes back to CHECK_MOVEA
00001992                           907          
00001992                           908          
00001992                           909  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
00001992                           910  *=================================================================
00001992                           911  *-----------EA-- Calculate EA used for Data Registers
00001992                           912  *----------Pre: D2, D0, D1 must be clear
00001992                           913  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
00001992                           914  EA:
00001992  4280                     915          CLR.L     D0  * Clear D0 and D1 so they don't conflict
00001994  4281                     916          CLR.L     D1
00001996  4283                     917          CLR.L     D3
00001998  E18A                     918          LSL.L   #8, D2 // Remove first 20 bits to get opperand
0000199A  E18A                     919          LSL.L   #8, D2
0000199C  E98A                     920          LSL.L   #4, D2
0000199E  E08A                     921          LSR.L   #8, D2
000019A0  E08A                     922          LSR.L   #8, D2
000019A2  E88A                     923          LSR.L   #4, D2 // 12 bits of opperand found
000019A4  23C2 00001FF0            924          MOVE.L  D2, D2Storage
000019AA  1002                     925          MOVE.B  D2, D0 Source Data Register
000019AC  EB08                     926          LSL.B   #5, D0
000019AE  EA08                     927          LSR.B   #5, D0
000019B0  1202                     928          MOVE.B  D2, D1 *Source Data Mode
000019B2  E509                     929          LSL.B   #2, D1
000019B4  EA09                     930          LSR.B   #5, D1
000019B6                           931          
000019B6                           932  *=================================================
000019B6                           933  *-----------EA CHECKER------Continues from EA
000019B6                           934  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
000019B6                           935  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
000019B6                           936  EACHECKER: 
000019B6  B23C 0000                937          CMP.B   #%0000, D1
000019BA  6700 008C                938          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
000019BE  B23C 0001                939          CMP.B   #%0001, D1
000019C2  6700 00A4                940          BEQ     JMPTO_SRC_ADDR_REG
000019C6  B23C 0002                941          CMP.B   #%0010, D1
000019CA  6700 00BC                942          BEQ     JMPTO_SRC_INDR_ADDR_REG
000019CE  B23C 0003                943          CMP.B   #%0011, D1
000019D2  6700 00B4                944          BEQ     JMPTO_SRC_INDR_ADDR_REG
000019D6  B23C 0004                945          CMP.B   #%0100, D1
000019DA  6700 00AC                946          BEQ     JMPTO_SRC_INDR_ADDR_REG
000019DE  B23C 0007                947          CMP.B   #%0111, D1
000019E2  6700 01A4                948          BEQ     JMPTO_SRC_IMMEDIATE
000019E6  4EF9 00001DC4            949          JMP     PRINTINVALIDEA
000019EC                           950          
000019EC                           951  *=================================================
000019EC                           952  *-----------DEST EA CHECKER------Continues from EA
000019EC                           953  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
000019EC                           954  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
000019EC                           955  DESTEACHECKER:
000019EC  B23C 0000                956          CMP.B   #%0000, D1
000019F0  6700 0066                957          BEQ     JMPTODestREG *JUMPS TO Source D registers
000019F4  B23C 0001                958          CMP.B   #%0001, D1
000019F8  6700 007E                959          BEQ     JMPTO_DEST_ADDR_REG
000019FC  B23C 0002                960          CMP.B   #%0010, D1
00001A00  6700 00C2                961          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001A04  B23C 0003                962          CMP.B   #%0011, D1
00001A08  6700 00BA                963          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001A0C  B23C 0004                964          CMP.B   #%0100, D1
00001A10  6700 00B2                965          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001A14  B23C 0007                966          CMP.B   #%0111, D1
00001A18  6700 018C                967          BEQ     JMPTO_DEST_IMMEDIATE
00001A1C  4EF9 00001DC4            968          JMP     PRINTINVALIDEA
00001A22                           969          
00001A22                           970  *=================================================      
00001A22                           971  * Dest EA Finder
00001A22                           972  * PRE: ONLY USED FOR MOVE
00001A22                           973  * POST: PRINTS DEST EA  
00001A22                           974  DestEAFinder:
00001A22  4EB9 00001DB6            975          JSR     PRINTCOMMA  * Prints comma between two operrands
00001A28  2439 00001FF0            976          MOVE.L  D2Storage, D2
00001A2E  EC8A                     977          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001A30  4241                     978          CLR     D1     * Clear D1 and D0 for opperand mode and register
00001A32  4240                     979          CLR     D0
00001A34  1202                     980          MOVE.B  D2, D1 * Prepare D1 for Mode
00001A36  EB09                     981          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001A38  EA09                     982          LSR.B   #5, D1
00001A3A  1002                     983          MOVE.B  D2, D0  *Prepare D0 for Register
00001A3C  E508                     984          LSL.B   #2, D0
00001A3E  EA08                     985          LSR.B   #5, D0
00001A40  4EB8 19EC                986          JSR     DESTEACHECKER
00001A44  4EF8 10FE                987          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00001A48                           988  
00001A48                           989          
00001A48                           990  *===================================================
00001A48                           991  *-------------Data Register checker------------------        
00001A48                           992  JMPTOSRCREG:
00001A48  43F9 00001C6A            993          LEA     DATAREGTABLE, A1
00001A4E  C0FC 0006                994          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001A52  4EB1 0000                995          JSR     (A1, D0) *JMP To index A1 + D0
00001A56                           996          * EA CONTINUES HERE
00001A56  4E75                     997          RTS * BRA DESTEAFINDER DELETED
00001A58                           998  JMPToDestReg: *PRINT OUT DEST Registers
00001A58  43F9 00001C6A            999          LEA     DATAREGTABLE, A1
00001A5E  C0FC 0006               1000          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001A62  4EB1 0000               1001          JSR     (A1, D0) *JMP to A1 + D0
00001A66  4E75                    1002          RTS    * Goes Back to DestEAFinder
00001A68                          1003          
00001A68                          1004  
00001A68                          1005  *===================================================
00001A68                          1006  *-------------Address Register checker------------------             
00001A68                          1007  JMPTO_SRC_ADDR_REG:
00001A68  43F9 00001C9A           1008          LEA     AddrREGTABLE, A1
00001A6E  C0FC 0006               1009          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001A72  4EB1 0000               1010          JSR     (A1, D0) *JMP To index A1 + D0
00001A76                          1011          * EA CONTINUES HERE
00001A76  4E75                    1012          RTS * BRA DESTEAFINDER DELETED
00001A78                          1013  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
00001A78  43F9 00001C9A           1014          LEA     AddrREGTABLE, A1
00001A7E  C0FC 0006               1015          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001A82  4EB1 0000               1016          JSR     (A1, D0) *JMP to A1 + D0
00001A86  4E75                    1017          RTS     * Goes Back to DESTEAFinder
00001A88                          1018          
00001A88                          1019  *===================================================
00001A88                          1020  *-------------Indirect Address Register checker------------------
00001A88                          1021  *Copied from Address Register checker, basically adding parenthesis () around Address register
00001A88                          1022  * Also Detects ()+ and -()
00001A88                          1023  * PRE: D1 stores mode, D0 stores register #
00001A88                          1024  * D1 to D5 are off limits
00001A88                          1025  JMPTO_SRC_INDR_ADDR_REG:
00001A88  1A00                    1026         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
00001A8A  B23C 0004               1027         CMP.B    #%100, D1       * IF IT IS -()
00001A8E  6700 007E               1028         BEQ      PRE_DECREMENT_SRC
00001A92  43F9 00001F9E           1029         LEA      INDR_LEFT, A1
00001A98  103C 000E               1030         MOVE.B   #14, D0
00001A9C  4E4F                    1031         TRAP     #15
00001A9E  1005                    1032         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001AA0  43F9 00001C9A           1033         LEA     AddrREGTABLE, A1
00001AA6  C0FC 0006               1034         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001AAA  4EB1 0000               1035         JSR     (A1, D0) *JMP To index A1 + D0
00001AAE  43F9 00001FA0           1036         LEA      INDR_RIGHT, A1
00001AB4  103C 000E               1037         MOVE.B   #14, D0
00001AB8  4E4F                    1038         TRAP     #15
00001ABA  B23C 0003               1039         CMP.B    #%0011, D1 * IF IT IS ()+
00001ABE  6700 0040               1040         BEQ      POST_INCREMENT_SRC
00001AC2  4E75                    1041         RTS * BRA DESTEAFINDER DELETED
00001AC4                          1042         
00001AC4                          1043  JMPTO_DEST_INDR_ADDR_REG:
00001AC4  1A00                    1044         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
00001AC6  B23C 0004               1045         CMP.B    #%100, D1
00001ACA  6700 0086               1046         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00001ACE  43F9 00001F9E           1047         LEA      INDR_LEFT, A1
00001AD4  103C 000E               1048         MOVE.B   #14, D0
00001AD8  4E4F                    1049         TRAP     #15
00001ADA  1005                    1050         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001ADC  43F9 00001C9A           1051         LEA     AddrREGTABLE, A1
00001AE2  C0FC 0006               1052         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001AE6  4EB1 0000               1053         JSR     (A1, D0) *JMP To index A1 + D0
00001AEA  43F9 00001FA0           1054         LEA      INDR_RIGHT, A1
00001AF0  103C 000E               1055         MOVE.B   #14, D0
00001AF4  4E4F                    1056         TRAP     #15
00001AF6  B23C 0003               1057         CMP.B    #%0011, D1  // IF IT IS ()+
00001AFA  6700 0048               1058         BEQ      POST_INCREMENT_DEST
00001AFE  4E75                    1059         RTS      * Goes Back to DestEAFinder
00001B00                          1060         
00001B00                          1061  POST_INCREMENT_SRC:
00001B00  43F9 00001FA2           1062         LEA      POST_INCRE, A1
00001B06  103C 000E               1063         MOVE.B   #14, D0
00001B0A  4E4F                    1064         TRAP     #15
00001B0C  4E75                    1065         RTS * BRA DESTEAFINDER DELETED
00001B0E                          1066         
00001B0E                          1067  PRE_DECREMENT_SRC:
00001B0E  43F9 00001FA4           1068         LEA      PRE_DECRE, A1
00001B14  103C 000E               1069         MOVE.B   #14, D0
00001B18  4E4F                    1070         TRAP     #15
00001B1A  43F9 00001F9E           1071         LEA      INDR_LEFT, A1
00001B20  103C 000E               1072         MOVE.B   #14, D0
00001B24  4E4F                    1073         TRAP     #15
00001B26  1005                    1074         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001B28  43F9 00001C9A           1075         LEA     AddrREGTABLE, A1
00001B2E  C0FC 0006               1076         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001B32  4EB1 0000               1077         JSR     (A1, D0) *JMP To index A1 + D0
00001B36  43F9 00001FA0           1078         LEA      INDR_RIGHT, A1
00001B3C  103C 000E               1079         MOVE.B   #14, D0
00001B40  4E4F                    1080         TRAP     #15
00001B42  4E75                    1081         RTS * BRA DESTEAFINDER DELETED
00001B44                          1082  
00001B44                          1083  POST_INCREMENT_DEST
00001B44  43F9 00001FA2           1084         LEA      POST_INCRE, A1
00001B4A  103C 000E               1085         MOVE.B   #14, D0
00001B4E  4E4F                    1086         TRAP     #15
00001B50  4E75                    1087         RTS      * Goes Back to DestEAFinder
00001B52                          1088         
00001B52                          1089  PRE_DECREMENT_DEST:
00001B52  43F9 00001FA4           1090         LEA      PRE_DECRE, A1
00001B58  103C 000E               1091         MOVE.B   #14, D0
00001B5C  4E4F                    1092         TRAP     #15
00001B5E  43F9 00001F9E           1093         LEA      INDR_LEFT, A1
00001B64  103C 000E               1094         MOVE.B   #14, D0
00001B68  4E4F                    1095         TRAP     #15
00001B6A  1005                    1096         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001B6C  43F9 00001C9A           1097         LEA     AddrREGTABLE, A1
00001B72  C0FC 0006               1098         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001B76  4EB1 0000               1099         JSR     (A1, D0) *JMP To index A1 + D0
00001B7A  43F9 00001FA0           1100         LEA      INDR_RIGHT, A1
00001B80  103C 000E               1101         MOVE.B   #14, D0
00001B84  4E4F                    1102         TRAP     #15
00001B86  4E75                    1103         RTS      * Goes Back to DestEAFinder
00001B88                          1104         
00001B88                          1105  JMPTO_SRC_IMMEDIATE:
00001B88  B03C 0000               1106         CMP.B    #%000, D0
00001B8C  6700 002E               1107         BEQ      Address_W
00001B90  B03C 0001               1108         CMP.B    #%001, D0
00001B94  6700 0044               1109         BEQ      Address_L
00001B98  B03C 0004               1110         CMP.B    #%100, D0
00001B9C  6700 005A               1111         BEQ      Address_Immediate
00001BA0  4EF9 00001DC4           1112         JMP      PRINTINVALIDEA
00001BA6                          1113  *===================================  
00001BA6                          1114  * Same as SRC but without Immediate address     
00001BA6                          1115  JMPTO_DEST_IMMEDIATE:
00001BA6  B03C 0000               1116         CMP.B    #%000, D0
00001BAA  6700 0010               1117         BEQ      Address_W
00001BAE  B03C 0001               1118         CMP.B    #%001, D0
00001BB2  6700 0026               1119         BEQ      Address_L
00001BB6  4EF9 00001DC4           1120         JMP      PRINTINVALIDEA
00001BBC                          1121         
00001BBC                          1122  Address_W:
00001BBC  43F9 00001FA6           1123          LEA     DOLLAR_SIGN, A1
00001BC2  103C 000E               1124          MOVE.B  #14, D0
00001BC6  4E4F                    1125          TRAP    #15
00001BC8  4241                    1126          CLR     D1
00001BCA  4240                    1127          CLR     D0
00001BCC  321E                    1128          MOVE.W  (A6)+, D1
00001BCE  143C 0010               1129          MOVE.B  #16, D2
00001BD2  103C 000F               1130          MOVE.B  #15, D0
00001BD6  4E4F                    1131          TRAP    #15 
00001BD8  4E75                    1132          RTS 
00001BDA                          1133  
00001BDA                          1134  Address_L
00001BDA  43F9 00001FA6           1135          LEA     DOLLAR_SIGN, A1
00001BE0  103C 000E               1136          MOVE.B  #14, D0
00001BE4  4E4F                    1137          TRAP    #15
00001BE6  4241                    1138          CLR     D1
00001BE8  4240                    1139          CLR     D0
00001BEA  221E                    1140          MOVE.L  (A6)+, D1
00001BEC  143C 0010               1141          MOVE.B  #16, D2
00001BF0  103C 000F               1142          MOVE.B  #15, D0
00001BF4  4E4F                    1143          TRAP    #15
00001BF6  4E75                    1144          RTS  
00001BF8                          1145          
00001BF8                          1146  Address_Immediate:
00001BF8  43F9 00001FA8           1147          LEA     POUND_SIGN, A1
00001BFE  103C 000E               1148          MOVE.B  #14, D0
00001C02  4E4F                    1149          TRAP    #15
00001C04  43F9 00001FA6           1150          LEA     DOLLAR_SIGN, A1
00001C0A  103C 000E               1151          MOVE.B  #14, D0
00001C0E  4E4F                    1152          TRAP    #15
00001C10  0C39 0001 00001FEC      1153          CMP.B   #%01, OpCodeSize *01 is used to mark invalid immediate for example ROR, ROL
00001C18  6700 01AA               1154          BEQ     PRINTINVALIDEA
00001C1C  0C39 0000 00001FEC      1155          CMP.B   #%00, OpCodeSize
00001C24  6700 001A               1156          BEQ     Immediate_B
00001C28  0C39 0003 00001FEC      1157          CMP.B   #%11, OpCodeSize
00001C30  6700 001C               1158          BEQ     Immediate_W
00001C34  0C39 0002 00001FEC      1159          CMP.B   #%10, OpCOdeSize
00001C3C  6700 001E               1160          BEQ     Immediate_L
00001C40                          1161          
00001C40                          1162  Immediate_B:
00001C40  321E                    1163          MOVE.W  (A6)+, D1
00001C42  143C 0010               1164          MOVE.B  #16, D2
00001C46  103C 000F               1165          MOVE.B  #15, D0
00001C4A  4E4F                    1166          TRAP    #15
00001C4C  4E75                    1167          RTS
00001C4E                          1168          
00001C4E                          1169  Immediate_W:
00001C4E  321E                    1170          MOVE.W  (A6)+, D1
00001C50  143C 0010               1171          MOVE.B  #16, D2
00001C54  103C 000F               1172          MOVE.B  #15, D0
00001C58  4E4F                    1173          TRAP    #15
00001C5A  4E75                    1174          RTS
00001C5C                          1175          
00001C5C                          1176  Immediate_L:
00001C5C  221E                    1177          MOVE.L  (A6)+, D1
00001C5E  143C 0010               1178          MOVE.B  #16, D2
00001C62  103C 000F               1179          MOVE.B  #15, D0
00001C66  4E4F                    1180          TRAP    #15
00001C68  4E75                    1181          RTS
00001C6A                          1182  
00001C6A                          1183          
00001C6A                          1184  
00001C6A                          1185  *=================================================================
00001C6A                          1186  *---------Data Register Table used for printing out Registers----
00001C6A                          1187  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
00001C6A                          1188  DataRegTable
00001C6A  4EF9 00001CCA           1189          JMP REG_D0
00001C70  4EF9 00001CDE           1190          JMP REG_D1
00001C76  4EF9 00001CEC           1191          JMP REG_D2
00001C7C  4EF9 00001CFA           1192          JMP REG_D3
00001C82  4EF9 00001D08           1193          JMP REG_D4
00001C88  4EF9 00001D16           1194          JMP REG_D5
00001C8E  4EF9 00001D24           1195          JMP REG_D6
00001C94  4EF9 00001D32           1196          JMP REG_D7
00001C9A                          1197  
00001C9A                          1198  AddrRegTable:
00001C9A                          1199          
00001C9A  4EF9 00001D40           1200          JMP REG_A0
00001CA0  4EF9 00001D54           1201          JMP REG_A1
00001CA6  4EF9 00001D62           1202          JMP REG_A2
00001CAC  4EF9 00001D70           1203          JMP REG_A3
00001CB2  4EF9 00001D7E           1204          JMP REG_A4
00001CB8  4EF9 00001D8C           1205          JMP REG_A5
00001CBE  4EF9 00001D9A           1206          JMP REG_A6
00001CC4  4EF9 00001DA8           1207          JMP REG_A7
00001CCA                          1208  
00001CCA                          1209  * Data Registers Printing        
00001CCA                          1210  REG_D0:
00001CCA  227C 00000000           1211          MOVEA.L #$0, A1
00001CD0  43F9 00001F6E           1212          LEA     DREG0, A1
00001CD6  103C 000E               1213          MOVE.B  #14, D0
00001CDA  4E4F                    1214          TRAP    #15
00001CDC  4E75                    1215          RTS
00001CDE                          1216          
00001CDE                          1217  REG_D1:
00001CDE  43F9 00001F71           1218          LEA     DREG1, A1
00001CE4  103C 000E               1219          MOVE.B  #14, D0
00001CE8  4E4F                    1220          TRAP    #15
00001CEA  4E75                    1221          RTS
00001CEC                          1222  REG_D2:
00001CEC  43F9 00001F74           1223          LEA     DREG2, A1
00001CF2  103C 000E               1224          MOVE.B  #14, D0
00001CF6  4E4F                    1225          TRAP    #15
00001CF8  4E75                    1226          RTS
00001CFA                          1227  REG_D3:
00001CFA  43F9 00001F77           1228          LEA     DREG3, A1
00001D00  103C 000E               1229          MOVE.B  #14, D0
00001D04  4E4F                    1230          TRAP    #15
00001D06  4E75                    1231          RTS
00001D08                          1232  REG_D4:
00001D08  43F9 00001F7A           1233          LEA     DREG4, A1
00001D0E  103C 000E               1234          MOVE.B  #14, D0
00001D12  4E4F                    1235          TRAP    #15
00001D14  4E75                    1236          RTS
00001D16                          1237  REG_D5:
00001D16  43F9 00001F7D           1238          LEA     DREG5, A1
00001D1C  103C 000E               1239          MOVE.B  #14, D0
00001D20  4E4F                    1240          TRAP    #15
00001D22  4E75                    1241          RTS
00001D24                          1242  REG_D6:
00001D24  43F9 00001F80           1243          LEA     DREG6, A1
00001D2A  103C 000E               1244          MOVE.B  #14, D0
00001D2E  4E4F                    1245          TRAP    #15
00001D30  4E75                    1246          RTS
00001D32                          1247  REG_D7:
00001D32  43F9 00001F83           1248          LEA     DREG7, A1
00001D38  103C 000E               1249          MOVE.B  #14, D0
00001D3C  4E4F                    1250          TRAP    #15
00001D3E  4E75                    1251          RTS
00001D40                          1252          
00001D40                          1253  *--------------------Addr Reigster printing ------------------------*        
00001D40                          1254  REG_A0:
00001D40  227C 00000000           1255          MOVEA.L #$0, A1
00001D46  43F9 00001F86           1256          LEA     AREG0, A1
00001D4C  103C 000E               1257          MOVE.B  #14, D0
00001D50  4E4F                    1258          TRAP    #15
00001D52  4E75                    1259          RTS
00001D54                          1260          
00001D54                          1261  REG_A1:
00001D54  43F9 00001F89           1262          LEA     AREG1, A1
00001D5A  103C 000E               1263          MOVE.B  #14, D0
00001D5E  4E4F                    1264          TRAP    #15
00001D60  4E75                    1265          RTS
00001D62                          1266  REG_A2:
00001D62  43F9 00001F8C           1267          LEA     AREG2, A1
00001D68  103C 000E               1268          MOVE.B  #14, D0
00001D6C  4E4F                    1269          TRAP    #15
00001D6E  4E75                    1270          RTS
00001D70                          1271  REG_A3:
00001D70  43F9 00001F8F           1272          LEA     AREG3, A1
00001D76  103C 000E               1273          MOVE.B  #14, D0
00001D7A  4E4F                    1274          TRAP    #15
00001D7C  4E75                    1275          RTS
00001D7E                          1276  REG_A4:
00001D7E  43F9 00001F92           1277          LEA     AREG4, A1
00001D84  103C 000E               1278          MOVE.B  #14, D0
00001D88  4E4F                    1279          TRAP    #15
00001D8A  4E75                    1280          RTS
00001D8C                          1281  REG_A5:
00001D8C  43F9 00001F95           1282          LEA     AREG5, A1
00001D92  103C 000E               1283          MOVE.B  #14, D0
00001D96  4E4F                    1284          TRAP    #15
00001D98  4E75                    1285          RTS
00001D9A                          1286  REG_A6:
00001D9A  43F9 00001F98           1287          LEA     AREG6, A1
00001DA0  103C 000E               1288          MOVE.B  #14, D0
00001DA4  4E4F                    1289          TRAP    #15
00001DA6  4E75                    1290          RTS
00001DA8                          1291  REG_A7:
00001DA8  43F9 00001F9B           1292          LEA     AREG7, A1
00001DAE  103C 000E               1293          MOVE.B  #14, D0
00001DB2  4E4F                    1294          TRAP    #15
00001DB4  4E75                    1295          RTS
00001DB6                          1296          
00001DB6                          1297  *====================================================PRinting/ ERROR method comes down here=========================================
00001DB6                          1298  PRINTCOMMA: * Prints comma between two operrands
00001DB6  43F9 00001F34           1299          LEA     COMMA, A1
00001DBC  103C 000E               1300          MOVE.B  #14, D0
00001DC0  4E4F                    1301          TRAP    #15
00001DC2  4E75                    1302          RTS
00001DC4                          1303          
00001DC4                          1304  PrintInvalidEA:
00001DC4  43F9 00001E8A           1305          LEA     Invalid_EA_Addr, A1
00001DCA  103C 000E               1306          MOVE.B  #14, D0
00001DCE  4E4F                    1307          TRAP    #15
00001DD0  4EF8 10FE               1308          JMP     AddrLoop
00001DD4                          1309          
00001DD4                          1310  PrintInvalidSUB:
00001DD4  43F9 00001EA0           1311          LEA     Invalid_EA_SUB, A1
00001DDA  103C 000E               1312          MOVE.B  #14, D0
00001DDE  4E4F                    1313          TRAP    #15
00001DE0  4EF8 10FE               1314          JMP     AddrLoop
00001DE4                          1315          
00001DE4                          1316  PrintInvalidAddress:
00001DE4  43F9 00001EBE           1317          LEA     Invalid_Address, A1
00001DEA  103C 000E               1318          MOVE.B  #14, D0
00001DEE  4E4F                    1319          TRAP    #15
00001DF0  4EF8 1006               1320          JMP     GETINPUT
00001DF4                          1321          
00001DF4                          1322  PrintDATA:
00001DF4  43F9 00001F62           1323          LEA     DATA, A1
00001DFA  103C 000E               1324          MOVE.B  #14, D0
00001DFE  4E4F                    1325          TRAP    #15
00001E00  3202                    1326          MOVE.W  D2, D1
00001E02  143C 0010               1327          MOVE.B  #16, D2
00001E06  103C 000F               1328          MOVE.B  #15, D0
00001E0A  4E4F                    1329          TRAP    #15
00001E0C  6000 F2F0               1330          BRA     AddrLoop
00001E10                          1331           
00001E10                          1332  * Clear all registers    
00001E10                          1333  CLRREG:
00001E10  7000                    1334      MOVE.L  #0, D0
00001E12  7200                    1335      MOVE.L  #0, D1
00001E14  7400                    1336      MOVE.L  #0, D2
00001E16  7600                    1337      MOVE.L  #0, D3
00001E18  7800                    1338      MOVE.L  #0, D4
00001E1A  7A00                    1339      MOVE.L  #0, D5
00001E1C  7C00                    1340      MOVE.L  #0, D6
00001E1E  7E00                    1341      MOVE.L  #0, D7
00001E20  4E75                    1342      RTS
00001E22                          1343      
00001E22                          1344  CLRAREG:
00001E22  207C 00000000           1345      MOVE.L  #0, A0
00001E28  227C 00000000           1346      MOVE.L  #0, A1
00001E2E  247C 00000000           1347      MOVE.L  #0, A2
00001E34  267C 00000000           1348      MOVE.L  #0, A3
00001E3A  287C 00000000           1349      MOVE.L  #0, A4
00001E40  2A7C 00000000           1350      MOVE.L  #0, A5
00001E46  4E75                    1351      RTS
00001E48                          1352  
00001E48                          1353      
00001E48                          1354      
00001E48                          1355          
00001E48                          1356  * Put program code here
00001E48                          1357  
00001E48  FFFF FFFF               1358      SIMHALT             ; halt simulator
00001E4C                          1359  
00001E4C                          1360  * Put variables and constants here
00001E4C  =0000000D               1361  CR  EQU $0D
00001E4C  =0000000A               1362  LF  EQU $0A
00001E4C= 50 6C 65 61 73 65 ...   1363  WELCOME     DC.B    'Please enter starting address', CR, LF, 0
00001E6C= 50 6C 65 61 73 65 ...   1364  WELCOME2    DC.B    'Please enter ending address', CR, LF, 0
00001E8A= 49 6E 76 61 6C 69 ...   1365  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
00001EA0= 49 6E 76 61 6C 69 ...   1366  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00001EBE= 47 69 76 65 6E 20 ...   1367  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00001ED9= 43 6F 6E 74 69 6E ...   1368  Continue_Program    DC.B    'Continue Program? Y/N ', CR, LF, 0
00001EF2= 43 6F 6E 74 69 6E ...   1369  Continue_Screen DC.B    'Continue Screen? Hit Enter', CR, LF, 0
00001F0F= 0D 0A 00                1370  Print_NextLine  DC.B    '', CR, LF, 0
00001F12= 54 68 61 6E 6B 20 ...   1371  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
00001F34                          1372  
00001F34= 2C 20 00                1373  COMMA       DC.B    ', ', 0
00001F37= 20 20 20 00             1374  SPACER      DC.B    '   ', 0
00001F3B                          1375  *DATASIZE
00001F3B= 2E 42 20 00             1376  SIZE_BYTE       DC.B    '.B ', 0
00001F3F= 2E 57 20 00             1377  SIZE_WORD       DC.B    '.W ', 0
00001F43= 2E 4C 20 00             1378  SIZE_LONG       DC.B    '.L ', 0
00001F47                          1379  
00001F47                          1380  *MOVE OPCODES
00001F47= 4D 4F 56 45 00          1381  MOVE_PRINT  DC.B    'MOVE', 0
00001F4C= 4D 4F 56 45 2E 42 ...   1382  MOVEB       DC.B    'MOVE.B ', 0
00001F54= 2E 42 20 00             1383  SIZE_B       DC.B    '.B ', 0
00001F58= 2E 57 20 00             1384  MOVEW       DC.B    '.W ', 0
00001F5C= 2E 4C 20 00             1385  MOVEL       DC.B    '.L ', 0
00001F60= 41 00                   1386  MOVEA       DC.B    'A', 0
00001F62= 44 41 54 41 3A 20 00    1387  DATA        DC.B    'DATA: ', 0
00001F69= 41 44 44 51 00          1388  ADDQ        DC.B    'ADDQ', 0
00001F6E                          1389  
00001F6E                          1390  
00001F6E                          1391  *DATA REGISTERS PRINTOUT
00001F6E= 44 30 00                1392  DREG0       DC.B    'D0', 0
00001F71= 44 31 00                1393  DREG1       DC.B    'D1', 0
00001F74= 44 32 00                1394  DREG2       DC.B    'D2', 0
00001F77= 44 33 00                1395  DREG3       DC.B    'D3', 0
00001F7A= 44 34 00                1396  DREG4       DC.B    'D4', 0
00001F7D= 44 35 00                1397  DREG5       DC.B    'D5', 0
00001F80= 44 36 00                1398  DREG6       DC.B    'D6', 0
00001F83= 44 37 00                1399  DREG7       DC.B    'D7', 0 
00001F86                          1400  
00001F86                          1401  *ADDR REGISTERS PRINTOUT
00001F86= 41 30 00                1402  AREG0       DC.B    'A0', 0
00001F89= 41 31 00                1403  AREG1       DC.B    'A1', 0
00001F8C= 41 32 00                1404  AREG2       DC.B    'A2', 0
00001F8F= 41 33 00                1405  AREG3       DC.B    'A3', 0
00001F92= 41 34 00                1406  AREG4       DC.B    'A4', 0
00001F95= 41 35 00                1407  AREG5       DC.B    'A5', 0
00001F98= 41 36 00                1408  AREG6       DC.B    'A6', 0
00001F9B= 41 37 00                1409  AREG7       DC.B    'A7', 0 
00001F9E                          1410  
00001F9E                          1411  *INDR_ADDR REGISTERS PRINTOUT
00001F9E= 28 00                   1412  INDR_LEFT   DC.B    '(', 0
00001FA0= 29 00                   1413  INDR_RIGHT  DC.B    ')', 0
00001FA2= 2B 00                   1414  POST_INCRE   DC.B    '+', 0
00001FA4= 2D 00                   1415  PRE_DECRE   DC.B    '-', 0
00001FA6= 24 00                   1416  DOLLAR_SIGN DC.B    '$', 0
00001FA8= 23 00                   1417  POUND_SIGN  DC.B    '#', 0
00001FAA                          1418  
00001FAA                          1419  *SUB
00001FAA= 53 55 42 00             1420  SUBTRACT    DC.B    'SUB', 0
00001FAE= 41 44 44 00             1421  ADDITION    DC.B    'ADD', 0
00001FB2= 41 4E 44 00             1422  AND         DC.B    'AND', 0
00001FB6= 4F 52 00                1423  OR          DC.B    'OR', 0
00001FB9= 4E 4F 54 00             1424  NOT_OP      DC.B    'NOT', 0
00001FBD= 52 4F 4C 00             1425  ROL         DC.B    'ROL', 0
00001FC1= 52 4F 52 00             1426  ROR         DC.B    'ROR', 0
00001FC5= 4C 53 4C 00             1427  LSL         DC.B    'LSL', 0
00001FC9= 4C 53 52 00             1428  LSR         DC.B    'LSR', 0
00001FCD= 4E 4F 50 20 00          1429  NOP         DC.B    'NOP ', 0
00001FD2= 4A 53 52 20 00          1430  JSR         DC.B    'JSR ', 0
00001FD7= 52 54 53 00             1431  RTS         DC.B    'RTS', 0
00001FDC= 00000001                1432  addrStart   DC.L    1   // Starting address
00001FE0= 00000001                1433  addrEnd     DC.L    1   // ending address
00001FE4= 00000001                1434  OpCodeStorage DC.L    1
00001FE8= 00000001                1435  ScreenCounter   DC.L    1
00001FEC= 00000001                1436  OpCodeSize  DC.L    1
00001FF0= 00000001                1437  D2Storage   DC.L    1
00001FF4                          1438  
00001FF4                          1439      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   11DA
ADDITION            1FAE
ADDQ                1F69
ADDQ_B              147E
ADDQ_L              14A6
ADDQ_PRINT_IMMEDIATE  14B8
ADDQ_PRINT_IMMEDIATECONT  14D2
ADDQ_SIZE_TABLE     1466
ADDQ_W              1490
ADDREND             1FE0
ADDRESS_IMMEDIATE   1BF8
ADDRESS_L           1BDA
ADDRESS_W           1BBC
ADDRLOOP            10FE
ADDRREGTABLE        1C9A
ADDRSTART           1FDC
ADDVAL              11D4
AND                 1FB2
AREG0               1F86
AREG1               1F89
AREG2               1F8C
AREG3               1F8F
AREG4               1F92
AREG5               1F95
AREG6               1F98
AREG7               1F9B
B                   11E0
C                   11E6
CHAR                11A4
CHECKRANGE          1086
CHECK_CONT          1138
CHECK_MOVEA         1960
CLRAREG             1E22
CLRREG              1E10
COMMA               1F34
CONTINUE_PROGRAM    1ED9
CONTINUE_SCREEN     1EF2
CONVERT             118A
CR                  D
D                   11EC
D2STORAGE           1FF0
DATA                1F62
DATAREGTABLE        1C6A
DESTEACHECKER       19EC
DESTEAFINDER        1A22
DOLLAR_SIGN         1FA6
DREG0               1F6E
DREG1               1F71
DREG2               1F74
DREG3               1F77
DREG4               1F7A
DREG5               1F7D
DREG6               1F80
DREG7               1F83
E                   11F2
EA                  1992
EACHECKER           19B6
END                 10EC
F                   11F8
GETINPUT            1006
IMMEDIATE_B         1C40
IMMEDIATE_L         1C5C
IMMEDIATE_W         1C4E
INDR_LEFT           1F9E
INDR_RIGHT          1FA0
INVALID_ADDRESS     1EBE
INVALID_EA_ADDR     1E8A
INVALID_EA_SUB      1EA0
JMPTABLE            124A
JMPTODESTREG        1A58
JMPTOSRCREG         1A48
JMPTO_DEST_ADDR_REG  1A78
JMPTO_DEST_IMMEDIATE  1BA6
JMPTO_DEST_INDR_ADDR_REG  1AC4
JMPTO_SRC_ADDR_REG  1A68
JMPTO_SRC_IMMEDIATE  1B88
JMPTO_SRC_INDR_ADDR_REG  1A88
JSR                 1FD2
JSR_CHECK           138E
JSR_EACHECKER       13B6
LF                  A
LOGICALROTATETABLE  1520
LOGICALROTATE_LEFT  153E
LOGICALROTATE_RIGHT  152C
LOOP                1180
LOWERLIMIT          3000
LSL                 1FC5
LSR                 1FC9
MEMORY_ALTERABLE_CHECK  18E8
MOVEA               1F60
MOVEB               1F4C
MOVEL               1F5C
MOVEW               1F58
MOVE_PRINT          1F47
NEXT_SCREEN         1162
NOP                 1FCD
NOP_CHECK           137E
NOT_JMPTABLE        13C6
NOT_OP              1FB9
NOT_SIZE00          13DE
NOT_SIZE01          1400
NOT_SIZE10          141A
NOT_SIZE11          1434
OP0000              12A4
OP0001              12A4
OP0010              12C2
OP0011              12F2
OP0100              131A
OP0101              1438
OP0110              14E8
OP0111              14E8
OP1000              158C
OP1001              1550
OP1010              15D0
OP1011              15D0
OP1100              15D0
OP1101              160C
OP1110              1648
OPCODE              11FE
OPCODESIZE          1FEC
OPCODESTORAGE       1FE4
OPMODE000           1806
OPMODE001           1820
OPMODE010           1832
OPMODE011           1844
OPMODE100           1872
OPMODE101           188A
OPMODE110           18A2
OPMODE111           18BA
OR                  1FB6
POST_INCRE          1FA2
POST_INCREMENT_DEST  1B44
POST_INCREMENT_SRC  1B00
POUND_SIGN          1FA8
PRE_DECRE           1FA4
PRE_DECREMENT_DEST  1B52
PRE_DECREMENT_SRC   1B0E
PRINT8              17C6
PRINTA              1982
PRINTCOMMA          1DB6
PRINTDATA           1DF4
PRINTINVALIDADDRESS  1DE4
PRINTINVALIDEA      1DC4
PRINTINVALIDSUB     1DD4
PRINT_NEXTLINE      1F0F
REG_A0              1D40
REG_A1              1D54
REG_A2              1D62
REG_A3              1D70
REG_A4              1D7E
REG_A5              1D8C
REG_A6              1D9A
REG_A7              1DA8
REG_D0              1CCA
REG_D1              1CDE
REG_D2              1CEC
REG_D3              1CFA
REG_D4              1D08
REG_D5              1D16
REG_D6              1D24
REG_D7              1D32
ROL                 1FBD
ROR                 1FC1
ROTATETABLE         1680
ROTATE_B            16D0
ROTATE_EA           1724
ROTATE_EACHECKER    174C
ROTATE_L            1708
ROTATE_LEFT         169E
ROTATE_PRINT_IMMEDIATE  1792
ROTATE_PRINT_IMMEDIATECONT  17B2
ROTATE_PRINT_REGISTER  1772
ROTATE_RIGHT        168C
ROTATE_SIZE_TABLE   16B0
ROTATE_W            16EC
RTS                 1FD7
RTS_CHECK           136E
SCREENCOUNTER       1FE8
SIZE_B              1F54
SIZE_BYTE           1F3B
SIZE_LONG           1F43
SIZE_WORD           1F3F
SPACER              1F37
SPECIAL_OPMODE_USED  1854
SPECIAL_OPMODE_USED2  18CA
START               1000
SUBTABLE            17D6
SUBTRACT            1FAA
SUB_OPMODE_ADDA     193E
SUB_OPMODE_FIRST    18FA
SUB_OPMODE_SECOND   1918
TY_MESSAGE          1F12
UPPERLIMIT          FFFFFE
WELCOME             1E4C
WELCOME2            1E6C
YESNOSTORAGE        50
