00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/12/2020 3:09:06 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00003000                  8  LowerLimit      EQU     $00003000
00000000  =00FFFFFE                  9  UpperLimit      EQU     $00FFFFFE
00000000  =00000050                 10  YesNoStorage    EQU     $00000050
00000000                            11  
00005000                            12      ORG     $5000
00005000                            13  SPECIALTEST:
00005000  D401                      14          ADD.B     D1,D2
00005002  D311                      15      ADD.B     D1,(A1)
00005004                            16  
00006000                            17      ORG    $6000
00006000                            18  ROLTEST:
00006000                            19  
00006000                            20  
00006000                            21  
00006000                            22  
00006000                            23  
00009000                            24      ORG    $9000
00009000                            25  TESTER:
00009000  4611                      26          NOT.B       (A1)
00009002  4659                      27          NOT.W       (A1)+
00009004  4693                      28          NOT.L       (A3)
00009006  1200                      29          MOVE.B    D0,D1
00009008  1200                      30          MOVE.B    D0,D1
0000900A                            31  
0000900A                            32    
0000900A                            33  
00001000                            34      ORG    $1000
00001000                            35  *=================================================================
00001000                            36  *                     THIS IS OUR MAIN METHOD
00001000                            37  *               Don't throw random stuff in it, keep it to a minimum
00001000                            38  
00001000                            39  START:                  ; first instruction of program
00001000  4EB9 00001006             40          JSR     GETINPUT
00001006                            41  *=================================================================
00001006                            42  *---------------Get starting and ending addresss------- Kelvin
00001006                            43  *--------------- PRE: will be using D0, D5, A1
00001006                            44  *----------------Post: Address will be stored in addrStart and addrEnd
00001006                            45  GETINPUT:
00001006  4EB9 00002368             46          JSR     CLRREG    *clean registers to restart program
0000100C  4EB9 0000237A             47          JSR     CLRAREG
00001012  23FC 00000000 0000255E    48          MOVE.L  #0, ScreenCounter * initalize screenCounter
0000101C  43F9 000023A4             49          LEA     WELCOME, A1
00001022  103C 000E                 50          MOVE.B  #14,    D0
00001026  4E4F                      51          TRAP    #15
00001028  327C 0000                 52          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
0000102C  103C 0002                 53          MOVE.B  #2,D0
00001030  4E4F                      54          TRAP    #15
00001032  2801                      55          MOVE.L  D1, D4   // Move input length into D4, See Convert Pre conditon
00001034  7000                      56          MOVE.L  #$0, d0  // intitiate counter
00001036  4EB9 00001188             57          JSR     LOOP    // Convert starting address into hex
0000103C  23C5 00002552             58          MOVE.L  D5, addrStart
00001042  43F9 000023C4             59          LEA     WELCOME2, A1
00001048  103C 000E                 60          MOVE.B  #14,    D0
0000104C  4E4F                      61          TRAP    #15
0000104E  327C 0000                 62          MOVEA   #$0, A1 // Clear A1 to prevent screen freeze
00001052  103C 0002                 63          MOVE.B  #2,D0
00001056  4E4F                      64          TRAP    #15
00001058  4245                      65          CLR     D5       // Clear D5 for exit address
0000105A  1801                      66          MOVE.B  D1, D4   // Move input length into D4, See Convert Pre conditon
0000105C  103C 0000                 67          MOVE.B  #$0, d0  // intitiate counter
00001060  4EB9 00001188             68          JSR     LOOP    // Convert Ending address int Hex
00001066  23C5 00002556             69          MOVE.L  D5, addrEnd
0000106C  4EB9 00001086             70          JSR     CheckRange
00001072  2039 00002552             71          MOVE.L  addrStart, D0
00001078  2C40                      72          MOVEA.L D0, A6
0000107A  4EB9 00001206             73          JSR     OPCODE
00001080  4EF9 000010E0             74          JMP     END
00001086                            75  
00001086                            76  *==================================================================
00001086                            77  *-----------------Check if the range is above or under the limit
00001086                            78  *------------------Pre: addrStart and addrEnd has begin and end values
00001086                            79          
00001086                            80  CheckRange:
00001086  2C79 00002552             81          MOVE.L  AddrStart, A6
0000108C  203C 00003000             82          MOVE.L  #LowerLimit, D0
00001092  B08E                      83          CMP.L   A6, D0
00001094  6E00 12A6                 84          BGT     PRINTINVALIDADDRESS
00001098  203C 00FFFFFE             85          MOVE.L  #UpperLimit, D0
0000109E  B08E                      86          CMP.L   A6, D0
000010A0  6D00 129A                 87          BLT     PRINTINVALIDADDRESS
000010A4  2039 00002552             88          MOVE.L  AddrStart, D0
000010AA  0800 0000                 89          BTST    #0, D0
000010AE  6600 128C                 90          BNE     PRINTInvalidAddress
000010B2  2C79 00002556             91          MOVE.L  AddrEnd, A6
000010B8  203C 00003000             92          MOVE.L  #LowerLimit, D0
000010BE  B08E                      93          CMP.L   A6, D0
000010C0  6E00 127A                 94          BGT     PRINTINVALIDADDRESS
000010C4  203C 00FFFFFE             95          MOVE.L  #UpperLimit, D0
000010CA  B08E                      96          CMP.L   A6, D0
000010CC  6D00 126E                 97          BLT     PRINTINVALIDADDRESS
000010D0  2039 00002556             98          MOVE.L  AddrEnd, D0
000010D6  0800 0000                 99          BTST    #0, D0
000010DA  6600 1260                100          BNE     PrintInvalidAddress
000010DE  4E75                     101          RTS
000010E0                           102  
000010E0                           103  END:
000010E0  43F9 00002463            104          LEA     TY_Message, A1
000010E6  103C 000E                105          MOVE.B  #14, D0
000010EA  4E4F                     106          TRAP    #15
000010EC  103C 0009                107          MOVE.B  #9, D0
000010F0  4E4F                     108          TRAP    #15
000010F2                           109          
000010F2                           110  *Please start from here Annabelle
000010F2                           111  AddrLoop:
000010F2  4EB9 00002368            112          JSR     CLRREG    *clean registers to restart program
000010F8  4EB9 0000237A            113          JSR     CLRAREG
000010FE  43F9 00002460            114          LEA     PRINT_NEXTLINE, A1
00001104  103C 000E                115          MOVE.B  #14, D0
00001108  4E4F                     116          TRAP    #15
0000110A  2879 00002556            117          MOVE.L  addrEnd, A4
00001110  B9CE                     118          CMP.L   A6, A4
00001112  6F00 0018                119          BLE     CHECK_CONT
00001116  5239 0000255E            120          ADD.B   #1, ScreenCounter
0000111C  0C39 001E 0000255E       121          CMP.B   #30, ScreenCounter
00001124  6700 0030                122          BEQ     Next_Screen
00001128  6000 00DC                123          BRA     OPCODE
0000112C                           124          
0000112C                           125  *===========Check if user wants to continue
0000112C                           126  CHECK_CONT:
0000112C  43F9 00002431            127          LEA     Continue_Program, A1
00001132  103C 000E                128          MOVE.B  #14, D0
00001136  4E4F                     129          TRAP    #15
00001138  43F8 0050                130          LEA     YesNoStorage, A1
0000113C  103C 0002                131          MOVE.B  #2, D0
00001140  4E4F                     132          TRAP    #15
00001142  0C11 0059                133          CMP.B   #$59, (A1) * Yes
00001146  6700 FEBE                134          BEQ     GETINPUT
0000114A  0C11 0079                135          CMP.B   #$79, (A1)
0000114E  6700 FEB6                136          BEQ     GETINPUT
00001152  4EF8 10E0                137          JMP     END
00001156                           138          
00001156                           139  NEXT_SCREEN:
00001156  13FC 0000 0000255E       140          MOVE.B  #0, ScreenCounter
0000115E  43F9 00002449            141          LEA     Continue_Screen, A1
00001164  103C 000E                142          MOVE.B  #14, D0
00001168  4E4F                     143          TRAP    #15
0000116A  43F8 0050                144          LEA     YesNoStorage, A1
0000116E  103C 0002                145          MOVE.B  #2, D0
00001172  4E4F                     146          TRAP    #15
00001174  0C11 0059                147          CMP.B   #$59, (A1) * Yes
00001178  6700 FF78                148          BEQ     AddrLoop
0000117C  0C11 0079                149          CMP.B   #$79, (A1)
00001180  6700 FF70                150          BEQ     AddrLoop
00001184  4EF8 10E0                151          JMP     END
00001188                           152          
00001188                           153  LOOP
00001188                           154  
00001188  B880                     155          CMP.L   D0, D4  // Loop until length of word reached
0000118A  6E00 0006                156          BGT     CONVERT
0000118E  5480                     157          ADD.L   #$2, D0 
00001190  4E75                     158          RTS 
00001192                           159  
00001192                           160  *=================================================================
00001192                           161  *---------------NUMBER CONVERSION FROM INPUT TO HEX------- Kelvin
00001192                           162  *PRE      D4 must contain input length, d0 must be 0
00001192                           163  *POST     D5 WILL CONTAIN ADDRESS VALUE IN HEX        
00001192                           164  CONVERT:
00001192  5280                     165          ADDQ.L  #$1, D0 // increment counter
00001194  1211                     166          move.b  (A1),D1    // Get next bit from Input
00001196  5289                     167          adda.L  #1, A1      // Increment Input
00001198  0401 0030                168          sub.b   #$30,D1     //
0000119C  B23C 0010                169          cmp.b   #$10,D1   // Check if value is larger than 10
000011A0  6E00 000A                170          bgt     CHAR      // Find Hex
000011A4  1401                     171          move.b  D1, D2    // IF it is less than 10
000011A6  4EF9 000011DC            172          JMP     ADDVAL        
000011AC                           173  CHAR:
000011AC  B23C 0011                174          CMP.B   #$11, D1 // Convert each hex into an appropriate hex
000011B0  6700 0030                175          BEQ     A
000011B4  B23C 0012                176          CMP.B   #$12, D1
000011B8  6700 002E                177          BEQ     B
000011BC  B23C 0013                178          CMP.B   #$13, D1
000011C0  6700 002C                179          BEQ     C
000011C4  B23C 0014                180          CMP.B   #$14, D1
000011C8  6700 002A                181          BEQ     D
000011CC  B23C 0015                182          CMP.B   #$15, D1
000011D0  6700 0028                183          BEQ     E
000011D4  B23C 0016                184          CMP.B   #$16, D1
000011D8  6700 0026                185          BEQ     F
000011DC                           186  
000011DC                           187  ADDVAL:
000011DC  E98D                     188          lsl.l    #$4, D5 // Shift based on position
000011DE  DA82                     189          add.l    D2, D5 //Add value into Input
000011E0  60A6                     190          BRA      LOOP
000011E2                           191      
000011E2                           192  A:
000011E2  740A                     193          MOVE.L  #$A, D2 
000011E4  4EF8 11DC                194          jmp ADDVAL
000011E8                           195  B:
000011E8  740B                     196          MOVE.L  #$B, D2
000011EA  4EF8 11DC                197          jmp ADDVAL
000011EE                           198  C:
000011EE  740C                     199          MOVE.L  #$C, D2
000011F0  4EF8 11DC                200          jmp ADDVAL
000011F4                           201  D:
000011F4  740D                     202          MOVE.L  #$D, D2
000011F6  4EF8 11DC                203          jmp ADDVAL
000011FA                           204  E:
000011FA  740E                     205          MOVE.L  #$E, D2
000011FC  4EF8 11DC                206          jmp ADDVAL
00001200                           207  F:
00001200  740F                     208          MOVE.L  #$F, D2
00001202  4EF8 11DC                209          jmp ADDVAL
00001206                           210          
00001206                           211  *=======================================================================
00001206                           212  *---------Find the first 4 of instruction and determines the instruction
00001206                           213  OPCODE:
00001206  4280                     214          CLR.L   D0
00001208  4281                     215          CLR.L   D1
0000120A  4282                     216          CLR.L   D2
0000120C  220E                     217          MOVE.L  A6, D1  * PRINT ADDRESS PER LINE
0000120E  143C 0010                218          MOVE.B  #16, D2
00001212  103C 000F                219          MOVE.B  #15, D0
00001216  4E4F                     220          TRAP    #15
00001218  227C 00000000            221          MOVE.L  #$00000000, A1
0000121E  43F9 00002488            222          LEA     SPACER, A1
00001224  103C 000E                223          MOVE.B  #14, D0
00001228  4E4F                     224          TRAP    #15
0000122A  4280                     225          CLR.L     D0
0000122C  4281                     226          CLR.L     D1
0000122E  4282                     227          CLR.L     D2
00001230  321E                     228          MOVE.W  (A6)+,D1
00001232  2401                     229          MOVE.L  D1, D2  //D2 now containse the opperand EA!!!
00001234  E849                     230          LSR.W   #4, D1
00001236  E849                     231          LSR.W   #4, D1
00001238  E849                     232          LSR.W   #4, D1  //Right Shift 3 times
0000123A  1001                     233          MOVE.B  D1, D0  // OPCODE FOUND
0000123C  B03C 000E                234          CMP.B   #%1110, D0
00001240  6E00 110A                235          BGT     PRINTDATA
00001244  C0FC 0006                236          MULU    #6, D0
00001248                           237          *MOVE.B  D0, OpCodeSize
00001248  45F9 00001252            238          LEA     JMPTABLE, A2
0000124E  4EF2 0000                239          JMP     (A2, D0)
00001252                           240          
00001252                           241  *========================================================================
00001252                           242  *--------Jump table used for different opcode!!! Please orgainze well using decimal
00001252                           243  *------- Add your instructions here
00001252                           244  JMPTABLE
00001252  4EF9 000012AC            245          JMP     OP0000
00001258  4EF9 000012AC            246          JMP     OP0001 *MOVEB
0000125E  4EF9 000012CA            247          JMP     OP0010 *MOVEL
00001264  4EF9 000012FA            248          JMP     OP0011 *MOVEW
0000126A  4EF9 00001322            249          JMP     OP0100 *NOT NOP JSR LEA MOVEM RTS
00001270  4EF9 00001668            250          JMP     OP0101 *ADDQ
00001276  4EF9 00001668            251          JMP     OP0110 *BRA BGT BLE BEQ
0000127C  4EF9 00001826            252          JMP     OP0111 *MOVEQ
00001282  4EF9 000018F6            253          JMP     OP1000 *OR
00001288  4EF9 000018BA            254          JMP     OP1001 *SUB
0000128E  4EF9 0000193A            255          JMP     OP1010
00001294  4EF9 0000193A            256          JMP     OP1011
0000129A  4EF9 0000193A            257          JMP     OP1100 *AND
000012A0  4EF9 00001976            258          JMP     OP1101 *ADD ADDA
000012A6  4EF9 000019B2            259          JMP     OP1110 *ROR ROL ASL ASR LSL LSR
000012AC                           260  
000012AC                           261  *=====================================================================    
000012AC                           262  *--------------D2 must contain Entire opcode for everything below
000012AC                           263  OP0000:
000012AC                           264  *-> MOVE.B
000012AC                           265  OP0001:
000012AC  13FC 0000 00002562       266          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012B4  43F9 0000249D            267          LEA     MOVEB, A1
000012BA  103C 000E                268          MOVE.B  #14, D0
000012BE  4E4F                     269          TRAP    #15
000012C0  4EB9 00001EFE            270          JSR     EA * Find SRC EA
000012C6  6000 0CB8                271          BRA     DESTEAFINDER * FIND DEST EA
000012CA                           272  * -> MOVE.L
000012CA                           273  * Printed using MOVEL String as a variable on the very bottom
000012CA                           274  OP0010:
000012CA  13FC 0002 00002562       275          MOVE.B  #%10, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000012D2  43F9 00002498            276          LEA     MOVE_PRINT, A1
000012D8  103C 000E                277          MOVE.B  #14, D0
000012DC  4E4F                     278          TRAP    #15
000012DE  4EB9 00001ECC            279          JSR     CHECK_MOVEA
000012E4  43F9 000024AD            280          LEA     MOVEL, A1
000012EA  103C 000E                281          MOVE.B  #14, D0
000012EE  4E4F                     282          TRAP    #15
000012F0  4EB9 00001EFE            283          JSR     EA *Find SRC EA
000012F6  6000 0C88                284          BRA     DESTEAFINDER *FIND DEST EA
000012FA                           285  * -> MOVE.W
000012FA                           286  OP0011:
000012FA  43F9 00002498            287          LEA     MOVE_PRINT, A1
00001300  103C 000E                288          MOVE.B  #14, D0
00001304  4E4F                     289          TRAP    #15
00001306  4EB9 00001ECC            290          JSR     CHECK_MOVEA
0000130C  43F9 000024A9            291          LEA     MOVEW, A1
00001312  103C 000E                292          MOVE.B  #14, D0
00001316  4E4F                     293          TRAP    #15
00001318  4EB9 00001EFE            294          JSR     EA * FIND SRC EA
0000131E  6000 0C60                295          BRA     DESTEAFINDER *FIND DEST EA
00001322                           296          
00001322                           297  *-> NOT, MOVEM, JSR, RTS, LEA, NOP
00001322                           298  OP0100:
00001322  3602                     299          MOVE.W  D2, D3
00001324  0803 000B                300          BTST.L  #11, D3
00001328  6600 0022                301          BNE     MOVEM_JSR
0000132C  E04B                     302          LSR.W   #8, D3
0000132E  B63C 0046                303          CMP.B   #$46, D3
00001332  6700 002C                304          BEQ     OP_NOT
00001336                           305          
00001336  3602                     306          MOVE.W  D2, D3
00001338  E04B                     307          LSR.W   #8, D3
0000133A  B63C 004E                308          CMP.B   #$4E, D3
0000133E  6700 00C4                309          BEQ     OP_JSR
00001342                           310          
00001342  2602                     311          MOVE.L  D2, D3
00001344  0803 0008                312          BTST.L  #8, D3
00001348  6600 00FA                313          BNE     OP_LEA
0000134C                           314          
0000134C                           315  MOVEM_JSR:
0000134C  0803 0008                316          BTST.L  #8, D3
00001350  6600 00F2                317          BNE     OP_LEA
00001354  0803 0009                318          BTST.L  #9, D3
00001358  6700 0138                319          BEQ     OP_MOVEM
0000135C  6600 00A6                320          BNE     OP_JSR
00001360                           321  
00001360                           322  OP_NOT:
00001360  43F9 00002514            323          LEA     NOT_OP, A1
00001366  103C 000E                324          MOVE.B  #14, D0
0000136A  4E4F                     325          TRAP    #15
0000136C  E14A                     326          LSL.W   #8, D2
0000136E  3602                     327          MOVE.W  D2, D3 * D3 = SIZE OF INSTRUCTION
00001370  E04B                     328          LSR.W   #8, D3
00001372  EC4B                     329          LSR.W   #6, D3
00001374  3202                     330          MOVE.W  D2, D1 * D1 = EA OPMODE
00001376  E549                     331          LSL.W   #2, D1
00001378  E049                     332          LSR.W   #8, D1
0000137A  EA49                     333          LSR.W   #5, D1
0000137C  3002                     334          MOVE.W  D2, D0 * D0 = EA REGISTER
0000137E  EB48                     335          LSL.W   #5, D0
00001380  E048                     336          LSR.W   #8, D0
00001382  EA48                     337          LSR.W   #5, D0
00001384  C6FC 0006                338          MULU    #6, D3 * Multiply for JMPTABLE
00001388  45F9 00001392            339          LEA     NOT_JMPTable, A2
0000138E  4EB2 3000                340          JSR     (A2, D3)
00001392                           341          
00001392                           342  NOT_JMPTable
00001392  4EF9 000013AA            343          JMP     NOT_SIZE00
00001398  4EF9 000013CC            344          JMP     NOT_SIZE01
0000139E  4EF9 000013E6            345          JMP     NOT_SIZE10
000013A4  4EF9 00001400            346          JMP     NOT_SIZE11
000013AA                           347  *NOT.B
000013AA                           348  NOT_SIZE00:
000013AA  13FC 0000 00002562       349          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
000013B2  1A00                     350          MOVE.B  D0, D5  *TEMP STORAGE FOR D0
000013B4  43F9 000024A5            351          LEA     SIZE_B, A1
000013BA  103C 000E                352          MOVE.B  #14, D0
000013BE  4E4F                     353          TRAP    #15
000013C0  1005                     354          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013C2  4EB9 00001F1C            355          JSR     EACHECKER
000013C8  6000 FD28                356          BRA     AddrLoop
000013CC                           357  * NOT.W
000013CC                           358  NOT_SIZE01: 
000013CC  1A00                     359          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
000013CE  43F9 00002490            360          LEA     SIZE_WORD, A1
000013D4  103C 000E                361          MOVE.B  #14, D0
000013D8  4E4F                     362          TRAP    #15
000013DA  1005                     363          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013DC  4EB9 00001F1C            364          JSR     EACHECKER
000013E2  6000 FD0E                365          BRA     AddrLoop
000013E6                           366  * NOT.L
000013E6                           367  NOT_SIZE10:
000013E6  1A00                     368          MOVE.B  D0, D5 *TEMP STORAGE FOR D0
000013E8  43F9 00002494            369          LEA     SIZE_LONG, A1
000013EE  103C 000E                370          MOVE.B  #14, D0
000013F2  4E4F                     371          TRAP    #15
000013F4  1005                     372          MOVE.B  D5, D0 * RETURN TEMP STORAGE
000013F6  4EB9 00001F1C            373          JSR     EACHECKER
000013FC  6000 FCF4                374          BRA     AddrLoop
00001400                           375  NOT_SIZE11:
00001400  6000 0F1A                376          BRA     PRINTINVALIDEA
00001404                           377  
00001404                           378  OP_JSR:
00001404  4EB9 00001430            379          JSR     JSR_DATA
0000140A  BC3C 0002                380          CMP.B   #$2, D6
0000140E  6700 0B42                381          BEQ     DESTEACHECKER
00001412  BC3C 0007                382          CMP.B   #$7, D6
00001416  6700 0C04                383          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000141A  4EB9 0000231C            384          JSR     PrintInvalidEA
00001420  43F9 00002534            385          LEA     JSR, A1
00001426  103C 000E                386          MOVE.B  #14, D0
0000142A  4E4F                     387          TRAP    #15
0000142C  4EB2 4000                388          JSR     (A2, D4)
00001430                           389          
00001430                           390  JSR_DATA:
00001430  2602                     391          MOVE.L  D2, D3
00001432  0203 0007                392          ANDI.B  #$7, D3
00001436  1E03                     393          MOVE.B  D3, D7
00001438  2602                     394          MOVE.L  D2, D3
0000143A  E64B                     395          LSR.W   #3, D3
0000143C  0203 0007                396          ANDI.B  #$7, D3
00001440  1C03                     397          MOVE.B  D3, D6
00001442  4E75                     398          RTS
00001444                           399  
00001444                           400  OP_LEA:
00001444  4EB9 00001470            401          JSR     LEA_DATA
0000144A  BC3C 0002                402          CMP.B   #$2, D6
0000144E  6700 0B02                403          BEQ     DESTEACHECKER
00001452  BC3C 0007                404          CMP.B   #$7, D6
00001456  6700 0BC4                405          BEQ     JMPTO_DEST_INDR_ADDR_REG
0000145A  4EB9 0000231C            406          JSR     PrintInvalidEA
00001460  43F9 0000253C            407          LEA     LEA, A1
00001466  103C 000E                408          MOVE.B  #14, D0
0000146A  4E4F                     409          TRAP    #15
0000146C  4EB2 4000                410          JSR     (A2, D4)
00001470                           411  
00001470                           412  LEA_DATA:
00001470  2602                     413          MOVE.L  D2, D3
00001472  0203 0007                414          ANDI.B  #$7, D3
00001476  1E03                     415          MOVE.B  D3, D7
00001478  2602                     416          MOVE.L  D2, D3
0000147A  E64B                     417          LSR.W   #3, D3
0000147C  0203 0007                418          ANDI.B  #$7, D3
00001480  1C03                     419          MOVE.B  D3, D6
00001482  2602                     420          MOVE.L  D2, D3
00001484  EA4B                     421          LSR.W   #5, D3
00001486  E84B                     422          LSR.W   #4, D3
00001488  0203 0007                423          ANDI.B  #$7, D3
0000148C  1A03                     424          MOVE.B  D3, D5
0000148E  2602                     425          MOVE.L  D2, D3
00001490  4E75                     426          RTS
00001492                           427  
00001492                           428  OP_MOVEM:
00001492  3602                     429          MOVE.W  D2, D3
00001494  EE4B                     430          LSR.W   #7, D3
00001496  0243 0007                431          ANDI.W  #%111, D3
0000149A  0C43 0001                432          CMPI.W  #%001, D3
0000149E  6600 0E8C                433          BNE     PrintInvalidSUB
000014A2  3602                     434          MOVE.W  D2, D3
000014A4  4EB9 000014CC            435          JSR     MOVEM_SRC
000014AA  4EB9 000014E0            436          JSR     MOVEM_SIZE
000014B0  4EB9 000014F0            437          JSR     MOVEM_DATAREGISTER
000014B6  4EB9 00001502            438          JSR     MOVEM_REG_LIST
000014BC  0C39 0000 000024C6       439          CMPI.B  #%0, MOVEM_DR
000014C4  6700 0048                440          BEQ     MOVEM_REG_MEM
000014C8  6000 0070                441          BRA     MOVEM_MEM_REG
000014CC                           442          
000014CC                           443  
000014CC                           444  MOVEM_SRC:
000014CC  3602                     445         MOVE.W   D2, D3
000014CE  E64B                     446         LSR.W    #3, D3
000014D0  0243 0007                447         ANDI.W   #$7, D3
000014D4  3A03                     448         MOVE.W   D3, D5
000014D6  3602                     449         MOVE.W   D2, D3
000014D8  0243 0007                450         ANDI.W   #$7, D3
000014DC  3803                     451         MOVE.W   D3, D4
000014DE  4E75                     452         RTS
000014E0                           453  
000014E0                           454  MOVEM_SIZE:
000014E0  3602                     455         MOVE.W   D2, D3
000014E2  EC4B                     456         LSR.W    #6, D3
000014E4  0243 0001                457         ANDI.W   #%1, D3
000014E8  13C3 000024C7            458         MOVE.B   D3, SIZE_MOVEM
000014EE  4E75                     459         RTS
000014F0                           460  
000014F0                           461  
000014F0                           462  MOVEM_DATAREGISTER:
000014F0  3602                     463          MOVE.W  D2, D3
000014F2  EE4B                     464          LSR.W   #7, D3
000014F4  E64B                     465          LSR.W   #3, D3
000014F6  0243 0001                466          ANDI.W  #%1, D3
000014FA  13C3 000024C6            467          MOVE.B  D3, MOVEM_DR
00001500  4E75                     468          RTS
00001502                           469  
00001502                           470  MOVEM_REG_LIST:
00001502  0C5A 0000                471          CMPI.W  #0, (A2)+
00001506  33D2 000024C8            472          MOVE.W  (A2),REG_LIST
0000150C  4E75                     473          RTS
0000150E                           474          
0000150E                           475  
0000150E                           476  MOVEM_REG_MEM:
0000150E  0C45 0007                477          CMPI.W #%111, D5
00001512  6700 0052                478          BEQ    MOVEM_REG_MEM_EA
00001516  0C45 0002                479          CMPI.W #%010, D5
0000151A  6700 0084                480          BEQ    MOVEM_REG_MEM_INC
0000151E  0C45 0004                481          CMPI.W #%100, D5
00001522  6700 009E                482          BEQ    MOVEM_REG_MEM_DEC
00001526  4EB9 0000231C            483          JSR    PrintInvalidEA
0000152C  43F9 000024C0            484          LEA    MOVEM, A1
00001532  103C 000E                485          MOVE.B #14, D0
00001536  4E4F                     486          TRAP   #15
00001538  4E75                     487          RTS
0000153A                           488  
0000153A                           489  MOVEM_MEM_REG:
0000153A  0C45 0007                490          CMPI.W #%111, D5
0000153E  6700 0026                491          BEQ    MOVEM_REG_MEM_EA
00001542  0C45 0002                492          CMPI.W #%010, D5
00001546  6700 0058                493          BEQ    MOVEM_REG_MEM_INC
0000154A  0C45 0003                494          CMPI.W #%011, D5
0000154E  6700 0072                495          BEQ    MOVEM_REG_MEM_DEC
00001552  4EB9 0000231C            496          JSR    PrintInvalidEA
00001558  43F9 000024C0            497          LEA    MOVEM, A1
0000155E  103C 000E                498          MOVE.B #14, D0
00001562  4E4F                     499          TRAP   #15
00001564  4E75                     500          RTS
00001566                           501  
00001566                           502  * ------------- MOVEM PRINT FUNCTIONS --------------
00001566                           503  MOVEM_REG_MEM_EA:
00001566  3E04                     504          MOVE.W  D4, D7
00001568  4EB9 00001FC0            505          JSR     JMPTO_SRC_ADDR_REG
0000156E  3A39 000024C8            506          MOVE.W  REG_LIST, D5
00001574  4EB9 0000230E            507          JSR     PRINTCOMMA
0000157A  43F9 00002501            508          LEA     DOLLAR_SIGN, A1
00001580  2206                     509          MOVE.L  D6, D1
00001582  143C 0010                510          MOVE.B  #16, D2 
00001586  103C 000F                511          MOVE.B  #15, D0
0000158A  4E4F                     512          TRAP    #15
0000158C  43F9 00002460            513          LEA     Print_NextLine, A1
00001592  3412                     514          MOVE.W  (A2),D2
00001594  B5F9 00002556            515          CMP.L   addrEnd, A2
0000159A  6D00 FBEC                516          BLT     Loop
0000159E  4E75                     517          RTS
000015A0                           518              
000015A0                           519  
000015A0                           520  MOVEM_REG_MEM_INC:
000015A0  3E05                     521          MOVE.W  D5, D7
000015A2  4EB9 00001FC0            522          JSR     JMPTO_SRC_ADDR_REG
000015A8  3A39 000024C8            523          MOVE.W  REG_LIST, D5
000015AE  4EB9 0000201C            524          JSR     JMPTO_DEST_INDR_ADDR_REG
000015B4  4EB9 0000230E            525          JSR     PRINTCOMMA
000015BA  43F9 00002460            526          LEA     Print_NextLine, A1
000015C0  4E75                     527          RTS
000015C2                           528  
000015C2                           529  
000015C2                           530  MOVEM_REG_MEM_DEC:
000015C2  3E05                     531          MOVE.W  D5, D7
000015C4  4EB9 00001FC0            532          JSR     JMPTO_SRC_ADDR_REG
000015CA  3A39 000024C8            533          MOVE.W  REG_LIST, D5
000015D0  4EB9 0000201C            534          JSR     JMPTO_DEST_INDR_ADDR_REG
000015D6  4EB9 0000230E            535          JSR     PRINTCOMMA
000015DC  43F9 00002460            536          LEA     Print_NextLine, A1
000015E2  4E75                     537          RTS
000015E4                           538  
000015E4                           539  
000015E4                           540  MOVEM_MEM_REG_EA:
000015E4  3E04                     541          MOVE.W  D4, D7
000015E6  4EB9 00001FC0            542          JSR     JMPTO_SRC_ADDR_REG
000015EC  3A39 000024C8            543          MOVE.W  REG_LIST, D5
000015F2  43F9 00002501            544          LEA     DOLLAR_SIGN, A1
000015F8  2206                     545          MOVE.L  D6, D1
000015FA  143C 0010                546          MOVE.B  #16, D2 
000015FE  103C 000F                547          MOVE.B  #15, D0
00001602  4E4F                     548          TRAP    #15
00001604  4EB9 0000230E            549          JSR     PRINTCOMMA
0000160A  3A39 000024C8            550          MOVE.W  REG_LIST, D5
00001610  43F9 00002460            551          LEA     Print_NextLine, A1
00001616  3412                     552          MOVE.W  (A2),D2
00001618  B5F9 00002556            553          CMP.L   addrEnd, A2
0000161E  6D00 FB68                554          BLT     Loop
00001622  4E75                     555          RTS
00001624                           556  
00001624                           557  
00001624                           558  MOVEM_MEM_REG_INC:
00001624  3E05                     559          MOVE.W  D5, D7
00001626  4EB9 00001FC0            560          JSR     JMPTO_SRC_ADDR_REG
0000162C  3A39 000024C8            561          MOVE.W  REG_LIST, D5
00001632  4EB9 0000201C            562          JSR     JMPTO_DEST_INDR_ADDR_REG
00001638  4EB9 0000230E            563          JSR     PRINTCOMMA
0000163E  43F9 00002460            564          LEA     Print_NextLine, A1
00001644  4E75                     565          RTS
00001646                           566  
00001646                           567  
00001646                           568  MOVEM_MEM_REG_DEC:
00001646  3E05                     569          MOVE.W  D5, D7
00001648  4EB9 00001FC0            570          JSR     JMPTO_SRC_ADDR_REG
0000164E  3A39 000024C8            571          MOVE.W  REG_LIST, D5
00001654  4EB9 0000201C            572          JSR     JMPTO_DEST_INDR_ADDR_REG
0000165A  4EB9 0000230E            573          JSR     PRINTCOMMA
00001660  43F9 00002460            574          LEA     Print_NextLine, A1
00001666  4E75                     575          RTS
00001668                           576  
00001668                           577  
00001668                           578  * ----------------------------------------------------
00001668                           579              
00001668                           580  OP0101:
00001668                           581  
00001668                           582  * ----------------------------------------------------
00001668                           583  * BRA, Bcc(BGT, BLE, BEQ)        
00001668                           584  OP0110:
00001668  3602                     585          MOVE.W      D2, D3
0000166A  EE4B                     586          LSR.W       #7, D3
0000166C  E24B                     587          LSR.W       #1, D3
0000166E  0243 000F                588          ANDI.W      #$0F, D3
00001672  0C43 0000                589          CMPI.W      #0, D3
00001676  6700 001A                590          BEQ         OP_BRA
0000167A  0C43 000E                591          CMPI.W      #%1110, D3
0000167E  6700 005E                592          BEQ         OP_BGT
00001682  0C43 000F                593          CMPI.W      #%1111, D3
00001686  6700 00A2                594          BEQ         OP_BLE
0000168A  0C43 0007                595          CMPI.W      #%0111, D3
0000168E  6700 00E6                596          BEQ         OP_BEQ
00001692                           597      
00001692                           598  OP_BRA:
00001692  2602                     599          MOVE.L  D2, D3
00001694  0243 00FF                600          ANDI.W  #$FF, D3
00001698  3A03                     601          MOVE.W  D3, D5
0000169A  43F9 0000254C            602          LEA     BRA, A1
000016A0  103C 000E                603          MOVE.B  #14, D0
000016A4  4E4F                     604          TRAP    #15
000016A6  B67C 0000                605          CMP.W   #$00, D3
000016AA  6700 0116                606          BEQ     BRA_WORD
000016AE  B67C 00FF                607          CMP.W   #$FF, D3
000016B2  6700 0140                608          BEQ     BRA_LONG
000016B6  43F9 00002501            609          LEA     DOLLAR_SIGN, A1
000016BC  D605                     610          ADD.B   D5, D3
000016BE  5403                     611          ADD.B   #2, D3
000016C0  2203                     612          MOVE.L  D3, D1
000016C2  143C 0010                613          MOVE.B  #16, D2
000016C6  103C 000F                614          MOVE.B  #15, D0
000016CA  4E4F                     615          TRAP    #15
000016CC  43F9 00002460            616          LEA     Print_NextLine, A1
000016D2  341A                     617          MOVE.W  (A2)+,D2
000016D4  B5F9 00002556            618          CMP.L   addrEnd, A2
000016DA  6D00 FAAC                619          BLT     Loop
000016DE                           620          
000016DE                           621  
000016DE                           622  OP_BGT:
000016DE  2602                     623          MOVE.L  D2, D3
000016E0  0243 00FF                624          ANDI.W  #$FF, D3
000016E4  3A03                     625          MOVE.W  D3, D5
000016E6  43F9 00002540            626          LEA     BGT, A1
000016EC  103C 000E                627          MOVE.B  #14, D0
000016F0  4E4F                     628          TRAP    #15
000016F2  B67C 0000                629          CMP.W   #$00, D3
000016F6  6700 00CA                630          BEQ     BRA_WORD
000016FA  B67C 00FF                631          CMP.W   #$FF, D3
000016FE  6700 00F4                632          BEQ     BRA_LONG
00001702  43F9 00002501            633          LEA     DOLLAR_SIGN, A1
00001708  D605                     634          ADD.B   D5, D3
0000170A  5403                     635          ADD.B   #2, D3
0000170C  2203                     636          MOVE.L  D3, D1
0000170E  143C 0010                637          MOVE.B  #16, D2
00001712  103C 000F                638          MOVE.B  #15, D0
00001716  4E4F                     639          TRAP    #15
00001718  43F9 00002460            640          LEA     Print_NextLine, A1
0000171E  341A                     641          MOVE.W  (A2)+,D2
00001720  B5F9 00002556            642          CMP.L   addrEnd, A2
00001726  6D00 FA60                643          BLT     Loop
0000172A                           644  
0000172A                           645  OP_BLE:
0000172A  2602                     646          MOVE.L  D2, D3
0000172C  0243 00FF                647          ANDI.W  #$FF, D3
00001730  3A03                     648          MOVE.W  D3, D5
00001732  43F9 00002544            649          LEA     BLE, A1
00001738  103C 000E                650          MOVE.B  #14, D0
0000173C  4E4F                     651          TRAP    #15
0000173E  B67C 0000                652          CMP.W   #$00, D3
00001742  6700 007E                653          BEQ     BRA_WORD
00001746  B67C 00FF                654          CMP.W   #$FF, D3
0000174A  6700 00A8                655          BEQ     BRA_LONG
0000174E  43F9 00002501            656          LEA     DOLLAR_SIGN, A1
00001754  D605                     657          ADD.B   D5, D3
00001756  5403                     658          ADD.B   #2, D3
00001758  2203                     659          MOVE.L  D3, D1
0000175A  143C 0010                660          MOVE.B  #16, D2
0000175E  103C 000F                661          MOVE.B  #15, D0
00001762  4E4F                     662          TRAP    #15
00001764  43F9 00002460            663          LEA     Print_NextLine, A1
0000176A  341A                     664          MOVE.W  (A2)+,D2
0000176C  B5F9 00002556            665          CMP.L   addrEnd, A2
00001772  6D00 FA14                666          BLT     Loop
00001776                           667  
00001776                           668  OP_BEQ:
00001776  2602                     669          MOVE.L  D2, D3
00001778  0243 00FF                670          ANDI.W  #$FF, D3
0000177C  3A03                     671          MOVE.W  D3, D5
0000177E  43F9 00002548            672          LEA     BEQ, A1
00001784  103C 000E                673          MOVE.B  #14, D0
00001788  4E4F                     674          TRAP    #15
0000178A  B67C 0000                675          CMP.W   #$00, D3
0000178E  6700 0032                676          BEQ     BRA_WORD
00001792  B67C 00FF                677          CMP.W   #$FF, D3
00001796  6700 005C                678          BEQ     BRA_LONG
0000179A  43F9 00002501            679          LEA     DOLLAR_SIGN, A1
000017A0  D605                     680          ADD.B   D5, D3
000017A2  5403                     681          ADD.B   #2, D3
000017A4  2203                     682          MOVE.L  D3, D1
000017A6  143C 0010                683          MOVE.B  #16, D2
000017AA  103C 000F                684          MOVE.B  #15, D0
000017AE  4E4F                     685          TRAP    #15
000017B0  43F9 00002460            686          LEA     Print_NextLine, A1
000017B6  341A                     687          MOVE.W  (A2)+,D2
000017B8  B5F9 00002556            688          CMP.L   addrEnd, A2
000017BE  6D00 F9C8                689          BLT     Loop
000017C2                           690  
000017C2                           691  BRA_WORD:
000017C2  1E3C 0000                692          MOVE.B  #0, D7
000017C6  4EB9 00001FD0            693          JSR     JMPTo_Dest_ADDR_Reg
000017CC  43F9 00002501            694          LEA     DOLLAR_SIGN, A1
000017D2  D646                     695          ADD.W   D6, D3
000017D4  5443                     696          ADD.W   #2, D3
000017D6  2203                     697          MOVE.L  D3, D1
000017D8  143C 0010                698          MOVE.B  #16, D2
000017DC  103C 000F                699          MOVE.B  #15, D0
000017E0  4E4F                     700          TRAP    #15
000017E2  43F9 00002460            701          LEA     Print_NextLine, A1
000017E8  B5F9 00002556            702          CMP.L   addrEnd, A2
000017EE  6D00 F998                703          BLT     Loop
000017F2  4E75                     704          RTS
000017F4                           705  
000017F4                           706  BRA_LONG:
000017F4  1E3C 0001                707          MOVE.B  #1, D7
000017F8  4EB9 00001FD0            708          JSR     JMPTo_Dest_ADDR_Reg
000017FE  43F9 00002501            709          LEA     DOLLAR_SIGN, A1
00001804  D646                     710          ADD.W   D6, D3
00001806  5443                     711          ADD.W   #2, D3
00001808  2203                     712          MOVE.L  D3, D1
0000180A  143C 0010                713          MOVE.B  #16, D2
0000180E  103C 000F                714          MOVE.B  #15, D0
00001812  4E4F                     715          TRAP    #15
00001814  43F9 00002460            716          LEA     Print_NextLine, A1
0000181A  B5F9 00002556            717          CMP.L   addrEnd, A2
00001820  6D00 F966                718          BLT     Loop
00001824  4E75                     719          RTS
00001826                           720  * --------------------------------
00001826                           721          
00001826                           722  
00001826                           723  * MOVEQ
00001826                           724  * -> Splitting MOVEQ into Data and Register
00001826                           725  OP0111:
00001826  3602                     726          MOVE.W  D2, D3
00001828  EE4B                     727          LSR.W   #7, D3
0000182A  E24B                     728          LSR.W   #1, D3
0000182C  0243 0001                729          ANDI.W  #$1, D3
00001830  0C03 0000                730          CMPI.B  #%0, D3
00001834  6600 0BC2                731          BNE     INVALID_EA_SUB
00001838  3602                     732          MOVE.W  D2, D3
0000183A  4EB9 00001852            733          JSR     MOVEQ_DATA
00001840  4EB9 0000185C            734          JSR     MOVEQ_REG
00001846  43F9 000024BA            735          LEA     MOVEQ, A1
0000184C  103C 000E                736          MOVE.B  #14, D0
00001850  4E4F                     737          TRAP    #15
00001852                           738          
00001852                           739  MOVEQ_DATA:
00001852  3602                     740          MOVE.W  D2, D3
00001854  0243 00FF                741          ANDI.W  #$FF, D3
00001858  3E03                     742          MOVE.W  D3, D7
0000185A  4E75                     743          RTS
0000185C                           744          
0000185C                           745  MOVEQ_REG:
0000185C  3602                     746          MOVE.W  D2, D3
0000185E  EE4B                     747          LSR.W   #7, D3
00001860  E44B                     748          LSR.W   #2, D3
00001862  0243 0007                749          ANDI.W  #$7, D3
00001866  3803                     750          MOVE.W  D3, D4
00001868  4E75                     751          RTS
0000186A                           752          
0000186A                           753  OP_NOP:
0000186A  3602                     754          MOVE.W  D2, D3
0000186C  0A43 4E71                755          EORI.W  #$4E71, D3
00001870  B67C 0000                756          CMP.W   #0, D3
00001874  43F9 00002530            757          LEA     NOP, A1
0000187A  103C 000E                758          MOVE.B  #14, D0
0000187E  4E4F                     759          TRAP    #15
00001880  4EB9 00002460            760          JSR     Print_NextLine
00001886  341A                     761          MOVE.W  (A2)+, D2
00001888  B5F9 00002556            762          CMP.L   addrEnd,A2
0000188E  6D00 F862                763          BLT     AddrLoop
00001892                           764          
00001892                           765  OP_RTS:
00001892  3602                     766          MOVE.W  D2, D3
00001894  0A43 4E75                767          EORI.W  #$4E75, D3
00001898  B67C 0000                768          CMP.W   #0, D3
0000189C  43F9 00002538            769          LEA     RTS, A1
000018A2  103C 000E                770          MOVE.B  #14, D0
000018A6  4E4F                     771          TRAP    #15
000018A8  4EB9 00002460            772          JSR     Print_NextLine
000018AE  341A                     773          MOVE.W  (A2)+,D2
000018B0  B5F9 00002556            774          CMP.L   addrEnd,A2
000018B6  6D00 F83A                775          BLT     AddrLoop
000018BA                           776          
000018BA                           777          
000018BA                           778          
000018BA                           779          
000018BA                           780               
000018BA                           781  
000018BA                           782  * -> SUB
000018BA                           783  * Splitting Sub into OPMODE and Register value
000018BA                           784  OP1001:
000018BA  43F9 00002505            785          LEA     SUBTRACT, A1
000018C0  103C 000E                786          MOVE.B  #14, D0
000018C4  4E4F                     787          TRAP    #15
000018C6  E94A                     788          LSL.W   #4, D2
000018C8  3602                     789          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
000018CA  E04B                     790          LSR.W   #8, D3 * D3 = D register
000018CC  EA4B                     791          LSR.W   #5, D3
000018CE  3802                     792          MOVE.W  D2, D4 *D4 = SubOPMODE
000018D0  E74C                     793          LSL.W   #3, D4
000018D2  E04C                     794          LSR.W   #8, D4
000018D4  EA4C                     795          LSR.W   #5, D4
000018D6  3202                     796          MOVE.W  D2, D1 * D1 = EA Mode
000018D8  ED49                     797          LSL.W   #6, D1
000018DA  E049                     798          LSR.W   #8, D1
000018DC  EA49                     799          LSR.W   #5, D1
000018DE  3002                     800          MOVE.W  D2, D0 * D0 = EA register
000018E0  E148                     801          LSL.W   #8, D0
000018E2  E348                     802          LSL.W   #1, D0
000018E4  E048                     803          LSR.W   #8, D0
000018E6  EA48                     804          LSR.W   #5, D0
000018E8  45F9 00001D42            805          LEA     SubTable, A2
000018EE  C8FC 0006                806          MULU    #6, D4
000018F2  4EB2 4000                807          JSR     (A2, D4)
000018F6                           808  * -> OR
000018F6                           809  * Splitting AND into OPMODE and Register value       
000018F6                           810  OP1000:
000018F6  43F9 00002511            811          LEA     OR, A1
000018FC  103C 000E                812          MOVE.B  #14, D0
00001900  4E4F                     813          TRAP    #15
00001902  E94A                     814          LSL.W   #4, D2
00001904  3602                     815          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001906  E04B                     816          LSR.W   #8, D3 * D3 = D register
00001908  EA4B                     817          LSR.W   #5, D3
0000190A  3802                     818          MOVE.W  D2, D4 *D4 = SubOPMODE
0000190C  E74C                     819          LSL.W   #3, D4
0000190E  E04C                     820          LSR.W   #8, D4
00001910  EA4C                     821          LSR.W   #5, D4
00001912  3202                     822          MOVE.W  D2, D1 * D1 = EA Mode
00001914  ED49                     823          LSL.W   #6, D1
00001916  E049                     824          LSR.W   #8, D1
00001918  EA49                     825          LSR.W   #5, D1
0000191A  B23C 0001                826          CMP.B   #%0001, D1
0000191E  6700 09FC                827          BEQ     PRINTINVALIDEA
00001922  3002                     828          MOVE.W  D2, D0 * D0 = EA register
00001924  E148                     829          LSL.W   #8, D0
00001926  E348                     830          LSL.W   #1, D0
00001928  E048                     831          LSR.W   #8, D0
0000192A  EA48                     832          LSR.W   #5, D0
0000192C  45F9 00001D42            833          LEA     SubTable, A2
00001932  C8FC 0006                834          MULU    #6, D4
00001936  4EB2 4000                835          JSR     (A2, D4)
0000193A                           836  OP1010
0000193A                           837  OP1011
0000193A                           838  * -> AND
0000193A                           839  * Splitting AND into OPMODE and Register value
0000193A                           840  OP1100
0000193A  43F9 0000250D            841          LEA     AND, A1
00001940  103C 000E                842          MOVE.B  #14, D0
00001944  4E4F                     843          TRAP    #15
00001946  E94A                     844          LSL.W   #4, D2
00001948  3602                     845          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
0000194A  E04B                     846          LSR.W   #8, D3 * D3 = D register
0000194C  EA4B                     847          LSR.W   #5, D3
0000194E  3802                     848          MOVE.W  D2, D4 *D4 = SubOPMODE
00001950  E74C                     849          LSL.W   #3, D4
00001952  E04C                     850          LSR.W   #8, D4
00001954  EA4C                     851          LSR.W   #5, D4
00001956  3202                     852          MOVE.W  D2, D1 * D1 = EA Mode
00001958  ED49                     853          LSL.W   #6, D1
0000195A  E049                     854          LSR.W   #8, D1
0000195C  EA49                     855          LSR.W   #5, D1
0000195E  3002                     856          MOVE.W  D2, D0 * D0 = EA register
00001960  E148                     857          LSL.W   #8, D0
00001962  E348                     858          LSL.W   #1, D0
00001964  E048                     859          LSR.W   #8, D0
00001966  EA48                     860          LSR.W   #5, D0
00001968  45F9 00001D42            861          LEA     SubTable, A2
0000196E  C8FC 0006                862          MULU    #6, D4
00001972  4EB2 4000                863          JSR     (A2, D4)
00001976                           864          
00001976                           865  * -> ADD
00001976                           866  * Spltting Add into OPMODE and Register Value
00001976                           867  OP1101:
00001976  43F9 00002509            868          LEA     ADDITION, A1
0000197C  103C 000E                869          MOVE.B  #14, D0
00001980  4E4F                     870          TRAP    #15
00001982  E94A                     871          LSL.W   #4, D2
00001984  3602                     872          MOVE.W  D2, D3 *xxx---xxx---0000, D3 contains register #
00001986  E04B                     873          LSR.W   #8, D3 * D3 = D register
00001988  EA4B                     874          LSR.W   #5, D3
0000198A  3802                     875          MOVE.W  D2, D4 *D4 = SubOPMODE
0000198C  E74C                     876          LSL.W   #3, D4
0000198E  E04C                     877          LSR.W   #8, D4
00001990  EA4C                     878          LSR.W   #5, D4
00001992  3202                     879          MOVE.W  D2, D1 * D1 = EA Mode
00001994  ED49                     880          LSL.W   #6, D1
00001996  E049                     881          LSR.W   #8, D1
00001998  EA49                     882          LSR.W   #5, D1
0000199A  3002                     883          MOVE.W  D2, D0 * D0 = EA register
0000199C  E148                     884          LSL.W   #8, D0
0000199E  E348                     885          LSL.W   #1, D0
000019A0  E048                     886          LSR.W   #8, D0
000019A2  EA48                     887          LSR.W   #5, D0
000019A4  45F9 00001D42            888          LEA     SubTable, A2
000019AA  C8FC 0006                889          MULU    #6, D4
000019AE  4EB2 4000                890          JSR     (A2, D4)
000019B2                           891  * ------------------------------
000019B2                           892  *-> ROL, ROR, LSL, LSR, ASL, ASR        
000019B2                           893  OP1110:
000019B2  3602                     894          MOVE.W  D2, D3
000019B4  EE4B                     895          LSR.W   #7, D3
000019B6  EA4B                     896          LSR.W   #5, D3
000019B8  2602                     897          MOVE.L  D2, D3
000019BA  EC8B                     898          LSR.L   #6, D3
000019BC  0203 0003                899          ANDI.B  #$3, D3
000019C0  B63C 0003                900          CMP.B   #$3, D3
000019C4  6700 00E6                901          BEQ     SHIFT_MEMORY
000019C8                           902          
000019C8                           903  SHIFT_REGISTER:
000019C8  2602                     904          MOVE.L  D2, D3
000019CA  0803 0008                905          BTST    #8, D3
000019CE  6700 0020                906          BEQ     OP_LSR_REGISTER
000019D2                           907          
000019D2                           908  OP_LSL_REGISTER:
000019D2  0803 0004                909          BTST.L  #4, D3
000019D6  6600 01EA                910          BNE     ROL_ROR
000019DA  0803 0003                911          BTST.L  #3, D3
000019DE  4EB9 00001A36            912          JSR     REGISTER_SHIFT_DATA
000019E4  43F9 00002520            913          LEA     LSL, A1
000019EA  103C 000E                914          MOVE.B  #14, D0
000019EE  4E4F                     915          TRAP    #15
000019F0                           916          
000019F0                           917  OP_LSR_REGISTER:
000019F0  0803 0004                918          BTST.L  #4, D3
000019F4  6600 01CC                919          BNE     ROL_ROR
000019F8  0803 0003                920          BTST.L  #3, D3
000019FC  6700 0026                921          BEQ     OP_ASR_REGISTER
00001A00  4EB9 00001A36            922          JSR     REGISTER_SHIFT_DATA
00001A06  43F9 00002524            923          LEA     LSR, A1
00001A0C  103C 000E                924          MOVE.B  #14, D0
00001A10  4E4F                     925          TRAP    #15
00001A12                           926  
00001A12                           927  OP_ASL_REGISTER:
00001A12  4EB9 00001A36            928         JSR      REGISTER_SHIFT_DATA
00001A18  43F9 00002528            929         LEA      ASL, A1
00001A1E  103C 000E                930         MOVE.B   #14, D0
00001A22  4E4F                     931         TRAP     #15
00001A24                           932   
00001A24                           933  OP_ASR_REGISTER:
00001A24  4EB9 00001A36            934         JSR      REGISTER_SHIFT_DATA
00001A2A  43F9 0000252C            935         LEA      ASR, A1
00001A30  103C 000E                936         MOVE.B   #14, D0
00001A34  4E4F                     937         TRAP     #15
00001A36                           938          
00001A36                           939  
00001A36                           940  REGISTER_SHIFT_DATA:
00001A36  2602                     941         MOVE.L   D2, D3
00001A38  0203 0007                942         ANDI.B   #$7, D3
00001A3C  1E03                     943         MOVE.B   D3, D7
00001A3E  2602                     944         MOVE.L   D2, D3
00001A40  EA4B                     945         LSR.W    #5, D3
00001A42  0203 0001                946         ANDI.B   #$1,D3
00001A46  1E03                     947         MOVE.B   D3, D7
00001A48  2602                     948         MOVE.L   D2, D3
00001A4A  EC4B                     949         LSR.W    #6, D3
00001A4C  0243 0003                950         ANDI.W   #$3, D3
00001A50  1A03                     951         MOVE.B   D3, D5
00001A52  0C05 0003                952         CMPI.B   #%11, D5
00001A56  6700 08D4                953         BEQ      PrintInvalidSUB
00001A5A  2602                     954         MOVE.L   D2, D3
00001A5C  EA4B                     955         LSR.W    #5, D3
00001A5E  E84B                     956         LSR.W    #4, D3
00001A60  0243 0007                957         ANDI.W   #$7, D3
00001A64  1803                     958         MOVE.B   D3, D4
00001A66  4E75                     959         RTS
00001A68                           960  
00001A68                           961  MEMORY_SHIFT_DATA:
00001A68  0803 000B                962          BTST.L  #11, D3
00001A6C  6600 08BE                963          BNE     PrintInvalidSUB
00001A70  0283 00000007            964          ANDI.L  #$7, D3
00001A76  1E03                     965          MOVE.B  D3, D7
00001A78  2602                     966          MOVE.L  D2, D3
00001A7A  E64B                     967          LSR.W   #3, D3
00001A7C  0243 0007                968          ANDI    #%111, D3
00001A80  13C3 00002550            969          MOVE.B  D3, SHIFT
00001A86  3602                     970          MOVE.W  D2, D3
00001A88  4EB9 00001A9E            971          JSR     MEMORY_INDIRECT
00001A8E  4EB9 00001FD0            972          JSR     JMPTo_Dest_ADDR_Reg
00001A94  13FC 0007 00002550       973          MOVE.B  #%111, SHIFT
00001A9C  4E75                     974          RTS
00001A9E                           975          
00001A9E                           976  
00001A9E                           977  MEMORY_INDIRECT:
00001A9E  3602                     978          MOVE.W  D2, D3
00001AA0  E64B                     979          LSR.W   #3, D3
00001AA2  0243 0007                980          ANDI.W  #%111, D3
00001AA6  1807                     981          MOVE.B  D7, D4
00001AA8  1E03                     982          MOVE.B  D3,D7
00001AAA  4E75                     983          RTS
00001AAC                           984  
00001AAC                           985  SHIFT_MEMORY:
00001AAC  2602                     986          MOVE.L  D2, D3
00001AAE  0803 0008                987          BTST.L  #8, D3
00001AB2                           988          
00001AB2                           989  OP_LSL_MEMORY:
00001AB2  0803 000A                990          BTST.L  #10, D3
00001AB6  6600 010A                991          BNE     ROL_ROR
00001ABA  0803 0009                992          BTST.L  #9, D3
00001ABE  6700 008A                993          BEQ     OP_ASL_MEMORY
00001AC2  13FC 0000 00002550       994          MOVE.B  #0, SHIFT
00001ACA  4EB8 1A68                995          JSR     MEMORY_SHIFT_DATA
00001ACE  0C39 0002 00002550       996          CMPI.B  #%010, SHIFT
00001AD6  6700 025A                997          BEQ     PRINT8
00001ADA  0C39 0003 00002550       998          CMPI.B  #%011, SHIFT
00001AE2  6700 024E                999          BEQ     PRINT8
00001AE6  0C39 0004 00002550      1000          CMPI.B  #%100, SHIFT
00001AEE  6700 0242               1001          BEQ     PRINT8
00001AF2  0C39 0007 00002550      1002          CMPI.B  #%111, SHIFT
00001AFA  6700 0820               1003          BEQ     PrintInvalidEA
00001AFE                          1004          
00001AFE                          1005  
00001AFE                          1006  OP_LSR_MEMORY:
00001AFE  0803 000A               1007          BTST.L  #10, D3
00001B02  6600 00BE               1008          BNE     ROL_ROR
00001B06  0803 0009               1009          BTST.L  #9, D3
00001B0A  6700 007A               1010          BEQ     OP_ASR_MEMORY
00001B0E  13FC 0000 00002550      1011          MOVE.B  #0, SHIFT
00001B16  4EB8 1A68               1012          JSR     MEMORY_SHIFT_DATA
00001B1A  0C39 0002 00002550      1013          CMPI.B  #%010, SHIFT
00001B22  6700 020E               1014          BEQ     PRINT8
00001B26  0C39 0003 00002550      1015          CMPI.B  #%011, SHIFT
00001B2E  6700 0202               1016          BEQ     PRINT8
00001B32  0C39 0004 00002550      1017          CMPI.B  #%100, SHIFT
00001B3A  6700 01F6               1018          BEQ     PRINT8
00001B3E  0C39 0007 00002550      1019          CMPI.B  #%111, SHIFT
00001B46  6700 07D4               1020          BEQ     PrintInvalidEA
00001B4A                          1021  
00001B4A                          1022  
00001B4A                          1023  OP_ASL_MEMORY:
00001B4A  13FC 0000 00002550      1024          MOVE.B  #0, SHIFT
00001B52  4EB8 1A68               1025          JSR     MEMORY_SHIFT_DATA
00001B56  0C39 0002 00002550      1026          CMPI.B  #%010, SHIFT
00001B5E  6700 01D2               1027          BEQ     PRINT8
00001B62  0C39 0003 00002550      1028          CMPI.B  #%011, SHIFT
00001B6A  6700 01C6               1029          BEQ     PRINT8
00001B6E  0C39 0004 00002550      1030          CMPI.B  #%100, SHIFT
00001B76  6700 01BA               1031          BEQ     PRINT8
00001B7A  0C39 0007 00002550      1032          CMPI.B  #%111, SHIFT
00001B82  6700 0798               1033          BEQ     PrintInvalidEA
00001B86                          1034  
00001B86                          1035  OP_ASR_MEMORY:
00001B86  13FC 0000 00002550      1036          MOVE.B  #0, SHIFT
00001B8E  4EB8 1A68               1037          JSR     MEMORY_SHIFT_DATA
00001B92  0C39 0002 00002550      1038          CMPI.B  #%010, SHIFT
00001B9A  6700 0196               1039          BEQ     PRINT8
00001B9E  0C39 0003 00002550      1040          CMPI.B  #%011, SHIFT
00001BA6  6700 018A               1041          BEQ     PRINT8
00001BAA  0C39 0004 00002550      1042          CMPI.B  #%100, SHIFT
00001BB2  6700 017E               1043          BEQ     PRINT8
00001BB6  0C39 0007 00002550      1044          CMPI.B  #%111, SHIFT
00001BBE  6700 075C               1045          BEQ     PrintInvalidEA
00001BC2                          1046  
00001BC2                          1047          
00001BC2                          1048  ROL_ROR:
00001BC2  E94A                    1049          LSL.W   #4, D2
00001BC4  3C02                    1050          MOVE.W  D2, D6 * Shift size
00001BC6  E04E                    1051          LSR.W   #8, D6
00001BC8  EA4E                    1052          LSR.W   #5, D6
00001BCA  3602                    1053          MOVE.W  D2, D3 * L/R
00001BCC  E74B                    1054          LSL.W   #3, D3
00001BCE  E04B                    1055          LSR.W   #8, D3
00001BD0  EE4B                    1056          LSR.W   #7, D3
00001BD2  3802                    1057          MOVE.W  D2, D4 * Size field
00001BD4  E94C                    1058          LSL.W   #4, D4
00001BD6  E04C                    1059          LSR.W   #8, D4
00001BD8  EC4C                    1060          LSR.W   #6, D4
00001BDA  3202                    1061          MOVE.W  D2, D1 *immediate/register
00001BDC  ED49                    1062          LSL.W   #6, D1
00001BDE  E049                    1063          LSR.W   #8, D1
00001BE0  EE49                    1064          LSR.W   #7, D1
00001BE2  3A02                    1065          MOVE.W  D2, D5 * Shift Register
00001BE4  E14D                    1066          LSL.W   #8, D5
00001BE6  E34D                    1067          LSL.W   #1, D5
00001BE8  E04D                    1068          LSR.W   #8, D5
00001BEA  EA4D                    1069          LSR.W   #5, D5
00001BEC  C6FC 0006               1070          MULU    #6, D3
00001BF0  43F9 00001BFA           1071          LEA     RotateTable, A1
00001BF6  4EB1 3000               1072          JSR     (A1, D3)
00001BFA                          1073          
00001BFA                          1074  RotateTable:
00001BFA  4EF9 00001C06           1075          JMP     Rotate_RIGHT
00001C00  4EF9 00001C18           1076          JMP     Rotate_LEFT
00001C06                          1077          
00001C06                          1078  Rotate_Right
00001C06  43F9 0000251C           1079          LEA     ROR, A1
00001C0C  103C 000E               1080          MOVE.B  #14, D0
00001C10  4E4F                    1081          TRAP    #15
00001C12  4EF9 00001C2A           1082          JMP     Rotate_Size_Table
00001C18                          1083          
00001C18                          1084  Rotate_Left
00001C18  43F9 00002518           1085          LEA     ROL, A1
00001C1E  103C 000E               1086          MOVE.B  #14, D0
00001C22  4E4F                    1087          TRAP    #15
00001C24  4EF9 00001C2A           1088          JMP     Rotate_Size_Table
00001C2A                          1089          
00001C2A                          1090  Rotate_Size_TABLE:
00001C2A  B83C 0000               1091          CMP.B   #%000, D4
00001C2E  6700 001A               1092          BEQ     Rotate_B
00001C32  B83C 0001               1093          CMP.B   #%001, D4
00001C36  6700 002E               1094          BEQ     Rotate_W
00001C3A  B83C 0002               1095          CMP.B   #%010, D4
00001C3E  6700 0042               1096          BEQ     Rotate_L
00001C42  B83C 0003               1097          CMP.B   #%11, D4
00001C46  6700 0056               1098          BEQ     Rotate_EA
00001C4A                          1099          
00001C4A                          1100  Rotate_B
00001C4A  43F9 0000248C           1101          LEA     SIZE_BYTE,A1
00001C50  103C 000E               1102          MOVE.B  #14, D0
00001C54  4E4F                    1103          TRAP    #15
00001C56  B23C 0000               1104          CMP.B   #%0, D1
00001C5A  6700 00A0               1105          BEQ     Rotate_Print_immediate
00001C5E  B23C 0001               1106          CMP.B   #%1, D1
00001C62  6700 007E               1107          BEQ     Rotate_Print_Register
00001C66                          1108          
00001C66                          1109  Rotate_W
00001C66  43F9 00002490           1110          LEA     SIZE_WORD,A1
00001C6C  103C 000E               1111          MOVE.B  #14, D0
00001C70  4E4F                    1112          TRAP    #15
00001C72  B23C 0000               1113          CMP.B   #%0, D1
00001C76  6700 0084               1114          BEQ     Rotate_Print_immediate
00001C7A  B23C 0001               1115          CMP.B   #%1, D1
00001C7E  6700 0062               1116          BEQ     Rotate_Print_Register
00001C82                          1117  
00001C82                          1118  Rotate_L
00001C82  43F9 00002494           1119          LEA     SIZE_LONG,A1
00001C88  103C 000E               1120          MOVE.B  #14, D0
00001C8C  4E4F                    1121          TRAP    #15
00001C8E  B23C 0000               1122          CMP.B   #%0, D1
00001C92  6700 0068               1123          BEQ     Rotate_Print_immediate
00001C96  B23C 0001               1124          CMP.B   #%1, D1
00001C9A  6700 0046               1125          BEQ     Rotate_Print_Register
00001C9E                          1126          
00001C9E                          1127  Rotate_EA
00001C9E  13FC 0001 00002562      1128          MOVE.B  #%01, OpCodeSize
00001CA6  43F9 00002488           1129          LEA     SPACER, A1
00001CAC  103C 000E               1130          MOVE.B  #14, D0
00001CB0  4E4F                    1131          TRAP    #15
00001CB2  1005                    1132          MOVE.B  D5, D0
00001CB4  1202                    1133          MOVE.B  D2, D1
00001CB6  ED49                    1134          LSL.W   #6, D1
00001CB8  E049                    1135          LSR.W   #8, D1
00001CBA  EA49                    1136          LSR.W   #5, D1
00001CBC                          1137          
00001CBC                          1138  ROTATE_EACHECKER:
00001CBC  B23C 0002               1139          CMP.B   #%0010, D1
00001CC0  6700 035A               1140          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001CC4  B23C 0003               1141          CMP.B   #%0011, D1
00001CC8  6700 0352               1142          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001CCC  B23C 0004               1143          CMP.B   #%0100, D1
00001CD0  6700 034A               1144          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001CD4  4EF9 0000231C           1145          JMP     PRINTINVALIDEA
00001CDA  B23C 0007               1146          CMP.B   #%0111, D1
00001CDE  6700 0400               1147          BEQ     JMPTO_SRC_IMMEDIATE
00001CE2                          1148          
00001CE2                          1149  Rotate_Print_REGISTER
00001CE2  1006                    1150          MOVE.B  D6, D0
00001CE4  123C 0000               1151          MOVE.B  #%000, D1
00001CE8  4EB9 00001F1C           1152          JSR     EACHECKER
00001CEE  1005                    1153          MOVE.B  D5, D0
00001CF0  4241                    1154          CLR     D1
00001CF2  4EB9 00001F52           1155          JSR     DESTEACHECKER
00001CF8  4EF8 10F2               1156          JMP     AddrLoop
00001CFC                          1157          
00001CFC                          1158  Rotate_Print_immediate
00001CFC  43F9 00002503           1159          LEA     POUND_SIGN, A1
00001D02  103C 000E               1160          MOVE.B  #14, D0
00001D06  4E4F                    1161          TRAP    #15
00001D08  BC3C 0000               1162          CMP.B   #%0000, D6
00001D0C  6700 0024               1163          BEQ     PRINT8
00001D10  1206                    1164          MOVE.B  D6, D1
00001D12  143C 000A               1165          MOVE.B  #10, D2
00001D16  103C 000F               1166          MOVE.B  #15, D0
00001D1A  4E4F                    1167          TRAP    #15
00001D1C                          1168          
00001D1C                          1169  Rotate_Print_ImmediateCONT:
00001D1C  4EB9 0000230E           1170          JSR     PRINTCOMMA
00001D22  1005                    1171          MOVE.B  D5, D0
00001D24  123C 0000               1172          MOVE.B  #%000, D1
00001D28  4EB9 00001F52           1173          JSR     DESTEACHECKER
00001D2E  4EF8 10F2               1174          JMP     AddrLoop
00001D32                          1175  
00001D32                          1176  PRINT8:
00001D32  1204                    1177          MOVE.B  D4, D1
00001D34  143C 000A               1178          MOVE.B  #10, D2
00001D38  103C 000F               1179          MOVE.B  #15, D0
00001D3C  4E4F                    1180          TRAP    #15
00001D3E  4EF8 1D1C               1181          JMP     Rotate_Print_ImmediateCONT
00001D42                          1182          
00001D42                          1183  * End of ROR, ROL, (Kelvin)                
00001D42                          1184          
00001D42                          1185  * =============================================
00001D42                          1186  * JMP Table for SUB OPMODES
00001D42                          1187  SubTable:
00001D42  4EF9 00001D72           1188          JMP     OPMODE000 * BYTE  EA->DN
00001D48  4EF9 00001D8C           1189          JMP     OPMODE001 * WORD  RA->DN  
00001D4E  4EF9 00001D9E           1190          JMP     OPMODE010 * LONG  EA->DN 
00001D54  4EF9 00001DB0           1191          JMP     OPMODE011 * ADDA  WORD
00001D5A  4EF9 00001DDE           1192          JMP     OPMODE100 * BYTE  DN->EA
00001D60  4EF9 00001DF6           1193          JMP     OPMODE101 * BYTE  DN->EA
00001D66  4EF9 00001E0E           1194          JMP     OPMODE110 * BYTE  DN->EA
00001D6C  4EF9 00001E26           1195          JMP     OPMODE111 * ADDA  LONG
00001D72                          1196          
00001D72                          1197  OPMODE000:
00001D72  13FC 0000 00002562      1198          MOVE.B  #%00, OPCODESIZE  *Used for immediate address 00 Byte 11 Word 01 Long
00001D7A  1A00                    1199          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001D7C  43F9 0000248C           1200          LEA     SIZE_BYTE, A1
00001D82  103C 000E               1201          MOVE.B  #14, D0
00001D86  4E4F                    1202          TRAP    #15
00001D88  6000 00DC               1203          BRA     Sub_OPMODE_FIRST
00001D8C                          1204  OPMODE001
00001D8C  1A00                    1205          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001D8E  43F9 00002490           1206          LEA     SIZE_Word, A1
00001D94  103C 000E               1207          MOVE.B  #14, D0
00001D98  4E4F                    1208          TRAP    #15
00001D9A  6000 00CA               1209          BRA     Sub_OPMODE_FIRST
00001D9E                          1210  OPMODE010
00001D9E  1A00                    1211          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001DA0  43F9 00002494           1212          LEA     SIZE_Long, A1
00001DA6  103C 000E               1213          MOVE.B  #14, D0
00001DAA  4E4F                    1214          TRAP    #15
00001DAC  6000 00B8               1215          BRA     Sub_OPMODE_FIRST
00001DB0                          1216  *===============================================
00001DB0                          1217  *Special OPMODE can only be used by ADD
00001DB0                          1218  OPMODE011
00001DB0  0C38 000D 1206          1219          CMP.B   #%1101, OpCode
00001DB6  6700 0008               1220          BEQ     Special_OPMODE_USED
00001DBA  4EF9 0000231C           1221          JMP     PRINTINVALIDEA
00001DC0                          1222  Special_OPMODE_USED:
00001DC0  1A00                    1223          MOVE.B  D0, D5
00001DC2  43F9 000024B1           1224          LEA     MOVEA, A1
00001DC8  103C 000E               1225          MOVE.B  #14, D0
00001DCC  4E4F                    1226          TRAP    #15
00001DCE  43F9 00002490           1227          LEA     SIZE_WORD, A1
00001DD4  103C 000E               1228          MOVE.B  #14, D0
00001DD8  4E4F                    1229          TRAP    #15
00001DDA  6000 00CE               1230          BRA     Sub_OPMODE_ADDA
00001DDE                          1231  OPMODE100
00001DDE  1A00                    1232          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001DE0  43F9 0000248C           1233          LEA     SIZE_BYTE, A1
00001DE6  103C 000E               1234          MOVE.B  #14, D0
00001DEA  4E4F                    1235          TRAP    #15
00001DEC  4EB9 00001E54           1236          JSR     Memory_Alterable_Check
00001DF2  6000 0090               1237          BRA     Sub_OPMODE_SECOND
00001DF6                          1238  OPMODE101
00001DF6  1A00                    1239          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001DF8  43F9 00002490           1240          LEA     SIZE_Word, A1
00001DFE  103C 000E               1241          MOVE.B  #14, D0
00001E02  4E4F                    1242          TRAP    #15
00001E04  4EB9 00001E54           1243          JSR     Memory_Alterable_Check
00001E0A  6000 0078               1244          BRA     Sub_OPMODE_SECOND
00001E0E                          1245  OPMODE110
00001E0E  1A00                    1246          MOVE.B  D0, D5   * TEMP STORAGE for DATA register
00001E10  43F9 00002494           1247          LEA     SIZE_LONG, A1
00001E16  103C 000E               1248          MOVE.B  #14, D0
00001E1A  4E4F                    1249          TRAP    #15
00001E1C  4EB9 00001E54           1250          JSR     Memory_Alterable_Check
00001E22  6000 0060               1251          BRA     Sub_OPMODE_SECOND
00001E26                          1252  OPMODE111:
00001E26  0C38 000D 1206          1253          CMP.B   #%1101, OpCode
00001E2C  6700 0008               1254          BEQ     Special_OPMODE_USED2
00001E30  4EF9 0000231C           1255          JMP     PRINTINVALIDEA
00001E36                          1256  Special_OPMODE_USED2:
00001E36  1A00                    1257          MOVE.B  D0, D5
00001E38  43F9 000024B1           1258          LEA     MOVEA, A1
00001E3E  103C 000E               1259          MOVE.B  #14, D0
00001E42  4E4F                    1260          TRAP    #15
00001E44  43F9 00002494           1261          LEA     SIZE_LONG, A1
00001E4A  103C 000E               1262          MOVE.B  #14, D0
00001E4E  4E4F                    1263          TRAP    #15
00001E50  6000 0058               1264          BRA     Sub_OPMODE_ADDA
00001E54                          1265  *===================================================
00001E54                          1266  * USED FOR SUB AND OR, check if dest EA is memory Alterable
00001E54                          1267  
00001E54                          1268  Memory_Alterable_Check:
00001E54  B23C 0000               1269          CMP.B   #%000, D1
00001E58  6700 04C2               1270          BEQ     PRINTINVALIDEA
00001E5C  B23C 0001               1271          CMP.B   #%001, D1
00001E60  6700 04BA               1272          BEQ     PRINTINVALIDEA
00001E64  4E75                    1273          RTS
00001E66                          1274          
00001E66                          1275  *===============================================
00001E66                          1276  * Used for Dn->EA for SUB
00001E66                          1277  * Called by 001, 010, 100, 
00001E66                          1278  Sub_OPMODE_FIRST:
00001E66  1005                    1279          MOVE.B  D5, D0   * TEMP RETURN D0
00001E68  4EB9 00001F1C           1280          JSR     EACHECKER 
00001E6E  4280                    1281          CLR.L     D0
00001E70  4281                    1282          CLR.L     D1
00001E72  4EB9 0000230E           1283          JSR     PRINTCOMMA
00001E78  1003                    1284          MOVE.B  D3, D0
00001E7A  4EB9 00001F52           1285          JSR     DestEAChecker 
00001E80  6000 F270               1286          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001E84                          1287  *===============================================
00001E84                          1288  * Used for Dn->EA for SUB
00001E84                          1289  * Called by 100, 101, 110 
00001E84                          1290  Sub_OPMODE_SECOND:
00001E84  1801                    1291          MOVE.B  D1, D4   *TEMP STORE D1
00001E86  4280                    1292          CLR.L     D0  *Clean D0
00001E88  1003                    1293          MOVE.B  D3, D0
00001E8A  4281                    1294          CLR.L     D1
00001E8C  4EB9 00001F1C           1295          JSR     EACHECKER yeah
00001E92  4280                    1296          CLR.L     D0
00001E94  4281                    1297          CLR.L     D1
00001E96  4EB9 0000230E           1298          JSR     PRINTCOMMA
00001E9C  1005                    1299          MOVE.B  D5, D0   * TEMP RETURN D0
00001E9E  1204                    1300          MOVE.B  D4, D1   * TEMP RETURN D1
00001EA0  4EB9 00001F52           1301          JSR     DestEAChecker 
00001EA6  6000 F24A               1302          BRA     addrloop *EA FINISHED-----
00001EAA                          1303  *===============================================
00001EAA                          1304  * Used for Dn->EA for SUB
00001EAA                          1305  * Called by 011, 111
00001EAA                          1306  Sub_OPMODE_ADDA:
00001EAA  1005                    1307          MOVE.B  D5, D0   * TEMP RETURN D0
00001EAC  4EB9 00001F1C           1308          JSR     EACHECKER 
00001EB2  4240                    1309          CLR     D0
00001EB4  4241                    1310          CLR     D1
00001EB6  4EB9 0000230E           1311          JSR     PRINTCOMMA
00001EBC  1003                    1312          MOVE.B  D3, D0
00001EBE  123C 0001               1313          MOVE.B  #%001, D1
00001EC2  4EB9 00001F52           1314          JSR     DestEAChecker 
00001EC8  6000 F228               1315          BRA     addrloop *EA FINISHED---------------------------------------------------------------------------------------------------------------------------
00001ECC                          1316          
00001ECC                          1317  * CHECK FOR MOVEA BC it has the same OPCODE as MOVE
00001ECC                          1318  CHECK_MOVEA
00001ECC  2602                    1319          MOVE.L  D2, D3  * HOlding D2 in D3 temp
00001ECE  E18A                    1320          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001ED0  E18A                    1321          LSL.L   #8, D2
00001ED2  E98A                    1322          LSL.L   #4, D2
00001ED4  E08A                    1323          LSR.L   #8, D2
00001ED6  E08A                    1324          LSR.L   #8, D2
00001ED8  E88A                    1325          LSR.L   #4, D2 // 12 bits of opperand found
00001EDA  EC8A                    1326          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001EDC  1202                    1327          MOVE.B  D2, D1 * Prepare D1 for Mode
00001EDE  EB09                    1328          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001EE0  EA09                    1329          LSR.B   #5, D1
00001EE2  B23C 0001               1330          CMP.B   #%001, D1
00001EE6  6700 0006               1331          BEQ     PRINTA
00001EEA  2403                    1332          MOVE.L  D3, D2 
00001EEC  4E75                    1333          RTS * Goes back to OP Value
00001EEE                          1334          
00001EEE                          1335  PRINTA
00001EEE  43F9 000024B1           1336          LEA     MOVEA, A1
00001EF4  103C 000E               1337          MOVE.B  #14, D0
00001EF8  4E4F                    1338          TRAP    #15
00001EFA  2403                    1339          MOVE.L  D3, D2
00001EFC  4E75                    1340          RTS * Goes back to CHECK_MOVEA
00001EFE                          1341          
00001EFE                          1342          
00001EFE                          1343  * EA STARTS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
00001EFE                          1344  *=================================================================
00001EFE                          1345  *-----------EA-- Calculate EA used for Data Registers
00001EFE                          1346  *----------Pre: D2, D0, D1 must be clear
00001EFE                          1347  *----------POST: prints out EA, D0 will store Data Register #, D1 will store EA MODE
00001EFE                          1348  EA:
00001EFE  4280                    1349          CLR.L     D0  * Clear D0 and D1 so they don't conflict
00001F00  4281                    1350          CLR.L     D1
00001F02  4283                    1351          CLR.L     D3
00001F04  E18A                    1352          LSL.L   #8, D2 // Remove first 20 bits to get opperand
00001F06  E18A                    1353          LSL.L   #8, D2
00001F08  E98A                    1354          LSL.L   #4, D2
00001F0A  E08A                    1355          LSR.L   #8, D2
00001F0C  E08A                    1356          LSR.L   #8, D2
00001F0E  E88A                    1357          LSR.L   #4, D2 // 12 bits of opperand found
00001F10  1002                    1358          MOVE.B  D2, D0 Source Data Register
00001F12  EB08                    1359          LSL.B   #5, D0
00001F14  EA08                    1360          LSR.B   #5, D0
00001F16  1202                    1361          MOVE.B  D2, D1 *Source Data Mode
00001F18  E509                    1362          LSL.B   #2, D1
00001F1A  EA09                    1363          LSR.B   #5, D1
00001F1C                          1364          
00001F1C                          1365  *=================================================
00001F1C                          1366  *-----------EA CHECKER------Continues from EA
00001F1C                          1367  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001F1C                          1368  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON
00001F1C                          1369  EACHECKER: 
00001F1C  B23C 0000               1370          CMP.B   #%0000, D1
00001F20  6700 007E               1371          BEQ     JMPTOSRCREG *JUMPS TO Source D registers
00001F24  B23C 0001               1372          CMP.B   #%0001, D1
00001F28  6700 0096               1373          BEQ     JMPTO_SRC_ADDR_REG
00001F2C  B23C 0002               1374          CMP.B   #%0010, D1
00001F30  6700 00AE               1375          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001F34  B23C 0003               1376          CMP.B   #%0011, D1
00001F38  6700 00A6               1377          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001F3C  B23C 0004               1378          CMP.B   #%0100, D1
00001F40  6700 009E               1379          BEQ     JMPTO_SRC_INDR_ADDR_REG
00001F44  B23C 0007               1380          CMP.B   #%0111, D1
00001F48  6700 0196               1381          BEQ     JMPTO_SRC_IMMEDIATE
00001F4C  4EF9 0000231C           1382          JMP     PRINTINVALIDEA
00001F52                          1383          
00001F52                          1384  *=================================================
00001F52                          1385  *-----------DEST EA CHECKER------Continues from EA
00001F52                          1386  *-----------Pre: D1 must contain the Mode of EA, D0 must store register# of EA        
00001F52                          1387  * TODO: ERROR CHECKING, OTHER MODES other than D0, USE 4 HEX FOR COMPARISON        
00001F52                          1388  DESTEACHECKER:
00001F52  B23C 0000               1389          CMP.B   #%0000, D1
00001F56  6700 0058               1390          BEQ     JMPTODestREG *JUMPS TO Source D registers
00001F5A  B23C 0001               1391          CMP.B   #%0001, D1
00001F5E  6700 0070               1392          BEQ     JMPTO_DEST_ADDR_REG
00001F62  B23C 0002               1393          CMP.B   #%0010, D1
00001F66  6700 00B4               1394          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001F6A  B23C 0003               1395          CMP.B   #%0011, D1
00001F6E  6700 00AC               1396          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001F72  B23C 0004               1397          CMP.B   #%0100, D1
00001F76  6700 00A4               1398          BEQ     JMPTO_DEST_INDR_ADDR_REG
00001F7A  4EF9 0000231C           1399          JMP     PRINTINVALIDEA
00001F80                          1400          
00001F80                          1401  *=================================================      
00001F80                          1402  * Dest EA Finder
00001F80                          1403  * PRE: ONLY USED FOR MOVE
00001F80                          1404  * POST: PRINTS DEST EA  
00001F80                          1405  DestEAFinder:
00001F80  4EB9 0000230E           1406          JSR     PRINTCOMMA  * Prints comma between two operrands
00001F86  EC8A                    1407          LSR.L   #6, D2 *Shift away all Source bits, leaving dest and opcode 
00001F88  4241                    1408          CLR     D1     * Clear D1 and D0 for opperand mode and register
00001F8A  4240                    1409          CLR     D0
00001F8C  1202                    1410          MOVE.B  D2, D1 * Prepare D1 for Mode
00001F8E  EB09                    1411          LSL.B   #5, D1  * Shift 5 bits to get rid of Register and size
00001F90  EA09                    1412          LSR.B   #5, D1
00001F92  1002                    1413          MOVE.B  D2, D0  *Prepare D0 for Register
00001F94  E508                    1414          LSL.B   #2, D0
00001F96  EA08                    1415          LSR.B   #5, D0
00001F98  4EB8 1F52               1416          JSR     DESTEACHECKER
00001F9C  4EF8 10F2               1417          JMP     AddrLoop     ****Remember to send this back to next step loop&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00001FA0                          1418  
00001FA0                          1419          
00001FA0                          1420  *===================================================
00001FA0                          1421  *-------------Data Register checker------------------        
00001FA0                          1422  JMPTOSRCREG:
00001FA0  43F9 000021C2           1423          LEA     DATAREGTABLE, A1
00001FA6  C0FC 0006               1424          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001FAA  4EB1 0000               1425          JSR     (A1, D0) *JMP To index A1 + D0
00001FAE                          1426          * EA CONTINUES HERE
00001FAE  4E75                    1427          RTS * BRA DESTEAFINDER DELETED
00001FB0                          1428  JMPToDestReg: *PRINT OUT DEST Registers
00001FB0  43F9 000021C2           1429          LEA     DATAREGTABLE, A1
00001FB6  C0FC 0006               1430          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001FBA  4EB1 0000               1431          JSR     (A1, D0) *JMP to A1 + D0
00001FBE  4E75                    1432          RTS    * Goes Back to DestEAFinder
00001FC0                          1433          
00001FC0                          1434  
00001FC0                          1435  *===================================================
00001FC0                          1436  *-------------Address Register checker------------------             
00001FC0                          1437  JMPTO_SRC_ADDR_REG:
00001FC0  43F9 000021F2           1438          LEA     AddrREGTABLE, A1
00001FC6  C0FC 0006               1439          MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00001FCA  4EB1 0000               1440          JSR     (A1, D0) *JMP To index A1 + D0
00001FCE                          1441          * EA CONTINUES HERE
00001FCE  4E75                    1442          RTS * BRA DESTEAFINDER DELETED
00001FD0                          1443  JMPTo_Dest_ADDR_Reg: *PRINT OUT DEST Registers
00001FD0  43F9 000021F2           1444          LEA     AddrREGTABLE, A1
00001FD6  C0FC 0006               1445          MULU    #6, D0 * Multiply by 6 bc Each index between jmp table diff is 6
00001FDA  4EB1 0000               1446          JSR     (A1, D0) *JMP to A1 + D0
00001FDE  4E75                    1447          RTS     * Goes Back to DESTEAFinder
00001FE0                          1448          
00001FE0                          1449  *===================================================
00001FE0                          1450  *-------------Indirect Address Register checker------------------
00001FE0                          1451  *Copied from Address Register checker, basically adding parenthesis () around Address register
00001FE0                          1452  * Also Detects ()+ and -()
00001FE0                          1453  * PRE: D1 stores mode, D0 stores register #
00001FE0                          1454  * D1 to D5 are off limits
00001FE0                          1455  JMPTO_SRC_INDR_ADDR_REG:
00001FE0  1A00                    1456         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
00001FE2  B23C 0004               1457         CMP.B    #%100, D1       * IF IT IS -()
00001FE6  6700 007E               1458         BEQ      PRE_DECREMENT_SRC
00001FEA  43F9 000024F9           1459         LEA      INDR_LEFT, A1
00001FF0  103C 000E               1460         MOVE.B   #14, D0
00001FF4  4E4F                    1461         TRAP     #15
00001FF6  1005                    1462         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00001FF8  43F9 000021F2           1463         LEA     AddrREGTABLE, A1
00001FFE  C0FC 0006               1464         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
00002002  4EB1 0000               1465         JSR     (A1, D0) *JMP To index A1 + D0
00002006  43F9 000024FB           1466         LEA      INDR_RIGHT, A1
0000200C  103C 000E               1467         MOVE.B   #14, D0
00002010  4E4F                    1468         TRAP     #15
00002012  B23C 0003               1469         CMP.B    #%0011, D1 * IF IT IS ()+
00002016  6700 0040               1470         BEQ      POST_INCREMENT_SRC
0000201A  4E75                    1471         RTS * BRA DESTEAFINDER DELETED
0000201C                          1472         
0000201C                          1473  JMPTO_DEST_INDR_ADDR_REG:
0000201C  1A00                    1474         MOVE.B   D0, D5  *TEMP storage for D0 because it will be used by PRINT
0000201E  B23C 0004               1475         CMP.B    #%100, D1
00002022  6700 0086               1476         BEQ      PRE_DECREMENT_DEST * IF IT IS -()
00002026  43F9 000024F9           1477         LEA      INDR_LEFT, A1
0000202C  103C 000E               1478         MOVE.B   #14, D0
00002030  4E4F                    1479         TRAP     #15
00002032  1003                    1480         MOVE.B   D3, D0   *TEMP storage for D0 because it will be used by PRINT
00002034  43F9 000021F2           1481         LEA     AddrREGTABLE, A1
0000203A  C0FC 0006               1482         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000203E  4EB1 0000               1483         JSR     (A1, D0) *JMP To index A1 + D0
00002042  43F9 000024FB           1484         LEA      INDR_RIGHT, A1
00002048  103C 000E               1485         MOVE.B   #14, D0
0000204C  4E4F                    1486         TRAP     #15
0000204E  B23C 0003               1487         CMP.B    #%0011, D1  // IF IT IS ()+
00002052  6700 0048               1488         BEQ      POST_INCREMENT_DEST
00002056  4E75                    1489         RTS      * Goes Back to DestEAFinder
00002058                          1490         
00002058                          1491  POST_INCREMENT_SRC:
00002058  43F9 000024FD           1492         LEA      POST_INCRE, A1
0000205E  103C 000E               1493         MOVE.B   #14, D0
00002062  4E4F                    1494         TRAP     #15
00002064  4E75                    1495         RTS * BRA DESTEAFINDER DELETED
00002066                          1496         
00002066                          1497  PRE_DECREMENT_SRC:
00002066  43F9 000024FF           1498         LEA      PRE_DECRE, A1
0000206C  103C 000E               1499         MOVE.B   #14, D0
00002070  4E4F                    1500         TRAP     #15
00002072  43F9 000024F9           1501         LEA      INDR_LEFT, A1
00002078  103C 000E               1502         MOVE.B   #14, D0
0000207C  4E4F                    1503         TRAP     #15
0000207E  1005                    1504         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
00002080  43F9 000021F2           1505         LEA     AddrREGTABLE, A1
00002086  C0FC 0006               1506         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
0000208A  4EB1 0000               1507         JSR     (A1, D0) *JMP To index A1 + D0
0000208E  43F9 000024FB           1508         LEA      INDR_RIGHT, A1
00002094  103C 000E               1509         MOVE.B   #14, D0
00002098  4E4F                    1510         TRAP     #15
0000209A  4E75                    1511         RTS * BRA DESTEAFINDER DELETED
0000209C                          1512  
0000209C                          1513  POST_INCREMENT_DEST
0000209C  43F9 000024FD           1514         LEA      POST_INCRE, A1
000020A2  103C 000E               1515         MOVE.B   #14, D0
000020A6  4E4F                    1516         TRAP     #15
000020A8  4E75                    1517         RTS      * Goes Back to DestEAFinder
000020AA                          1518         
000020AA                          1519  PRE_DECREMENT_DEST:
000020AA  43F9 000024FF           1520         LEA      PRE_DECRE, A1
000020B0  103C 000E               1521         MOVE.B   #14, D0
000020B4  4E4F                    1522         TRAP     #15
000020B6  43F9 000024F9           1523         LEA      INDR_LEFT, A1
000020BC  103C 000E               1524         MOVE.B   #14, D0
000020C0  4E4F                    1525         TRAP     #15
000020C2  1005                    1526         MOVE.B   D5, D0   *TEMP storage for D0 because it will be used by PRINT
000020C4  43F9 000021F2           1527         LEA     AddrREGTABLE, A1
000020CA  C0FC 0006               1528         MULU    #6, D0  * Multiply by 6 bc Each index between jmp table diff is 6
000020CE  4EB1 0000               1529         JSR     (A1, D0) *JMP To index A1 + D0
000020D2  43F9 000024FB           1530         LEA      INDR_RIGHT, A1
000020D8  103C 000E               1531         MOVE.B   #14, D0
000020DC  4E4F                    1532         TRAP     #15
000020DE  4E75                    1533         RTS      * Goes Back to DestEAFinder
000020E0                          1534         
000020E0                          1535  JMPTO_SRC_IMMEDIATE:
000020E0  B03C 0000               1536         CMP.B    #%000, D0
000020E4  6700 002E               1537         BEQ      Address_W
000020E8  B03C 0001               1538         CMP.B    #%001, D0
000020EC  6700 0044               1539         BEQ      Address_L
000020F0  B03C 0004               1540         CMP.B    #%100, D0
000020F4  6700 005A               1541         BEQ      Address_Immediate
000020F8  4EF9 0000231C           1542         JMP      PRINTINVALIDEA
000020FE                          1543  *===================================  
000020FE                          1544  * Same as SRC but without Immediate address     
000020FE                          1545  JMPTO_DEST_IMMEDIATE:
000020FE  B03C 0000               1546         CMP.B    #%000, D0
00002102  6700 0010               1547         BEQ      Address_W
00002106  B03C 0001               1548         CMP.B    #%001, D0
0000210A  6700 0026               1549         BEQ      Address_L
0000210E  4EF9 0000231C           1550         JMP      PRINTINVALIDEA
00002114                          1551         
00002114                          1552  Address_W:
00002114  43F9 00002501           1553          LEA     DOLLAR_SIGN, A1
0000211A  103C 000E               1554          MOVE.B  #14, D0
0000211E  4E4F                    1555          TRAP    #15
00002120  4241                    1556          CLR     D1
00002122  4240                    1557          CLR     D0
00002124  321E                    1558          MOVE.W  (A6)+, D1
00002126  143C 0010               1559          MOVE.B  #16, D2
0000212A  103C 000F               1560          MOVE.B  #15, D0
0000212E  4E4F                    1561          TRAP    #15 
00002130  4E75                    1562          RTS 
00002132                          1563  
00002132                          1564  Address_L
00002132  43F9 00002501           1565          LEA     DOLLAR_SIGN, A1
00002138  103C 000E               1566          MOVE.B  #14, D0
0000213C  4E4F                    1567          TRAP    #15
0000213E  4241                    1568          CLR     D1
00002140  4240                    1569          CLR     D0
00002142  221E                    1570          MOVE.L  (A6)+, D1
00002144  143C 0010               1571          MOVE.B  #16, D2
00002148  103C 000F               1572          MOVE.B  #15, D0
0000214C  4E4F                    1573          TRAP    #15
0000214E  4E75                    1574          RTS  
00002150                          1575          
00002150                          1576  Address_Immediate:
00002150  43F9 00002503           1577          LEA     POUND_SIGN, A1
00002156  103C 000E               1578          MOVE.B  #14, D0
0000215A  4E4F                    1579          TRAP    #15
0000215C  43F9 00002501           1580          LEA     DOLLAR_SIGN, A1
00002162  103C 000E               1581          MOVE.B  #14, D0
00002166  4E4F                    1582          TRAP    #15
00002168  0C39 0001 00002562      1583          CMP.B   #%01, OpCodeSize *01 is used to mark invalid immediate for example ROR, ROL
00002170  6700 01AA               1584          BEQ     PRINTINVALIDEA
00002174  0C39 0000 00002562      1585          CMP.B   #%00, OpCodeSize
0000217C  6700 001A               1586          BEQ     Immediate_B
00002180  0C39 0003 00002562      1587          CMP.B   #%11, OpCodeSize
00002188  6700 001C               1588          BEQ     Immediate_W
0000218C  0C39 0002 00002562      1589          CMP.B   #%10, OpCOdeSize
00002194  6700 001E               1590          BEQ     Immediate_L
00002198                          1591          
00002198                          1592  Immediate_B:
00002198  121E                    1593          MOVE.B  (A6)+, D1
0000219A  143C 0010               1594          MOVE.B  #16, D2
0000219E  103C 000F               1595          MOVE.B  #15, D0
000021A2  4E4F                    1596          TRAP    #15
000021A4  4E75                    1597          RTS
000021A6                          1598          
000021A6                          1599  Immediate_W:
000021A6  321E                    1600          MOVE.W  (A6)+, D1
000021A8  143C 0010               1601          MOVE.B  #16, D2
000021AC  103C 000F               1602          MOVE.B  #15, D0
000021B0  4E4F                    1603          TRAP    #15
000021B2  4E75                    1604          RTS
000021B4                          1605          
000021B4                          1606  Immediate_L:
000021B4  221E                    1607          MOVE.L  (A6)+, D1
000021B6  143C 0010               1608          MOVE.B  #16, D2
000021BA  103C 000F               1609          MOVE.B  #15, D0
000021BE  4E4F                    1610          TRAP    #15
000021C0  4E75                    1611          RTS
000021C2                          1612  
000021C2                          1613          
000021C2                          1614  
000021C2                          1615  *=================================================================
000021C2                          1616  *---------Data Register Table used for printing out Registers----
000021C2                          1617  *----------Starts from index and use JRS (x,y) to jump to certain index, multiply by #6
000021C2                          1618  DataRegTable
000021C2  4EF9 00002222           1619          JMP REG_D0
000021C8  4EF9 00002236           1620          JMP REG_D1
000021CE  4EF9 00002244           1621          JMP REG_D2
000021D4  4EF9 00002252           1622          JMP REG_D3
000021DA  4EF9 00002260           1623          JMP REG_D4
000021E0  4EF9 0000226E           1624          JMP REG_D5
000021E6  4EF9 0000227C           1625          JMP REG_D6
000021EC  4EF9 0000228A           1626          JMP REG_D7
000021F2                          1627  
000021F2                          1628  AddrRegTable:
000021F2                          1629          
000021F2  4EF9 00002298           1630          JMP REG_A0
000021F8  4EF9 000022AC           1631          JMP REG_A1
000021FE  4EF9 000022BA           1632          JMP REG_A2
00002204  4EF9 000022C8           1633          JMP REG_A3
0000220A  4EF9 000022D6           1634          JMP REG_A4
00002210  4EF9 000022E4           1635          JMP REG_A5
00002216  4EF9 000022F2           1636          JMP REG_A6
0000221C  4EF9 00002300           1637          JMP REG_A7
00002222                          1638  
00002222                          1639  * Data Registers Printing        
00002222                          1640  REG_D0:
00002222  227C 00000000           1641          MOVEA.L #$0, A1
00002228  43F9 000024C9           1642          LEA     DREG0, A1
0000222E  103C 000E               1643          MOVE.B  #14, D0
00002232  4E4F                    1644          TRAP    #15
00002234  4E75                    1645          RTS
00002236                          1646          
00002236                          1647  REG_D1:
00002236  43F9 000024CC           1648          LEA     DREG1, A1
0000223C  103C 000E               1649          MOVE.B  #14, D0
00002240  4E4F                    1650          TRAP    #15
00002242  4E75                    1651          RTS
00002244                          1652  REG_D2:
00002244  43F9 000024CF           1653          LEA     DREG2, A1
0000224A  103C 000E               1654          MOVE.B  #14, D0
0000224E  4E4F                    1655          TRAP    #15
00002250  4E75                    1656          RTS
00002252                          1657  REG_D3:
00002252  43F9 000024D2           1658          LEA     DREG3, A1
00002258  103C 000E               1659          MOVE.B  #14, D0
0000225C  4E4F                    1660          TRAP    #15
0000225E  4E75                    1661          RTS
00002260                          1662  REG_D4:
00002260  43F9 000024D5           1663          LEA     DREG4, A1
00002266  103C 000E               1664          MOVE.B  #14, D0
0000226A  4E4F                    1665          TRAP    #15
0000226C  4E75                    1666          RTS
0000226E                          1667  REG_D5:
0000226E  43F9 000024D8           1668          LEA     DREG5, A1
00002274  103C 000E               1669          MOVE.B  #14, D0
00002278  4E4F                    1670          TRAP    #15
0000227A  4E75                    1671          RTS
0000227C                          1672  REG_D6:
0000227C  43F9 000024DB           1673          LEA     DREG6, A1
00002282  103C 000E               1674          MOVE.B  #14, D0
00002286  4E4F                    1675          TRAP    #15
00002288  4E75                    1676          RTS
0000228A                          1677  REG_D7:
0000228A  43F9 000024DE           1678          LEA     DREG7, A1
00002290  103C 000E               1679          MOVE.B  #14, D0
00002294  4E4F                    1680          TRAP    #15
00002296  4E75                    1681          RTS
00002298                          1682          
00002298                          1683  *--------------------Addr Reigster printing ------------------------*        
00002298                          1684  REG_A0:
00002298  227C 00000000           1685          MOVEA.L #$0, A1
0000229E  43F9 000024E1           1686          LEA     AREG0, A1
000022A4  103C 000E               1687          MOVE.B  #14, D0
000022A8  4E4F                    1688          TRAP    #15
000022AA  4E75                    1689          RTS
000022AC                          1690          
000022AC                          1691  REG_A1:
000022AC  43F9 000024E4           1692          LEA     AREG1, A1
000022B2  103C 000E               1693          MOVE.B  #14, D0
000022B6  4E4F                    1694          TRAP    #15
000022B8  4E75                    1695          RTS
000022BA                          1696  REG_A2:
000022BA  43F9 000024E7           1697          LEA     AREG2, A1
000022C0  103C 000E               1698          MOVE.B  #14, D0
000022C4  4E4F                    1699          TRAP    #15
000022C6  4E75                    1700          RTS
000022C8                          1701  REG_A3:
000022C8  43F9 000024EA           1702          LEA     AREG3, A1
000022CE  103C 000E               1703          MOVE.B  #14, D0
000022D2  4E4F                    1704          TRAP    #15
000022D4  4E75                    1705          RTS
000022D6                          1706  REG_A4:
000022D6  43F9 000024ED           1707          LEA     AREG4, A1
000022DC  103C 000E               1708          MOVE.B  #14, D0
000022E0  4E4F                    1709          TRAP    #15
000022E2  4E75                    1710          RTS
000022E4                          1711  REG_A5:
000022E4  43F9 000024F0           1712          LEA     AREG5, A1
000022EA  103C 000E               1713          MOVE.B  #14, D0
000022EE  4E4F                    1714          TRAP    #15
000022F0  4E75                    1715          RTS
000022F2                          1716  REG_A6:
000022F2  43F9 000024F3           1717          LEA     AREG6, A1
000022F8  103C 000E               1718          MOVE.B  #14, D0
000022FC  4E4F                    1719          TRAP    #15
000022FE  4E75                    1720          RTS
00002300                          1721  REG_A7:
00002300  43F9 000024F6           1722          LEA     AREG7, A1
00002306  103C 000E               1723          MOVE.B  #14, D0
0000230A  4E4F                    1724          TRAP    #15
0000230C  4E75                    1725          RTS
0000230E                          1726          
0000230E                          1727  *====================================================PRinting/ ERROR method comes down here=========================================
0000230E                          1728  PRINTCOMMA: * Prints comma between two operrands
0000230E  43F9 00002485           1729          LEA     COMMA, A1
00002314  103C 000E               1730          MOVE.B  #14, D0
00002318  4E4F                    1731          TRAP    #15
0000231A  4E75                    1732          RTS
0000231C                          1733          
0000231C                          1734  PrintInvalidEA:
0000231C  43F9 000023E2           1735          LEA     Invalid_EA_Addr, A1
00002322  103C 000E               1736          MOVE.B  #14, D0
00002326  4E4F                    1737          TRAP    #15
00002328  4EF8 10F2               1738          JMP     AddrLoop
0000232C                          1739          
0000232C                          1740  PrintInvalidSUB:
0000232C  43F9 000023F8           1741          LEA     Invalid_EA_SUB, A1
00002332  103C 000E               1742          MOVE.B  #14, D0
00002336  4E4F                    1743          TRAP    #15
00002338  4EF8 10F2               1744          JMP     AddrLoop
0000233C                          1745          
0000233C                          1746  PrintInvalidAddress:
0000233C  43F9 00002416           1747          LEA     Invalid_Address, A1
00002342  103C 000E               1748          MOVE.B  #14, D0
00002346  4E4F                    1749          TRAP    #15
00002348  4EF8 1006               1750          JMP     GETINPUT
0000234C                          1751          
0000234C                          1752  PrintDATA:
0000234C  43F9 000024B3           1753          LEA     DATA, A1
00002352  103C 000E               1754          MOVE.B  #14, D0
00002356  4E4F                    1755          TRAP    #15
00002358  3202                    1756          MOVE.W  D2, D1
0000235A  143C 0010               1757          MOVE.B  #16, D2
0000235E  103C 000F               1758          MOVE.B  #15, D0
00002362  4E4F                    1759          TRAP    #15
00002364  6000 ED8C               1760          BRA     AddrLoop
00002368                          1761           
00002368                          1762  * Clear all registers    
00002368                          1763  CLRREG:
00002368  7000                    1764      MOVE.L  #0, D0
0000236A  7200                    1765      MOVE.L  #0, D1
0000236C  7400                    1766      MOVE.L  #0, D2
0000236E  7600                    1767      MOVE.L  #0, D3
00002370  7800                    1768      MOVE.L  #0, D4
00002372  7A00                    1769      MOVE.L  #0, D5
00002374  7C00                    1770      MOVE.L  #0, D6
00002376  7E00                    1771      MOVE.L  #0, D7
00002378  4E75                    1772      RTS
0000237A                          1773      
0000237A                          1774  CLRAREG:
0000237A  207C 00000000           1775      MOVE.L  #0, A0
00002380  227C 00000000           1776      MOVE.L  #0, A1
00002386  247C 00000000           1777      MOVE.L  #0, A2
0000238C  267C 00000000           1778      MOVE.L  #0, A3
00002392  287C 00000000           1779      MOVE.L  #0, A4
00002398  2A7C 00000000           1780      MOVE.L  #0, A5
0000239E  4E75                    1781      RTS
000023A0                          1782  
000023A0                          1783      
000023A0                          1784      
000023A0                          1785          
000023A0                          1786  * Put program code here
000023A0                          1787  
000023A0  FFFF FFFF               1788      SIMHALT             ; halt simulator
000023A4                          1789  
000023A4                          1790  * Put variables and constants here
000023A4  =0000000D               1791  CR  EQU $0D
000023A4  =0000000A               1792  LF  EQU $0A
000023A4= 50 6C 65 61 73 65 ...   1793  WELCOME     DC.B    'Please enter starting address', CR, LF, 0
000023C4= 50 6C 65 61 73 65 ...   1794  WELCOME2    DC.B    'Please enter ending address', CR, LF, 0
000023E2= 49 6E 76 61 6C 69 ...   1795  Invalid_EA_ADDR DC.B   'Invalid EA detected', CR, LF, 0
000023F8= 49 6E 76 61 6C 69 ...   1796  INVALID_EA_SUB  DC.B    'Invalid SUB OPMODE Detected', CR, LF, 0
00002416= 47 69 76 65 6E 20 ...   1797  Invalid_Address DC.B    'Given address is Invalid', CR, LF, 0
00002431= 43 6F 6E 74 69 6E ...   1798  Continue_Program    DC.B    'Continue Program? Y/N', CR, LF, 0
00002449= 43 6F 6E 74 69 6E ...   1799  Continue_Screen DC.B    'Continue Screen? Y/N', CR, LF, 0
00002460= 0D 0A 00                1800  Print_NextLine  DC.B    '', CR, LF, 0
00002463= 54 68 61 6E 6B 20 ...   1801  TY_Message  DC.B    'Thank you for using our program', CR, LF, 0
00002485                          1802  
00002485= 2C 20 00                1803  COMMA       DC.B    ', ', 0
00002488= 20 20 20 00             1804  SPACER      DC.B    '   ', 0
0000248C                          1805  *DATASIZE
0000248C= 2E 42 20 00             1806  SIZE_BYTE       DC.B    '.B ', 0
00002490= 2E 57 20 00             1807  SIZE_WORD       DC.B    '.W ', 0
00002494= 2E 4C 20 00             1808  SIZE_LONG       DC.B    '.L ', 0
00002498                          1809  
00002498                          1810  *MOVE OPCODES
00002498= 4D 4F 56 45 00          1811  MOVE_PRINT  DC.B    'MOVE', 0
0000249D= 4D 4F 56 45 2E 42 ...   1812  MOVEB       DC.B    'MOVE.B ', 0
000024A5= 2E 42 20 00             1813  SIZE_B       DC.B    '.B ', 0
000024A9= 2E 57 20 00             1814  MOVEW       DC.B    '.W ', 0
000024AD= 2E 4C 20 00             1815  MOVEL       DC.B    '.L ', 0
000024B1= 41 00                   1816  MOVEA       DC.B    'A', 0
000024B3= 44 41 54 41 3A 20 00    1817  DATA        DC.B    'DATA: ', 0
000024BA= 4D 4F 56 45 51 00       1818  MOVEQ       DC.B    'MOVEQ', 0
000024C0= 4D 4F 56 45 4D 00       1819  MOVEM       DC.B    'MOVEM', 0
000024C6= 01                      1820  MOVEM_DR    DC.B    1
000024C7= 01                      1821  SIZE_MOVEM  DC.B    1
000024C8= 01                      1822  REG_LIST   DC.B    1
000024C9                          1823  
000024C9                          1824  
000024C9                          1825  *DATA REGISTERS PRINTOUT
000024C9= 44 30 00                1826  DREG0       DC.B    'D0', 0
000024CC= 44 31 00                1827  DREG1       DC.B    'D1', 0
000024CF= 44 32 00                1828  DREG2       DC.B    'D2', 0
000024D2= 44 33 00                1829  DREG3       DC.B    'D3', 0
000024D5= 44 34 00                1830  DREG4       DC.B    'D4', 0
000024D8= 44 35 00                1831  DREG5       DC.B    'D5', 0
000024DB= 44 36 00                1832  DREG6       DC.B    'D6', 0
000024DE= 44 37 00                1833  DREG7       DC.B    'D7', 0 
000024E1                          1834  
000024E1                          1835  *ADDR REGISTERS PRINTOUT
000024E1= 41 30 00                1836  AREG0       DC.B    'A0', 0
000024E4= 41 31 00                1837  AREG1       DC.B    'A1', 0
000024E7= 41 32 00                1838  AREG2       DC.B    'A2', 0
000024EA= 41 33 00                1839  AREG3       DC.B    'A3', 0
000024ED= 41 34 00                1840  AREG4       DC.B    'A4', 0
000024F0= 41 35 00                1841  AREG5       DC.B    'A5', 0
000024F3= 41 36 00                1842  AREG6       DC.B    'A6', 0
000024F6= 41 37 00                1843  AREG7       DC.B    'A7', 0 
000024F9                          1844  
000024F9                          1845  *INDR_ADDR REGISTERS PRINTOUT
000024F9= 28 00                   1846  INDR_LEFT   DC.B    '(', 0
000024FB= 29 00                   1847  INDR_RIGHT  DC.B    ')', 0
000024FD= 2B 00                   1848  POST_INCRE   DC.B    '+', 0
000024FF= 2D 00                   1849  PRE_DECRE   DC.B    '-', 0
00002501= 24 00                   1850  DOLLAR_SIGN DC.B    '$', 0
00002503= 23 00                   1851  POUND_SIGN  DC.B    '#', 0
00002505                          1852  
00002505                          1853  *SUB
00002505= 53 55 42 00             1854  SUBTRACT    DC.B    'SUB', 0
00002509= 41 44 44 00             1855  ADDITION    DC.B    'ADD', 0
0000250D= 41 4E 44 00             1856  AND         DC.B    'AND', 0
00002511= 4F 52 00                1857  OR          DC.B    'OR', 0
00002514= 4E 4F 54 00             1858  NOT_OP      DC.B    'NOT', 0
00002518= 52 4F 4C 00             1859  ROL         DC.B    'ROL', 0
0000251C= 52 4F 52 00             1860  ROR         DC.B    'ROR', 0
00002520= 4C 53 4C 00             1861  LSL         DC.B    'LSL', 0
00002524= 4C 53 52 00             1862  LSR         DC.B    'LSR', 0
00002528= 41 53 4C 00             1863  ASL         DC.B    'ASL', 0
0000252C= 41 53 52 00             1864  ASR         DC.B    'ASR', 0
00002530= 4E 4F 50 00             1865  NOP         DC.B    'NOP', 0
00002534= 4A 53 52 00             1866  JSR         DC.B    'JSR', 0
00002538= 52 54 53 00             1867  RTS         DC.B    'RTS', 0
0000253C= 4C 45 41 00             1868  LEA         DC.B    'LEA', 0
00002540= 42 47 54 00             1869  BGT         DC.B    'BGT', 0
00002544= 42 4C 45 00             1870  BLE         DC.B    'BLE', 0
00002548= 42 45 51 00             1871  BEQ         DC.B    'BEQ', 0
0000254C= 42 52 41 00             1872  BRA         DC.B    'BRA', 0
00002550= 01                      1873  SHIFT       DC.B    1
00002551                          1874  
00002551                          1875  
00002552= 00000001                1876  addrStart   DC.L    1   // Starting address
00002556= 00000001                1877  addrEnd     DC.L    1   // ending address
0000255A= 00000001                1878  OpCodeStorage DC.L    1
0000255E= 00000001                1879  ScreenCounter   DC.L    1
00002562= 00000001                1880  OpCodeSize  DC.L    1
00002566                          1881      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A                   11E2
ADDITION            2509
ADDREND             2556
ADDRESS_IMMEDIATE   2150
ADDRESS_L           2132
ADDRESS_W           2114
ADDRLOOP            10F2
ADDRREGTABLE        21F2
ADDRSTART           2552
ADDVAL              11DC
AND                 250D
AREG0               24E1
AREG1               24E4
AREG2               24E7
AREG3               24EA
AREG4               24ED
AREG5               24F0
AREG6               24F3
AREG7               24F6
ASL                 2528
ASR                 252C
B                   11E8
BEQ                 2548
BGT                 2540
BLE                 2544
BRA                 254C
BRA_LONG            17F4
BRA_WORD            17C2
C                   11EE
CHAR                11AC
CHECKRANGE          1086
CHECK_CONT          112C
CHECK_MOVEA         1ECC
CLRAREG             237A
CLRREG              2368
COMMA               2485
CONTINUE_PROGRAM    2431
CONTINUE_SCREEN     2449
CONVERT             1192
CR                  D
D                   11F4
DATA                24B3
DATAREGTABLE        21C2
DESTEACHECKER       1F52
DESTEAFINDER        1F80
DOLLAR_SIGN         2501
DREG0               24C9
DREG1               24CC
DREG2               24CF
DREG3               24D2
DREG4               24D5
DREG5               24D8
DREG6               24DB
DREG7               24DE
E                   11FA
EA                  1EFE
EACHECKER           1F1C
END                 10E0
F                   1200
GETINPUT            1006
IMMEDIATE_B         2198
IMMEDIATE_L         21B4
IMMEDIATE_W         21A6
INDR_LEFT           24F9
INDR_RIGHT          24FB
INVALID_ADDRESS     2416
INVALID_EA_ADDR     23E2
INVALID_EA_SUB      23F8
JMPTABLE            1252
JMPTODESTREG        1FB0
JMPTOSRCREG         1FA0
JMPTO_DEST_ADDR_REG  1FD0
JMPTO_DEST_IMMEDIATE  20FE
JMPTO_DEST_INDR_ADDR_REG  201C
JMPTO_SRC_ADDR_REG  1FC0
JMPTO_SRC_IMMEDIATE  20E0
JMPTO_SRC_INDR_ADDR_REG  1FE0
JSR                 2534
JSR_DATA            1430
LEA                 253C
LEA_DATA            1470
LF                  A
LOOP                1188
LOWERLIMIT          3000
LSL                 2520
LSR                 2524
MEMORY_ALTERABLE_CHECK  1E54
MEMORY_INDIRECT     1A9E
MEMORY_SHIFT_DATA   1A68
MOVEA               24B1
MOVEB               249D
MOVEL               24AD
MOVEM               24C0
MOVEM_DATAREGISTER  14F0
MOVEM_DR            24C6
MOVEM_JSR           134C
MOVEM_MEM_REG       153A
MOVEM_MEM_REG_DEC   1646
MOVEM_MEM_REG_EA    15E4
MOVEM_MEM_REG_INC   1624
MOVEM_REG_LIST      1502
MOVEM_REG_MEM       150E
MOVEM_REG_MEM_DEC   15C2
MOVEM_REG_MEM_EA    1566
MOVEM_REG_MEM_INC   15A0
MOVEM_SIZE          14E0
MOVEM_SRC           14CC
MOVEQ               24BA
MOVEQ_DATA          1852
MOVEQ_REG           185C
MOVEW               24A9
MOVE_PRINT          2498
NEXT_SCREEN         1156
NOP                 2530
NOT_JMPTABLE        1392
NOT_OP              2514
NOT_SIZE00          13AA
NOT_SIZE01          13CC
NOT_SIZE10          13E6
NOT_SIZE11          1400
OP0000              12AC
OP0001              12AC
OP0010              12CA
OP0011              12FA
OP0100              1322
OP0101              1668
OP0110              1668
OP0111              1826
OP1000              18F6
OP1001              18BA
OP1010              193A
OP1011              193A
OP1100              193A
OP1101              1976
OP1110              19B2
OPCODE              1206
OPCODESIZE          2562
OPCODESTORAGE       255A
OPMODE000           1D72
OPMODE001           1D8C
OPMODE010           1D9E
OPMODE011           1DB0
OPMODE100           1DDE
OPMODE101           1DF6
OPMODE110           1E0E
OPMODE111           1E26
OP_ASL_MEMORY       1B4A
OP_ASL_REGISTER     1A12
OP_ASR_MEMORY       1B86
OP_ASR_REGISTER     1A24
OP_BEQ              1776
OP_BGT              16DE
OP_BLE              172A
OP_BRA              1692
OP_JSR              1404
OP_LEA              1444
OP_LSL_MEMORY       1AB2
OP_LSL_REGISTER     19D2
OP_LSR_MEMORY       1AFE
OP_LSR_REGISTER     19F0
OP_MOVEM            1492
OP_NOP              186A
OP_NOT              1360
OP_RTS              1892
OR                  2511
POST_INCRE          24FD
POST_INCREMENT_DEST  209C
POST_INCREMENT_SRC  2058
POUND_SIGN          2503
PRE_DECRE           24FF
PRE_DECREMENT_DEST  20AA
PRE_DECREMENT_SRC   2066
PRINT8              1D32
PRINTA              1EEE
PRINTCOMMA          230E
PRINTDATA           234C
PRINTINVALIDADDRESS  233C
PRINTINVALIDEA      231C
PRINTINVALIDSUB     232C
PRINT_NEXTLINE      2460
REGISTER_SHIFT_DATA  1A36
REG_A0              2298
REG_A1              22AC
REG_A2              22BA
REG_A3              22C8
REG_A4              22D6
REG_A5              22E4
REG_A6              22F2
REG_A7              2300
REG_D0              2222
REG_D1              2236
REG_D2              2244
REG_D3              2252
REG_D4              2260
REG_D5              226E
REG_D6              227C
REG_D7              228A
REG_LIST            24C8
ROL                 2518
ROLTEST             6000
ROL_ROR             1BC2
ROR                 251C
ROTATETABLE         1BFA
ROTATE_B            1C4A
ROTATE_EA           1C9E
ROTATE_EACHECKER    1CBC
ROTATE_L            1C82
ROTATE_LEFT         1C18
ROTATE_PRINT_IMMEDIATE  1CFC
ROTATE_PRINT_IMMEDIATECONT  1D1C
ROTATE_PRINT_REGISTER  1CE2
ROTATE_RIGHT        1C06
ROTATE_SIZE_TABLE   1C2A
ROTATE_W            1C66
RTS                 2538
SCREENCOUNTER       255E
SHIFT               2550
SHIFT_MEMORY        1AAC
SHIFT_REGISTER      19C8
SIZE_B              24A5
SIZE_BYTE           248C
SIZE_LONG           2494
SIZE_MOVEM          24C7
SIZE_WORD           2490
SPACER              2488
SPECIALTEST         5000
SPECIAL_OPMODE_USED  1DC0
SPECIAL_OPMODE_USED2  1E36
START               1000
SUBTABLE            1D42
SUBTRACT            2505
SUB_OPMODE_ADDA     1EAA
SUB_OPMODE_FIRST    1E66
SUB_OPMODE_SECOND   1E84
TESTER              9000
TY_MESSAGE          2463
UPPERLIMIT          FFFFFE
WELCOME             23A4
WELCOME2            23C4
YESNOSTORAGE        50
